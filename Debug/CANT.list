
CANT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000615c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006354  08006354  00016354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006374  08006374  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006374  08006374  00016374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800637c  0800637c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800637c  0800637c  0001637c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006380  08006380  00016380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000000c  08006390  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08006390  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bdc  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002776  00000000  00000000  00032c16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001018  00000000  00000000  00035390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed0  00000000  00000000  000363a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028654  00000000  00000000  00037278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dfe6  00000000  00000000  0005f8cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd7e6  00000000  00000000  0006d8b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016b098  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004308  00000000  00000000  0016b114  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800633c 	.word	0x0800633c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800633c 	.word	0x0800633c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <run_motor_n>:

/*La funcion pone en movimiento el motor del nodo indicado, debe recibir
 *  el valor del nodo (1 o 2), el valor al cual se desea mover y el estado del nodo,
 *  si el nodo no se encuentra en estado operacional no se realiza accion*/
int run_motor_n(uint16_t node,uint32_t in,uint16_t state)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08a      	sub	sp, #40	; 0x28
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	6039      	str	r1, [r7, #0]
 8000542:	80fb      	strh	r3, [r7, #6]
 8000544:	4613      	mov	r3, r2
 8000546:	80bb      	strh	r3, [r7, #4]
//	if(state==OPERATIONAL)
//	{
		// Actualizo valor de Velocidad
		uint8_t VEL[8]; //velocidad a enviar por can.
					int v=(in)*(5000/4095);
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	627b      	str	r3, [r7, #36]	; 0x24
					uint32_t a=((v)&(0x000000FF));
 800054c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800054e:	b2db      	uxtb	r3, r3
 8000550:	623b      	str	r3, [r7, #32]
					uint32_t b=((v)&(0x0000FF00))>>(8);
 8000552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000554:	121b      	asrs	r3, r3, #8
 8000556:	b2db      	uxtb	r3, r3
 8000558:	61fb      	str	r3, [r7, #28]
					uint32_t c=((v)&(0x00FF0000))>>(16);
 800055a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800055c:	141b      	asrs	r3, r3, #16
 800055e:	b2db      	uxtb	r3, r3
 8000560:	61bb      	str	r3, [r7, #24]
					uint32_t d=((v)&(0xFF000000))>>(24);
 8000562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000564:	0e1b      	lsrs	r3, r3, #24
 8000566:	617b      	str	r3, [r7, #20]
		VEL[0]=0x23;
 8000568:	2323      	movs	r3, #35	; 0x23
 800056a:	733b      	strb	r3, [r7, #12]
		VEL[1]=0xff;
 800056c:	23ff      	movs	r3, #255	; 0xff
 800056e:	737b      	strb	r3, [r7, #13]
		VEL[2]=0x60;
 8000570:	2360      	movs	r3, #96	; 0x60
 8000572:	73bb      	strb	r3, [r7, #14]
		VEL[3]=0x00;  	 		//subindex
 8000574:	2300      	movs	r3, #0
 8000576:	73fb      	strb	r3, [r7, #15]
		VEL[4]=a;
 8000578:	6a3b      	ldr	r3, [r7, #32]
 800057a:	b2db      	uxtb	r3, r3
 800057c:	743b      	strb	r3, [r7, #16]
		VEL[5]=b;
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	747b      	strb	r3, [r7, #17]
		VEL[6]=c;
 8000584:	69bb      	ldr	r3, [r7, #24]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	74bb      	strb	r3, [r7, #18]
		VEL[7]=d;
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	74fb      	strb	r3, [r7, #19]
		if(can1_Tx(0x600+node,VEL,8)!=HAL_OK)
 8000590:	88fb      	ldrh	r3, [r7, #6]
 8000592:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000596:	b29b      	uxth	r3, r3
 8000598:	f107 010c 	add.w	r1, r7, #12
 800059c:	2208      	movs	r2, #8
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f9b2 	bl	8000908 <can1_Tx>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d003      	beq.n	80005b2 <run_motor_n+0x7a>
				{
					Error_Handler();
 80005aa:	f005 fbb1 	bl	8005d10 <Error_Handler>
					return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
 80005b0:	e000      	b.n	80005b4 <run_motor_n+0x7c>
				}
//		}
	return HAL_OK;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3728      	adds	r7, #40	; 0x28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <send_ctrlwrd_1>:

int send_ctrlwrd_1(uint16_t node)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	80fb      	strh	r3, [r7, #6]
	uint8_t CTRL_WORD[8]; // activar motores
	CTRL_WORD[0]=0x2B;
 80005c6:	232b      	movs	r3, #43	; 0x2b
 80005c8:	723b      	strb	r3, [r7, #8]
	CTRL_WORD[1]=0x40;
 80005ca:	2340      	movs	r3, #64	; 0x40
 80005cc:	727b      	strb	r3, [r7, #9]
	CTRL_WORD[2]=0x60;
 80005ce:	2360      	movs	r3, #96	; 0x60
 80005d0:	72bb      	strb	r3, [r7, #10]
	CTRL_WORD[3]=0x00;
 80005d2:	2300      	movs	r3, #0
 80005d4:	72fb      	strb	r3, [r7, #11]
	CTRL_WORD[4]=0x06;
 80005d6:	2306      	movs	r3, #6
 80005d8:	733b      	strb	r3, [r7, #12]
	CTRL_WORD[5]=0x00;
 80005da:	2300      	movs	r3, #0
 80005dc:	737b      	strb	r3, [r7, #13]
	CTRL_WORD[6]=0x00;
 80005de:	2300      	movs	r3, #0
 80005e0:	73bb      	strb	r3, [r7, #14]
	CTRL_WORD[7]=0x00;
 80005e2:	2300      	movs	r3, #0
 80005e4:	73fb      	strb	r3, [r7, #15]
	if(can1_Tx(0x600+node,CTRL_WORD,8)!=HAL_OK)
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	f107 0108 	add.w	r1, r7, #8
 80005f2:	2208      	movs	r2, #8
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 f987 	bl	8000908 <can1_Tx>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d003      	beq.n	8000608 <send_ctrlwrd_1+0x4c>
	{
		Error_Handler();
 8000600:	f005 fb86 	bl	8005d10 <Error_Handler>
		return HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	e000      	b.n	800060a <send_ctrlwrd_1+0x4e>
	}
	return HAL_OK;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <send_ctrlword_2>:

int send_ctrlword_2(uint16_t node)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b084      	sub	sp, #16
 8000616:	af00      	add	r7, sp, #0
 8000618:	4603      	mov	r3, r0
 800061a:	80fb      	strh	r3, [r7, #6]
	uint8_t CTRL_WORD[8]; // activar motores

	CTRL_WORD[0]=0x2B;
 800061c:	232b      	movs	r3, #43	; 0x2b
 800061e:	723b      	strb	r3, [r7, #8]
	CTRL_WORD[1]=0x40;
 8000620:	2340      	movs	r3, #64	; 0x40
 8000622:	727b      	strb	r3, [r7, #9]
	CTRL_WORD[2]=0x60;
 8000624:	2360      	movs	r3, #96	; 0x60
 8000626:	72bb      	strb	r3, [r7, #10]
	CTRL_WORD[3]=0x00;
 8000628:	2300      	movs	r3, #0
 800062a:	72fb      	strb	r3, [r7, #11]
	CTRL_WORD[4]=0x0F;
 800062c:	230f      	movs	r3, #15
 800062e:	733b      	strb	r3, [r7, #12]
	CTRL_WORD[5]=0x00;
 8000630:	2300      	movs	r3, #0
 8000632:	737b      	strb	r3, [r7, #13]
	CTRL_WORD[6]=0x00;
 8000634:	2300      	movs	r3, #0
 8000636:	73bb      	strb	r3, [r7, #14]
	CTRL_WORD[7]=0x00;
 8000638:	2300      	movs	r3, #0
 800063a:	73fb      	strb	r3, [r7, #15]

	if(can1_Tx(0x600+node,CTRL_WORD,8)!=HAL_OK)
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000642:	b29b      	uxth	r3, r3
 8000644:	f107 0108 	add.w	r1, r7, #8
 8000648:	2208      	movs	r2, #8
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f95c 	bl	8000908 <can1_Tx>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d003      	beq.n	800065e <send_ctrlword_2+0x4c>
	{
		Error_Handler();
 8000656:	f005 fb5b 	bl	8005d10 <Error_Handler>
		return HAL_ERROR;
 800065a:	2301      	movs	r3, #1
 800065c:	e000      	b.n	8000660 <send_ctrlword_2+0x4e>
	}
	return HAL_OK;
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <analize_CAN_Rx>:

// Recibo Mensaje-- debo pasarle las variables donde voy a guardar el ID, y el mensaje:
int analize_CAN_Rx(CAN_RxHeaderTypeDef header,uint8_t mensaje [])
{
 8000668:	b084      	sub	sp, #16
 800066a:	b480      	push	{r7}
 800066c:	b089      	sub	sp, #36	; 0x24
 800066e:	af00      	add	r7, sp, #0
 8000670:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000674:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t info=0,volatil=0;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
	uint16_t Id,bytes,index,subindex;
	uint8_t n,ccs,e,s,contador,nodo;

	Id=header.StdId;
 8000680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000682:	827b      	strh	r3, [r7, #18]
	bytes=header.DLC;
 8000684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000686:	823b      	strh	r3, [r7, #16]
	/*Vamos a analizar casos: mensaje de bootup, y mensaje sdo, podriamos agregar tpdo en un futuro*/
	/*ORDEN DE REVISION: MENSAJES DE MAYOR A MENOR ID*/
		if(Id-0x700>0)
 8000688:	8a7b      	ldrh	r3, [r7, #18]
 800068a:	f5a3 63e0 	sub.w	r3, r3, #1792	; 0x700
 800068e:	2b00      	cmp	r3, #0
 8000690:	dd08      	ble.n	80006a4 <analize_CAN_Rx+0x3c>
		{
			nodo=Id-0x700;
 8000692:	8a7b      	ldrh	r3, [r7, #18]
 8000694:	73fb      	strb	r3, [r7, #15]
			status[nodo-1]=PREOPERATIONAL;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	3b01      	subs	r3, #1
 800069a:	4a5f      	ldr	r2, [pc, #380]	; (8000818 <analize_CAN_Rx+0x1b0>)
 800069c:	2102      	movs	r1, #2
 800069e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006a2:	e0b1      	b.n	8000808 <analize_CAN_Rx+0x1a0>
		}
		// con revisar que sea mayor a cero  me alcanza porque sino hubiese entrado en el caso anterior
		else if (Id-580>0)
 80006a4:	8a7b      	ldrh	r3, [r7, #18]
 80006a6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	f340 80ac 	ble.w	8000808 <analize_CAN_Rx+0x1a0>
			// primero debo analizar el byte de comando
			// Analisis CANOPEN
		{
		nodo=Id-0x580;
 80006b0:	8a7b      	ldrh	r3, [r7, #18]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	3b80      	subs	r3, #128	; 0x80
 80006b6:	73fb      	strb	r3, [r7, #15]
		index= (mensaje[1]<<(8))|mensaje[2]	;
 80006b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006ba:	3301      	adds	r3, #1
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	021b      	lsls	r3, r3, #8
 80006c0:	b21a      	sxth	r2, r3
 80006c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006c4:	3302      	adds	r3, #2
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b21b      	sxth	r3, r3
 80006ca:	4313      	orrs	r3, r2
 80006cc:	b21b      	sxth	r3, r3
 80006ce:	81bb      	strh	r3, [r7, #12]
		subindex=mensaje[3];
 80006d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006d2:	3303      	adds	r3, #3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	817b      	strh	r3, [r7, #10]
		ccs=(mensaje[0]&ccs_MSK);
 80006d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	f023 031f 	bic.w	r3, r3, #31
 80006e0:	727b      	strb	r3, [r7, #9]
		n=(mensaje[0]&n_MSK);
 80006e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	f003 030c 	and.w	r3, r3, #12
 80006ea:	723b      	strb	r3, [r7, #8]
		e=(mensaje[0]&e_MSK);
 80006ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	f003 0302 	and.w	r3, r3, #2
 80006f4:	71fb      	strb	r3, [r7, #7]
		s=(mensaje[0]&s_MSK);
 80006f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	71bb      	strb	r3, [r7, #6]
			for(contador=(1+n);contador<(bytes-3);contador++)
 8000700:	7a3b      	ldrb	r3, [r7, #8]
 8000702:	3301      	adds	r3, #1
 8000704:	76fb      	strb	r3, [r7, #27]
 8000706:	e00f      	b.n	8000728 <analize_CAN_Rx+0xc0>
			{
				volatil= mensaje[bytes-contador];
 8000708:	8a3a      	ldrh	r2, [r7, #16]
 800070a:	7efb      	ldrb	r3, [r7, #27]
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	461a      	mov	r2, r3
 8000710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000712:	4413      	add	r3, r2
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	617b      	str	r3, [r7, #20]
				info=(info<<8)+volatil;
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	021b      	lsls	r3, r3, #8
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	4413      	add	r3, r2
 8000720:	61fb      	str	r3, [r7, #28]
			for(contador=(1+n);contador<(bytes-3);contador++)
 8000722:	7efb      	ldrb	r3, [r7, #27]
 8000724:	3301      	adds	r3, #1
 8000726:	76fb      	strb	r3, [r7, #27]
 8000728:	7efa      	ldrb	r2, [r7, #27]
 800072a:	8a3b      	ldrh	r3, [r7, #16]
 800072c:	3b03      	subs	r3, #3
 800072e:	429a      	cmp	r2, r3
 8000730:	dbea      	blt.n	8000708 <analize_CAN_Rx+0xa0>
			}

			if (index==0x2087)	//velocity actual value
 8000732:	89bb      	ldrh	r3, [r7, #12]
 8000734:	f242 0287 	movw	r2, #8327	; 0x2087
 8000738:	4293      	cmp	r3, r2
 800073a:	d106      	bne.n	800074a <analize_CAN_Rx+0xe2>
			{
				info_motores[nodo-1]=info;
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	3b01      	subs	r3, #1
 8000740:	69fa      	ldr	r2, [r7, #28]
 8000742:	4936      	ldr	r1, [pc, #216]	; (800081c <analize_CAN_Rx+0x1b4>)
 8000744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000748:	e05e      	b.n	8000808 <analize_CAN_Rx+0x1a0>
			}
			else if (index==0x7960)	//DC Link actual voltage
 800074a:	89bb      	ldrh	r3, [r7, #12]
 800074c:	f647 1260 	movw	r2, #31072	; 0x7960
 8000750:	4293      	cmp	r3, r2
 8000752:	d106      	bne.n	8000762 <analize_CAN_Rx+0xfa>
			{
				info_motores[1+nodo]=info;
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	3301      	adds	r3, #1
 8000758:	69fa      	ldr	r2, [r7, #28]
 800075a:	4930      	ldr	r1, [pc, #192]	; (800081c <analize_CAN_Rx+0x1b4>)
 800075c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000760:	e052      	b.n	8000808 <analize_CAN_Rx+0x1a0>
			}
			else if (index==0x2320) 	//DC Current
 8000762:	89bb      	ldrh	r3, [r7, #12]
 8000764:	f242 3220 	movw	r2, #8992	; 0x2320
 8000768:	4293      	cmp	r3, r2
 800076a:	d106      	bne.n	800077a <analize_CAN_Rx+0x112>
			{
				info_motores[3+nodo]=info;
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	3303      	adds	r3, #3
 8000770:	69fa      	ldr	r2, [r7, #28]
 8000772:	492a      	ldr	r1, [pc, #168]	; (800081c <analize_CAN_Rx+0x1b4>)
 8000774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000778:	e046      	b.n	8000808 <analize_CAN_Rx+0x1a0>
			}
			else if (index==0x2520)		//Motor Temp
 800077a:	89bb      	ldrh	r3, [r7, #12]
 800077c:	f242 5220 	movw	r2, #9504	; 0x2520
 8000780:	4293      	cmp	r3, r2
 8000782:	d106      	bne.n	8000792 <analize_CAN_Rx+0x12a>
			{
				info_motores[5+nodo]=info;
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	3305      	adds	r3, #5
 8000788:	69fa      	ldr	r2, [r7, #28]
 800078a:	4924      	ldr	r1, [pc, #144]	; (800081c <analize_CAN_Rx+0x1b4>)
 800078c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000790:	e03a      	b.n	8000808 <analize_CAN_Rx+0x1a0>
			}
			else if (index==0x7860)		// Motor Current Actual Value
 8000792:	89bb      	ldrh	r3, [r7, #12]
 8000794:	f647 0260 	movw	r2, #30816	; 0x7860
 8000798:	4293      	cmp	r3, r2
 800079a:	d106      	bne.n	80007aa <analize_CAN_Rx+0x142>
			{
				info_motores[7+nodo]=info;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	3307      	adds	r3, #7
 80007a0:	69fa      	ldr	r2, [r7, #28]
 80007a2:	491e      	ldr	r1, [pc, #120]	; (800081c <analize_CAN_Rx+0x1b4>)
 80007a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80007a8:	e02e      	b.n	8000808 <analize_CAN_Rx+0x1a0>
			}
			else if (index==0x7760)		//Torque Actual Value
 80007aa:	89bb      	ldrh	r3, [r7, #12]
 80007ac:	f247 7260 	movw	r2, #30560	; 0x7760
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d106      	bne.n	80007c2 <analize_CAN_Rx+0x15a>
			{
				info_motores[9+nodo]=info;
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	3309      	adds	r3, #9
 80007b8:	69fa      	ldr	r2, [r7, #28]
 80007ba:	4918      	ldr	r1, [pc, #96]	; (800081c <analize_CAN_Rx+0x1b4>)
 80007bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80007c0:	e022      	b.n	8000808 <analize_CAN_Rx+0x1a0>
			}
			else if (index==0x6C60)		//Velocity actual Value
 80007c2:	89bb      	ldrh	r3, [r7, #12]
 80007c4:	f646 4260 	movw	r2, #27744	; 0x6c60
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d106      	bne.n	80007da <analize_CAN_Rx+0x172>
			{
				info_motores[11+nodo]=info;
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	330b      	adds	r3, #11
 80007d0:	69fa      	ldr	r2, [r7, #28]
 80007d2:	4912      	ldr	r1, [pc, #72]	; (800081c <analize_CAN_Rx+0x1b4>)
 80007d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80007d8:	e016      	b.n	8000808 <analize_CAN_Rx+0x1a0>
			}
			else if (index==0x8620)		// Velocity actual value AVG
 80007da:	89bb      	ldrh	r3, [r7, #12]
 80007dc:	f248 6220 	movw	r2, #34336	; 0x8620
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d106      	bne.n	80007f2 <analize_CAN_Rx+0x18a>
			{
				info_motores[13+nodo]=info;
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	330d      	adds	r3, #13
 80007e8:	69fa      	ldr	r2, [r7, #28]
 80007ea:	490c      	ldr	r1, [pc, #48]	; (800081c <analize_CAN_Rx+0x1b4>)
 80007ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80007f0:	e00a      	b.n	8000808 <analize_CAN_Rx+0x1a0>
			}
			else if (index==0x2620)		//controller temperature
 80007f2:	89bb      	ldrh	r3, [r7, #12]
 80007f4:	f242 6220 	movw	r2, #9760	; 0x2620
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d105      	bne.n	8000808 <analize_CAN_Rx+0x1a0>
			{
				info_motores[15+nodo]=info;
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	330f      	adds	r3, #15
 8000800:	69fa      	ldr	r2, [r7, #28]
 8000802:	4906      	ldr	r1, [pc, #24]	; (800081c <analize_CAN_Rx+0x1b4>)
 8000804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}
		}

	  return HAL_OK ;
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3724      	adds	r7, #36	; 0x24
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	b004      	add	sp, #16
 8000816:	4770      	bx	lr
 8000818:	200000b8 	.word	0x200000b8
 800081c:	20000050 	.word	0x20000050

08000820 <ask_for_info>:

/*La funcion envia el mensaje SDO para pedir data al nodo indicado*/
int ask_for_info(uint8_t node , uint8_t contador)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	460a      	mov	r2, r1
 800082a:	71fb      	strb	r3, [r7, #7]
 800082c:	4613      	mov	r3, r2
 800082e:	71bb      	strb	r3, [r7, #6]
	/*inicio la variable en cero, voy a pedir 9 datos*/
	uint8_t PIDO_INFO[8];
	/*primero command byte, luego index y subindex*/
	PIDO_INFO[0]=0x40;
 8000830:	2340      	movs	r3, #64	; 0x40
 8000832:	723b      	strb	r3, [r7, #8]
	if (contador==1)	//velocity actual value
 8000834:	79bb      	ldrb	r3, [r7, #6]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d104      	bne.n	8000844 <ask_for_info+0x24>
	{
				PIDO_INFO[1]=0x87;
 800083a:	2387      	movs	r3, #135	; 0x87
 800083c:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x20;
 800083e:	2320      	movs	r3, #32
 8000840:	72bb      	strb	r3, [r7, #10]
 8000842:	e04a      	b.n	80008da <ask_for_info+0xba>
	}
	else if (contador==2)	//DC Link Actual Voltage
 8000844:	79bb      	ldrb	r3, [r7, #6]
 8000846:	2b02      	cmp	r3, #2
 8000848:	d104      	bne.n	8000854 <ask_for_info+0x34>
	{
				PIDO_INFO[1]=0x79;
 800084a:	2379      	movs	r3, #121	; 0x79
 800084c:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x60;
 800084e:	2360      	movs	r3, #96	; 0x60
 8000850:	72bb      	strb	r3, [r7, #10]
 8000852:	e042      	b.n	80008da <ask_for_info+0xba>
	}
	else if (contador==3)	//Dc Current
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	2b03      	cmp	r3, #3
 8000858:	d104      	bne.n	8000864 <ask_for_info+0x44>
	{
				PIDO_INFO[1]=0x23;
 800085a:	2323      	movs	r3, #35	; 0x23
 800085c:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x20;
 800085e:	2320      	movs	r3, #32
 8000860:	72bb      	strb	r3, [r7, #10]
 8000862:	e03a      	b.n	80008da <ask_for_info+0xba>
	}
	else if (contador==4)	//Motor Temperature
 8000864:	79bb      	ldrb	r3, [r7, #6]
 8000866:	2b04      	cmp	r3, #4
 8000868:	d104      	bne.n	8000874 <ask_for_info+0x54>
	{
				PIDO_INFO[1]=0x25;
 800086a:	2325      	movs	r3, #37	; 0x25
 800086c:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x20;
 800086e:	2320      	movs	r3, #32
 8000870:	72bb      	strb	r3, [r7, #10]
 8000872:	e032      	b.n	80008da <ask_for_info+0xba>
	}
	else if (contador==5)	//Motor current actual value
 8000874:	79bb      	ldrb	r3, [r7, #6]
 8000876:	2b05      	cmp	r3, #5
 8000878:	d104      	bne.n	8000884 <ask_for_info+0x64>
	{
				PIDO_INFO[1]=0x78;
 800087a:	2378      	movs	r3, #120	; 0x78
 800087c:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x60;
 800087e:	2360      	movs	r3, #96	; 0x60
 8000880:	72bb      	strb	r3, [r7, #10]
 8000882:	e02a      	b.n	80008da <ask_for_info+0xba>
	}
	else if (contador==6)	//Torque Actual Value
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	2b06      	cmp	r3, #6
 8000888:	d104      	bne.n	8000894 <ask_for_info+0x74>
	{
				PIDO_INFO[1]=0x77;
 800088a:	2377      	movs	r3, #119	; 0x77
 800088c:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x60;
 800088e:	2360      	movs	r3, #96	; 0x60
 8000890:	72bb      	strb	r3, [r7, #10]
 8000892:	e022      	b.n	80008da <ask_for_info+0xba>
	}
	else if (contador==7)	//velocity actual value
 8000894:	79bb      	ldrb	r3, [r7, #6]
 8000896:	2b07      	cmp	r3, #7
 8000898:	d104      	bne.n	80008a4 <ask_for_info+0x84>
	{
				PIDO_INFO[1]=0x6C;
 800089a:	236c      	movs	r3, #108	; 0x6c
 800089c:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x60;
 800089e:	2360      	movs	r3, #96	; 0x60
 80008a0:	72bb      	strb	r3, [r7, #10]
 80008a2:	e01a      	b.n	80008da <ask_for_info+0xba>
	}
	else if (contador==8)	//velocity actual value AVG
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	2b08      	cmp	r3, #8
 80008a8:	d104      	bne.n	80008b4 <ask_for_info+0x94>
	{
				PIDO_INFO[1]=0x86;
 80008aa:	2386      	movs	r3, #134	; 0x86
 80008ac:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x20;
 80008ae:	2320      	movs	r3, #32
 80008b0:	72bb      	strb	r3, [r7, #10]
 80008b2:	e012      	b.n	80008da <ask_for_info+0xba>
	}
	else if (contador==9)	//controller temperature
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	2b09      	cmp	r3, #9
 80008b8:	d106      	bne.n	80008c8 <ask_for_info+0xa8>
	{
				PIDO_INFO[1]=0x26;
 80008ba:	2326      	movs	r3, #38	; 0x26
 80008bc:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x20;
 80008be:	2320      	movs	r3, #32
 80008c0:	72bb      	strb	r3, [r7, #10]
				PIDO_INFO[3]=0x01;
 80008c2:	2301      	movs	r3, #1
 80008c4:	72fb      	strb	r3, [r7, #11]
 80008c6:	e008      	b.n	80008da <ask_for_info+0xba>
	}
	else if (contador==10)	//controller temperature
 80008c8:	79bb      	ldrb	r3, [r7, #6]
 80008ca:	2b0a      	cmp	r3, #10
 80008cc:	d105      	bne.n	80008da <ask_for_info+0xba>
	{
				PIDO_INFO[1]=0x78;
 80008ce:	2378      	movs	r3, #120	; 0x78
 80008d0:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x60;
 80008d2:	2360      	movs	r3, #96	; 0x60
 80008d4:	72bb      	strb	r3, [r7, #10]
				PIDO_INFO[3]=0xC1;
 80008d6:	23c1      	movs	r3, #193	; 0xc1
 80008d8:	72fb      	strb	r3, [r7, #11]
	}

	if(can1_Tx(0x600+node,PIDO_INFO,8)!=HAL_OK)
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	f107 0108 	add.w	r1, r7, #8
 80008e8:	2208      	movs	r2, #8
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f80c 	bl	8000908 <can1_Tx>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d003      	beq.n	80008fe <ask_for_info+0xde>
			{
				Error_Handler();
 80008f6:	f005 fa0b 	bl	8005d10 <Error_Handler>
				return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e000      	b.n	8000900 <ask_for_info+0xe0>
			}
	return HAL_OK;
 80008fe:	2300      	movs	r3, #0
}
 8000900:	4618      	mov	r0, r3
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <can1_Tx>:

// mi driver para enviar info por can
// le doy el ID y el mensaje a enviar, y me devuelve un 1 si se envio correctamente, o un cero si tuvo algun error

int can1_Tx(uint16_t Id ,uint8_t mensaje [],uint8_t bytes)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	80fb      	strh	r3, [r7, #6]
 8000914:	4613      	mov	r3, r2
 8000916:	717b      	strb	r3, [r7, #5]

	  if(HAL_CAN_IsTxMessagePending(&hcan1, CAN_TX_MAILBOX0) == 0)
 8000918:	2101      	movs	r1, #1
 800091a:	4812      	ldr	r0, [pc, #72]	; (8000964 <can1_Tx+0x5c>)
 800091c:	f001 f8f9 	bl	8001b12 <HAL_CAN_IsTxMessagePending>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d118      	bne.n	8000958 <can1_Tx+0x50>
	  {
	  pHeader.DLC=bytes;
 8000926:	797b      	ldrb	r3, [r7, #5]
 8000928:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <can1_Tx+0x60>)
 800092a:	6113      	str	r3, [r2, #16]
	  pHeader.IDE=CAN_ID_STD;
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <can1_Tx+0x60>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
	  pHeader.RTR=CAN_RTR_DATA;
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <can1_Tx+0x60>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
	  pHeader.StdId=Id;
 8000938:	88fb      	ldrh	r3, [r7, #6]
 800093a:	4a0b      	ldr	r2, [pc, #44]	; (8000968 <can1_Tx+0x60>)
 800093c:	6013      	str	r3, [r2, #0]
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);

		  if(HAL_CAN_AddTxMessage(&hcan1, &pHeader, mensaje, &TxMailbox) != HAL_OK )
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <can1_Tx+0x64>)
 8000940:	683a      	ldr	r2, [r7, #0]
 8000942:	4909      	ldr	r1, [pc, #36]	; (8000968 <can1_Tx+0x60>)
 8000944:	4807      	ldr	r0, [pc, #28]	; (8000964 <can1_Tx+0x5c>)
 8000946:	f001 f809 	bl	800195c <HAL_CAN_AddTxMessage>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <can1_Tx+0x4c>
	  		{
	  				return HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	e002      	b.n	800095a <can1_Tx+0x52>
	  		}
		  return HAL_OK;
 8000954:	2300      	movs	r3, #0
 8000956:	e000      	b.n	800095a <can1_Tx+0x52>
	  }
	  return HAL_ERROR;
 8000958:	2301      	movs	r3, #1
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000330 	.word	0x20000330
 8000968:	200000bc 	.word	0x200000bc
 800096c:	20000098 	.word	0x20000098

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000974:	2003      	movs	r0, #3
 8000976:	f001 fd2b 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097a:	2000      	movs	r0, #0
 800097c:	f000 f806 	bl	800098c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000980:	f005 f9d2 	bl	8005d28 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_InitTick+0x54>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_InitTick+0x58>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 fd45 	bl	800243a <HAL_SYSTICK_Config>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e00e      	b.n	80009d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	d80a      	bhi.n	80009d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c0:	2200      	movs	r2, #0
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	f001 fd0d 	bl	80023e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009cc:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <HAL_InitTick+0x5c>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009d2:	2300      	movs	r3, #0
 80009d4:	e000      	b.n	80009d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20000004 	.word	0x20000004
 80009e8:	20000000 	.word	0x20000000

080009ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_IncTick+0x20>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_IncTick+0x24>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <HAL_IncTick+0x24>)
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000004 	.word	0x20000004
 8000a10:	200000d4 	.word	0x200000d4

08000a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return uwTick;
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <HAL_GetTick+0x14>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	200000d4 	.word	0x200000d4

08000a2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a34:	2300      	movs	r3, #0
 8000a36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d101      	bne.n	8000a42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e031      	b.n	8000aa6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d109      	bne.n	8000a5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f005 f990 	bl	8005d70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d116      	bne.n	8000a98 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_ADC_Init+0x84>)
 8000a70:	4013      	ands	r3, r2
 8000a72:	f043 0202 	orr.w	r2, r3, #2
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f000 fbbc 	bl	80011f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2200      	movs	r2, #0
 8000a84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f023 0303 	bic.w	r3, r3, #3
 8000a8e:	f043 0201 	orr.w	r2, r3, #1
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	641a      	str	r2, [r3, #64]	; 0x40
 8000a96:	e001      	b.n	8000a9c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	ffffeefd 	.word	0xffffeefd

08000ab4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2301      	moveq	r3, #1
 8000ad4:	2300      	movne	r3, #0
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f003 0320 	and.w	r3, r3, #32
 8000ae4:	2b20      	cmp	r3, #32
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d049      	beq.n	8000b8a <HAL_ADC_IRQHandler+0xd6>
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d046      	beq.n	8000b8a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f003 0310 	and.w	r3, r3, #16
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d105      	bne.n	8000b14 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d12b      	bne.n	8000b7a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d127      	bne.n	8000b7a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b30:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d006      	beq.n	8000b46 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d119      	bne.n	8000b7a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f022 0220 	bic.w	r2, r2, #32
 8000b54:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d105      	bne.n	8000b7a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	f043 0201 	orr.w	r2, r3, #1
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f000 f9ca 	bl	8000f14 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f06f 0212 	mvn.w	r2, #18
 8000b88:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	bf0c      	ite	eq
 8000b98:	2301      	moveq	r3, #1
 8000b9a:	2300      	movne	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000baa:	2b80      	cmp	r3, #128	; 0x80
 8000bac:	bf0c      	ite	eq
 8000bae:	2301      	moveq	r3, #1
 8000bb0:	2300      	movne	r3, #0
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d057      	beq.n	8000c6c <HAL_ADC_IRQHandler+0x1b8>
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d054      	beq.n	8000c6c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d105      	bne.n	8000bda <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d139      	bne.n	8000c5c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d006      	beq.n	8000c04 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d12b      	bne.n	8000c5c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d124      	bne.n	8000c5c <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d11d      	bne.n	8000c5c <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d119      	bne.n	8000c5c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d105      	bne.n	8000c5c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	f043 0201 	orr.w	r2, r3, #1
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 fc47 	bl	80014f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f06f 020c 	mvn.w	r2, #12
 8000c6a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	bf0c      	ite	eq
 8000c7a:	2301      	moveq	r3, #1
 8000c7c:	2300      	movne	r3, #0
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c8c:	2b40      	cmp	r3, #64	; 0x40
 8000c8e:	bf0c      	ite	eq
 8000c90:	2301      	moveq	r3, #1
 8000c92:	2300      	movne	r3, #0
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d017      	beq.n	8000cce <HAL_ADC_IRQHandler+0x21a>
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d014      	beq.n	8000cce <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d10d      	bne.n	8000cce <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f000 f93c 	bl	8000f3c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f06f 0201 	mvn.w	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f003 0320 	and.w	r3, r3, #32
 8000cd8:	2b20      	cmp	r3, #32
 8000cda:	bf0c      	ite	eq
 8000cdc:	2301      	moveq	r3, #1
 8000cde:	2300      	movne	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000cf2:	bf0c      	ite	eq
 8000cf4:	2301      	moveq	r3, #1
 8000cf6:	2300      	movne	r3, #0
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d015      	beq.n	8000d2e <HAL_ADC_IRQHandler+0x27a>
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d012      	beq.n	8000d2e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0c:	f043 0202 	orr.w	r2, r3, #2
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f06f 0220 	mvn.w	r2, #32
 8000d1c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 f916 	bl	8000f50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f06f 0220 	mvn.w	r2, #32
 8000d2c:	601a      	str	r2, [r3, #0]
  }
}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d101      	bne.n	8000d56 <HAL_ADC_Start_DMA+0x1e>
 8000d52:	2302      	movs	r3, #2
 8000d54:	e0c7      	b.n	8000ee6 <HAL_ADC_Start_DMA+0x1ae>
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d018      	beq.n	8000d9e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f042 0201 	orr.w	r2, r2, #1
 8000d7a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000d7c:	4b5c      	ldr	r3, [pc, #368]	; (8000ef0 <HAL_ADC_Start_DMA+0x1b8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a5c      	ldr	r2, [pc, #368]	; (8000ef4 <HAL_ADC_Start_DMA+0x1bc>)
 8000d82:	fba2 2303 	umull	r2, r3, r2, r3
 8000d86:	0c9a      	lsrs	r2, r3, #18
 8000d88:	4613      	mov	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4413      	add	r3, r2
 8000d8e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8000d90:	e002      	b.n	8000d98 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f9      	bne.n	8000d92 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	f040 809b 	bne.w	8000ee4 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db2:	4b51      	ldr	r3, [pc, #324]	; (8000ef8 <HAL_ADC_Start_DMA+0x1c0>)
 8000db4:	4013      	ands	r3, r2
 8000db6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d007      	beq.n	8000ddc <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000de8:	d106      	bne.n	8000df8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f023 0206 	bic.w	r2, r3, #6
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	645a      	str	r2, [r3, #68]	; 0x44
 8000df6:	e002      	b.n	8000dfe <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e0a:	4a3c      	ldr	r2, [pc, #240]	; (8000efc <HAL_ADC_Start_DMA+0x1c4>)
 8000e0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e12:	4a3b      	ldr	r2, [pc, #236]	; (8000f00 <HAL_ADC_Start_DMA+0x1c8>)
 8000e14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e1a:	4a3a      	ldr	r2, [pc, #232]	; (8000f04 <HAL_ADC_Start_DMA+0x1cc>)
 8000e1c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e26:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000e36:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e46:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	334c      	adds	r3, #76	; 0x4c
 8000e52:	4619      	mov	r1, r3
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f001 fbaa 	bl	80025b0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000e5c:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <HAL_ADC_Start_DMA+0x1d0>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 031f 	and.w	r3, r3, #31
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10f      	bne.n	8000e88 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d136      	bne.n	8000ee4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	e02d      	b.n	8000ee4 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a1f      	ldr	r2, [pc, #124]	; (8000f0c <HAL_ADC_Start_DMA+0x1d4>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d10e      	bne.n	8000eb0 <HAL_ADC_Start_DMA+0x178>
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d107      	bne.n	8000eb0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000eae:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_ADC_Start_DMA+0x1d0>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0310 	and.w	r3, r3, #16
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d113      	bne.n	8000ee4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a13      	ldr	r2, [pc, #76]	; (8000f10 <HAL_ADC_Start_DMA+0x1d8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d10e      	bne.n	8000ee4 <HAL_ADC_Start_DMA+0x1ac>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d107      	bne.n	8000ee4 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ee2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	431bde83 	.word	0x431bde83
 8000ef8:	fffff8fe 	.word	0xfffff8fe
 8000efc:	080013ed 	.word	0x080013ed
 8000f00:	080014a7 	.word	0x080014a7
 8000f04:	080014c3 	.word	0x080014c3
 8000f08:	40012300 	.word	0x40012300
 8000f0c:	40012000 	.word	0x40012000
 8000f10:	40012200 	.word	0x40012200

08000f14 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d101      	bne.n	8000f80 <HAL_ADC_ConfigChannel+0x1c>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e12a      	b.n	80011d6 <HAL_ADC_ConfigChannel+0x272>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b09      	cmp	r3, #9
 8000f8e:	d93a      	bls.n	8001006 <HAL_ADC_ConfigChannel+0xa2>
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f98:	d035      	beq.n	8001006 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68d9      	ldr	r1, [r3, #12]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	3b1e      	subs	r3, #30
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	400a      	ands	r2, r1
 8000fbe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a87      	ldr	r2, [pc, #540]	; (80011e4 <HAL_ADC_ConfigChannel+0x280>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d10a      	bne.n	8000fe0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68d9      	ldr	r1, [r3, #12]
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	061a      	lsls	r2, r3, #24
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fde:	e035      	b.n	800104c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68d9      	ldr	r1, [r3, #12]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4403      	add	r3, r0
 8000ff8:	3b1e      	subs	r3, #30
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	430a      	orrs	r2, r1
 8001002:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001004:	e022      	b.n	800104c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6919      	ldr	r1, [r3, #16]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	b29b      	uxth	r3, r3
 8001012:	461a      	mov	r2, r3
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	2207      	movs	r2, #7
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43da      	mvns	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	400a      	ands	r2, r1
 8001028:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6919      	ldr	r1, [r3, #16]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	b29b      	uxth	r3, r3
 800103a:	4618      	mov	r0, r3
 800103c:	4603      	mov	r3, r0
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4403      	add	r3, r0
 8001042:	409a      	lsls	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	430a      	orrs	r2, r1
 800104a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b06      	cmp	r3, #6
 8001052:	d824      	bhi.n	800109e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	3b05      	subs	r3, #5
 8001066:	221f      	movs	r2, #31
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43da      	mvns	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	400a      	ands	r2, r1
 8001074:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	b29b      	uxth	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	3b05      	subs	r3, #5
 8001090:	fa00 f203 	lsl.w	r2, r0, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	430a      	orrs	r2, r1
 800109a:	635a      	str	r2, [r3, #52]	; 0x34
 800109c:	e04c      	b.n	8001138 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b0c      	cmp	r3, #12
 80010a4:	d824      	bhi.n	80010f0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	3b23      	subs	r3, #35	; 0x23
 80010b8:	221f      	movs	r2, #31
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	400a      	ands	r2, r1
 80010c6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4618      	mov	r0, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	3b23      	subs	r3, #35	; 0x23
 80010e2:	fa00 f203 	lsl.w	r2, r0, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	631a      	str	r2, [r3, #48]	; 0x30
 80010ee:	e023      	b.n	8001138 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	3b41      	subs	r3, #65	; 0x41
 8001102:	221f      	movs	r2, #31
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43da      	mvns	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	400a      	ands	r2, r1
 8001110:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	b29b      	uxth	r3, r3
 800111e:	4618      	mov	r0, r3
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	3b41      	subs	r3, #65	; 0x41
 800112c:	fa00 f203 	lsl.w	r2, r0, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	430a      	orrs	r2, r1
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a2a      	ldr	r2, [pc, #168]	; (80011e8 <HAL_ADC_ConfigChannel+0x284>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10a      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x1f4>
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800114a:	d105      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <HAL_ADC_ConfigChannel+0x288>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	4a26      	ldr	r2, [pc, #152]	; (80011ec <HAL_ADC_ConfigChannel+0x288>)
 8001152:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001156:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a22      	ldr	r2, [pc, #136]	; (80011e8 <HAL_ADC_ConfigChannel+0x284>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d109      	bne.n	8001176 <HAL_ADC_ConfigChannel+0x212>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b12      	cmp	r3, #18
 8001168:	d105      	bne.n	8001176 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <HAL_ADC_ConfigChannel+0x288>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	4a1f      	ldr	r2, [pc, #124]	; (80011ec <HAL_ADC_ConfigChannel+0x288>)
 8001170:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001174:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <HAL_ADC_ConfigChannel+0x284>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d125      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x268>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <HAL_ADC_ConfigChannel+0x280>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d003      	beq.n	8001192 <HAL_ADC_ConfigChannel+0x22e>
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b11      	cmp	r3, #17
 8001190:	d11c      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <HAL_ADC_ConfigChannel+0x288>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4a15      	ldr	r2, [pc, #84]	; (80011ec <HAL_ADC_ConfigChannel+0x288>)
 8001198:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800119c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <HAL_ADC_ConfigChannel+0x280>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d111      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <HAL_ADC_ConfigChannel+0x28c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a11      	ldr	r2, [pc, #68]	; (80011f4 <HAL_ADC_ConfigChannel+0x290>)
 80011ae:	fba2 2303 	umull	r2, r3, r2, r3
 80011b2:	0c9a      	lsrs	r2, r3, #18
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80011be:	e002      	b.n	80011c6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1f9      	bne.n	80011c0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	10000012 	.word	0x10000012
 80011e8:	40012000 	.word	0x40012000
 80011ec:	40012300 	.word	0x40012300
 80011f0:	20000008 	.word	0x20000008
 80011f4:	431bde83 	.word	0x431bde83

080011f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001200:	4b78      	ldr	r3, [pc, #480]	; (80013e4 <ADC_Init+0x1ec>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	4a77      	ldr	r2, [pc, #476]	; (80013e4 <ADC_Init+0x1ec>)
 8001206:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800120a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800120c:	4b75      	ldr	r3, [pc, #468]	; (80013e4 <ADC_Init+0x1ec>)
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	4973      	ldr	r1, [pc, #460]	; (80013e4 <ADC_Init+0x1ec>)
 8001216:	4313      	orrs	r3, r2
 8001218:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001228:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6859      	ldr	r1, [r3, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	021a      	lsls	r2, r3, #8
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800124c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6859      	ldr	r1, [r3, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800126e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6899      	ldr	r1, [r3, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001286:	4a58      	ldr	r2, [pc, #352]	; (80013e8 <ADC_Init+0x1f0>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d022      	beq.n	80012d2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800129a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6899      	ldr	r1, [r3, #8]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6899      	ldr	r1, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	e00f      	b.n	80012f2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0202 	bic.w	r2, r2, #2
 8001300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6899      	ldr	r1, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	005a      	lsls	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3020 	ldrb.w	r3, [r3, #32]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d01b      	beq.n	8001358 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800132e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800133e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6859      	ldr	r1, [r3, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	3b01      	subs	r3, #1
 800134c:	035a      	lsls	r2, r3, #13
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	e007      	b.n	8001368 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001366:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	3b01      	subs	r3, #1
 8001384:	051a      	lsls	r2, r3, #20
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800139c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6899      	ldr	r1, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013aa:	025a      	lsls	r2, r3, #9
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6899      	ldr	r1, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	029a      	lsls	r2, r3, #10
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	609a      	str	r2, [r3, #8]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	40012300 	.word	0x40012300
 80013e8:	0f000001 	.word	0x0f000001

080013ec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001402:	2b00      	cmp	r3, #0
 8001404:	d13c      	bne.n	8001480 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d12b      	bne.n	8001478 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001424:	2b00      	cmp	r3, #0
 8001426:	d127      	bne.n	8001478 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001432:	2b00      	cmp	r3, #0
 8001434:	d006      	beq.n	8001444 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001440:	2b00      	cmp	r3, #0
 8001442:	d119      	bne.n	8001478 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0220 	bic.w	r2, r2, #32
 8001452:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d105      	bne.n	8001478 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	f043 0201 	orr.w	r2, r3, #1
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f7ff fd4b 	bl	8000f14 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800147e:	e00e      	b.n	800149e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f003 0310 	and.w	r3, r3, #16
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f7ff fd5f 	bl	8000f50 <HAL_ADC_ErrorCallback>
}
 8001492:	e004      	b.n	800149e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	4798      	blx	r3
}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b084      	sub	sp, #16
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f7ff fd37 	bl	8000f28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b084      	sub	sp, #16
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ce:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2240      	movs	r2, #64	; 0x40
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f043 0204 	orr.w	r2, r3, #4
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f7ff fd34 	bl	8000f50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e0ed      	b.n	80016f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3020 	ldrb.w	r3, [r3, #32]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f004 fcba 	bl	8005e9c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0202 	bic.w	r2, r2, #2
 8001536:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001538:	f7ff fa6c 	bl	8000a14 <HAL_GetTick>
 800153c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800153e:	e012      	b.n	8001566 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001540:	f7ff fa68 	bl	8000a14 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b0a      	cmp	r3, #10
 800154c:	d90b      	bls.n	8001566 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2205      	movs	r2, #5
 800155e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e0c5      	b.n	80016f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1e5      	bne.n	8001540 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0201 	orr.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001584:	f7ff fa46 	bl	8000a14 <HAL_GetTick>
 8001588:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800158a:	e012      	b.n	80015b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800158c:	f7ff fa42 	bl	8000a14 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b0a      	cmp	r3, #10
 8001598:	d90b      	bls.n	80015b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2205      	movs	r2, #5
 80015aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e09f      	b.n	80016f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0e5      	beq.n	800158c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7e1b      	ldrb	r3, [r3, #24]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d108      	bne.n	80015da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	e007      	b.n	80015ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7e5b      	ldrb	r3, [r3, #25]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d108      	bne.n	8001604 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	e007      	b.n	8001614 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001612:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7e9b      	ldrb	r3, [r3, #26]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d108      	bne.n	800162e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0220 	orr.w	r2, r2, #32
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	e007      	b.n	800163e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0220 	bic.w	r2, r2, #32
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7edb      	ldrb	r3, [r3, #27]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d108      	bne.n	8001658 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0210 	bic.w	r2, r2, #16
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	e007      	b.n	8001668 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0210 	orr.w	r2, r2, #16
 8001666:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	7f1b      	ldrb	r3, [r3, #28]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d108      	bne.n	8001682 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0208 	orr.w	r2, r2, #8
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e007      	b.n	8001692 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0208 	bic.w	r2, r2, #8
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7f5b      	ldrb	r3, [r3, #29]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d108      	bne.n	80016ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0204 	orr.w	r2, r2, #4
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	e007      	b.n	80016bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0204 	bic.w	r2, r2, #4
 80016ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	ea42 0103 	orr.w	r1, r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	1e5a      	subs	r2, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001712:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001714:	7cfb      	ldrb	r3, [r7, #19]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d003      	beq.n	8001722 <HAL_CAN_ConfigFilter+0x26>
 800171a:	7cfb      	ldrb	r3, [r7, #19]
 800171c:	2b02      	cmp	r3, #2
 800171e:	f040 80c7 	bne.w	80018b0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a69      	ldr	r2, [pc, #420]	; (80018cc <HAL_CAN_ConfigFilter+0x1d0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d001      	beq.n	8001730 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800172c:	4b68      	ldr	r3, [pc, #416]	; (80018d0 <HAL_CAN_ConfigFilter+0x1d4>)
 800172e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001736:	f043 0201 	orr.w	r2, r3, #1
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	4a63      	ldr	r2, [pc, #396]	; (80018d0 <HAL_CAN_ConfigFilter+0x1d4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d111      	bne.n	800176c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800174e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	431a      	orrs	r2, r3
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	2201      	movs	r2, #1
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43db      	mvns	r3, r3
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d123      	bne.n	80017de <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	43db      	mvns	r3, r3
 80017a0:	401a      	ands	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017b8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3248      	adds	r2, #72	; 0x48
 80017be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017d4:	6979      	ldr	r1, [r7, #20]
 80017d6:	3348      	adds	r3, #72	; 0x48
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	440b      	add	r3, r1
 80017dc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d122      	bne.n	800182c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	431a      	orrs	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001806:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3248      	adds	r2, #72	; 0x48
 800180c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001820:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001822:	6979      	ldr	r1, [r7, #20]
 8001824:	3348      	adds	r3, #72	; 0x48
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	440b      	add	r3, r1
 800182a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d109      	bne.n	8001848 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	43db      	mvns	r3, r3
 800183e:	401a      	ands	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001846:	e007      	b.n	8001858 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	431a      	orrs	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	43db      	mvns	r3, r3
 800186a:	401a      	ands	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001872:	e007      	b.n	8001884 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	431a      	orrs	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d107      	bne.n	800189c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	431a      	orrs	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018a2:	f023 0201 	bic.w	r2, r3, #1
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e006      	b.n	80018be <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
  }
}
 80018be:	4618      	mov	r0, r3
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40003400 	.word	0x40003400
 80018d0:	40006400 	.word	0x40006400

080018d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d12e      	bne.n	8001946 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0201 	bic.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001900:	f7ff f888 	bl	8000a14 <HAL_GetTick>
 8001904:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001906:	e012      	b.n	800192e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001908:	f7ff f884 	bl	8000a14 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b0a      	cmp	r3, #10
 8001914:	d90b      	bls.n	800192e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2205      	movs	r2, #5
 8001926:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e012      	b.n	8001954 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1e5      	bne.n	8001908 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e006      	b.n	8001954 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
  }
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001970:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800197a:	7ffb      	ldrb	r3, [r7, #31]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d003      	beq.n	8001988 <HAL_CAN_AddTxMessage+0x2c>
 8001980:	7ffb      	ldrb	r3, [r7, #31]
 8001982:	2b02      	cmp	r3, #2
 8001984:	f040 80b8 	bne.w	8001af8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10a      	bne.n	80019a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001998:	2b00      	cmp	r3, #0
 800199a:	d105      	bne.n	80019a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 80a0 	beq.w	8001ae8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	0e1b      	lsrs	r3, r3, #24
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d907      	bls.n	80019c8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e09e      	b.n	8001b06 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80019c8:	2201      	movs	r2, #1
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	409a      	lsls	r2, r3
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10d      	bne.n	80019f6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019e4:	68f9      	ldr	r1, [r7, #12]
 80019e6:	6809      	ldr	r1, [r1, #0]
 80019e8:	431a      	orrs	r2, r3
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3318      	adds	r3, #24
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	440b      	add	r3, r1
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e00f      	b.n	8001a16 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a00:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a06:	68f9      	ldr	r1, [r7, #12]
 8001a08:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a0a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3318      	adds	r3, #24
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	440b      	add	r3, r1
 8001a14:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6819      	ldr	r1, [r3, #0]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	691a      	ldr	r2, [r3, #16]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	3318      	adds	r3, #24
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	440b      	add	r3, r1
 8001a26:	3304      	adds	r3, #4
 8001a28:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	7d1b      	ldrb	r3, [r3, #20]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d111      	bne.n	8001a56 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	3318      	adds	r3, #24
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3304      	adds	r3, #4
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	6811      	ldr	r1, [r2, #0]
 8001a46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3318      	adds	r3, #24
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	440b      	add	r3, r1
 8001a52:	3304      	adds	r3, #4
 8001a54:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3307      	adds	r3, #7
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	061a      	lsls	r2, r3, #24
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3306      	adds	r3, #6
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	041b      	lsls	r3, r3, #16
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3305      	adds	r3, #5
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	4313      	orrs	r3, r2
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	3204      	adds	r2, #4
 8001a76:	7812      	ldrb	r2, [r2, #0]
 8001a78:	4610      	mov	r0, r2
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	6811      	ldr	r1, [r2, #0]
 8001a7e:	ea43 0200 	orr.w	r2, r3, r0
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	440b      	add	r3, r1
 8001a88:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a8c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3303      	adds	r3, #3
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	061a      	lsls	r2, r3, #24
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3302      	adds	r3, #2
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	041b      	lsls	r3, r3, #16
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	7812      	ldrb	r2, [r2, #0]
 8001aae:	4610      	mov	r0, r2
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	6811      	ldr	r1, [r2, #0]
 8001ab4:	ea43 0200 	orr.w	r2, r3, r0
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	440b      	add	r3, r1
 8001abe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ac2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3318      	adds	r3, #24
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	4413      	add	r3, r2
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	6811      	ldr	r1, [r2, #0]
 8001ad6:	f043 0201 	orr.w	r2, r3, #1
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3318      	adds	r3, #24
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	440b      	add	r3, r1
 8001ae2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e00e      	b.n	8001b06 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e006      	b.n	8001b06 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
  }
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3724      	adds	r7, #36	; 0x24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b085      	sub	sp, #20
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b26:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b28:	7afb      	ldrb	r3, [r7, #11]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d002      	beq.n	8001b34 <HAL_CAN_IsTxMessagePending+0x22>
 8001b2e:	7afb      	ldrb	r3, [r7, #11]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d10b      	bne.n	8001b4c <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	069b      	lsls	r3, r3, #26
 8001b3e:	401a      	ands	r2, r3
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	069b      	lsls	r3, r3, #26
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b087      	sub	sp, #28
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b70:	7dfb      	ldrb	r3, [r7, #23]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d003      	beq.n	8001b7e <HAL_CAN_GetRxMessage+0x24>
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	f040 80f3 	bne.w	8001d64 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10e      	bne.n	8001ba2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d116      	bne.n	8001bc0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e0e7      	b.n	8001d72 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d107      	bne.n	8001bc0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0d8      	b.n	8001d72 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	331b      	adds	r3, #27
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	4413      	add	r3, r2
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0204 	and.w	r2, r3, #4
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	331b      	adds	r3, #27
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	4413      	add	r3, r2
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0d5b      	lsrs	r3, r3, #21
 8001bee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	e00b      	b.n	8001c10 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	331b      	adds	r3, #27
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	4413      	add	r3, r2
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	08db      	lsrs	r3, r3, #3
 8001c08:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	331b      	adds	r3, #27
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	4413      	add	r3, r2
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0202 	and.w	r2, r3, #2
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	331b      	adds	r3, #27
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	4413      	add	r3, r2
 8001c32:	3304      	adds	r3, #4
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 020f 	and.w	r2, r3, #15
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	331b      	adds	r3, #27
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	4413      	add	r3, r2
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	331b      	adds	r3, #27
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	4413      	add	r3, r2
 8001c62:	3304      	adds	r3, #4
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	0c1b      	lsrs	r3, r3, #16
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	0a1a      	lsrs	r2, r3, #8
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	0c1a      	lsrs	r2, r3, #16
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0e1a      	lsrs	r2, r3, #24
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	3303      	adds	r3, #3
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	0a1a      	lsrs	r2, r3, #8
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	3305      	adds	r3, #5
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	0c1a      	lsrs	r2, r3, #16
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	3306      	adds	r3, #6
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	0e1a      	lsrs	r2, r3, #24
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	3307      	adds	r3, #7
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d108      	bne.n	8001d50 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0220 	orr.w	r2, r2, #32
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	e007      	b.n	8001d60 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691a      	ldr	r2, [r3, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0220 	orr.w	r2, r2, #32
 8001d5e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	e006      	b.n	8001d72 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
  }
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	371c      	adds	r7, #28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b085      	sub	sp, #20
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d8e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d002      	beq.n	8001d9c <HAL_CAN_ActivateNotification+0x1e>
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d109      	bne.n	8001db0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6959      	ldr	r1, [r3, #20]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	e006      	b.n	8001dbe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
  }
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b08a      	sub	sp, #40	; 0x28
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d07c      	beq.n	8001f0a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d023      	beq.n	8001e62 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f97d 	bl	800212c <HAL_CAN_TxMailbox0CompleteCallback>
 8001e32:	e016      	b.n	8001e62 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d004      	beq.n	8001e48 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
 8001e46:	e00c      	b.n	8001e62 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d004      	beq.n	8001e5c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5a:	e002      	b.n	8001e62 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f983 	bl	8002168 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d024      	beq.n	8001eb6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e74:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f95d 	bl	8002140 <HAL_CAN_TxMailbox1CompleteCallback>
 8001e86:	e016      	b.n	8001eb6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d004      	beq.n	8001e9c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9a:	e00c      	b.n	8001eb6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d004      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
 8001eae:	e002      	b.n	8001eb6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f963 	bl	800217c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d024      	beq.n	8001f0a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ec8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f93d 	bl	8002154 <HAL_CAN_TxMailbox2CompleteCallback>
 8001eda:	e016      	b.n	8001f0a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d004      	beq.n	8001ef0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
 8001eee:	e00c      	b.n	8001f0a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d004      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
 8001f02:	e002      	b.n	8001f0a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f943 	bl	8002190 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00c      	beq.n	8001f2e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d007      	beq.n	8001f2e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00b      	beq.n	8001f50 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2208      	movs	r2, #8
 8001f48:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f934 	bl	80021b8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f91b 	bl	80021a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00c      	beq.n	8001f92 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d007      	beq.n	8001f92 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2210      	movs	r2, #16
 8001f90:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00b      	beq.n	8001fb4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d006      	beq.n	8001fb4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2208      	movs	r2, #8
 8001fac:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f916 	bl	80021e0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f8fd 	bl	80021cc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00b      	beq.n	8001ff4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2210      	movs	r2, #16
 8001fec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f900 	bl	80021f4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d006      	beq.n	8002016 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2208      	movs	r2, #8
 800200e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f8f9 	bl	8002208 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d075      	beq.n	800210c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	2b00      	cmp	r3, #0
 8002028:	d06c      	beq.n	8002104 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002068:	2b00      	cmp	r3, #0
 800206a:	d008      	beq.n	800207e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	f043 0304 	orr.w	r3, r3, #4
 800207c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002084:	2b00      	cmp	r3, #0
 8002086:	d03d      	beq.n	8002104 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800208e:	2b00      	cmp	r3, #0
 8002090:	d038      	beq.n	8002104 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002098:	2b30      	cmp	r3, #48	; 0x30
 800209a:	d017      	beq.n	80020cc <HAL_CAN_IRQHandler+0x302>
 800209c:	2b30      	cmp	r3, #48	; 0x30
 800209e:	d804      	bhi.n	80020aa <HAL_CAN_IRQHandler+0x2e0>
 80020a0:	2b10      	cmp	r3, #16
 80020a2:	d009      	beq.n	80020b8 <HAL_CAN_IRQHandler+0x2ee>
 80020a4:	2b20      	cmp	r3, #32
 80020a6:	d00c      	beq.n	80020c2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80020a8:	e024      	b.n	80020f4 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80020aa:	2b50      	cmp	r3, #80	; 0x50
 80020ac:	d018      	beq.n	80020e0 <HAL_CAN_IRQHandler+0x316>
 80020ae:	2b60      	cmp	r3, #96	; 0x60
 80020b0:	d01b      	beq.n	80020ea <HAL_CAN_IRQHandler+0x320>
 80020b2:	2b40      	cmp	r3, #64	; 0x40
 80020b4:	d00f      	beq.n	80020d6 <HAL_CAN_IRQHandler+0x30c>
            break;
 80020b6:	e01d      	b.n	80020f4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	f043 0308 	orr.w	r3, r3, #8
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020c0:	e018      	b.n	80020f4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	f043 0310 	orr.w	r3, r3, #16
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020ca:	e013      	b.n	80020f4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	f043 0320 	orr.w	r3, r3, #32
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020d4:	e00e      	b.n	80020f4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020de:	e009      	b.n	80020f4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020e8:	e004      	b.n	80020f4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80020f2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699a      	ldr	r2, [r3, #24]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002102:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2204      	movs	r2, #4
 800210a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	2b00      	cmp	r3, #0
 8002110:	d008      	beq.n	8002124 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f87c 	bl	800221c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002124:	bf00      	nop
 8002126:	3728      	adds	r7, #40	; 0x28
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <__NVIC_SetPriorityGrouping+0x40>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800224c:	4013      	ands	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 800225a:	4313      	orrs	r3, r2
 800225c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225e:	4a04      	ldr	r2, [pc, #16]	; (8002270 <__NVIC_SetPriorityGrouping+0x40>)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	60d3      	str	r3, [r2, #12]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00
 8002274:	05fa0000 	.word	0x05fa0000

08002278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <__NVIC_GetPriorityGrouping+0x18>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	f003 0307 	and.w	r3, r3, #7
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	db0b      	blt.n	80022be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	4907      	ldr	r1, [pc, #28]	; (80022cc <__NVIC_EnableIRQ+0x38>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	2001      	movs	r0, #1
 80022b6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000e100 	.word	0xe000e100

080022d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	db0a      	blt.n	80022fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	490c      	ldr	r1, [pc, #48]	; (800231c <__NVIC_SetPriority+0x4c>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	440b      	add	r3, r1
 80022f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f8:	e00a      	b.n	8002310 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4908      	ldr	r1, [pc, #32]	; (8002320 <__NVIC_SetPriority+0x50>)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	3b04      	subs	r3, #4
 8002308:	0112      	lsls	r2, r2, #4
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	440b      	add	r3, r1
 800230e:	761a      	strb	r2, [r3, #24]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000e100 	.word	0xe000e100
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f1c3 0307 	rsb	r3, r3, #7
 800233e:	2b04      	cmp	r3, #4
 8002340:	bf28      	it	cs
 8002342:	2304      	movcs	r3, #4
 8002344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3304      	adds	r3, #4
 800234a:	2b06      	cmp	r3, #6
 800234c:	d902      	bls.n	8002354 <NVIC_EncodePriority+0x30>
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3b03      	subs	r3, #3
 8002352:	e000      	b.n	8002356 <NVIC_EncodePriority+0x32>
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	f04f 32ff 	mov.w	r2, #4294967295
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43da      	mvns	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	401a      	ands	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800236c:	f04f 31ff 	mov.w	r1, #4294967295
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43d9      	mvns	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	4313      	orrs	r3, r2
         );
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800239c:	d301      	bcc.n	80023a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239e:	2301      	movs	r3, #1
 80023a0:	e00f      	b.n	80023c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a2:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <SysTick_Config+0x40>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023aa:	210f      	movs	r1, #15
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	f7ff ff8e 	bl	80022d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <SysTick_Config+0x40>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <SysTick_Config+0x40>)
 80023bc:	2207      	movs	r2, #7
 80023be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000e010 	.word	0xe000e010

080023d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff29 	bl	8002230 <__NVIC_SetPriorityGrouping>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f8:	f7ff ff3e 	bl	8002278 <__NVIC_GetPriorityGrouping>
 80023fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f7ff ff8e 	bl	8002324 <NVIC_EncodePriority>
 8002408:	4602      	mov	r2, r0
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff5d 	bl	80022d0 <__NVIC_SetPriority>
}
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff31 	bl	8002294 <__NVIC_EnableIRQ>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ffa2 	bl	800238c <SysTick_Config>
 8002448:	4603      	mov	r3, r0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002460:	f7fe fad8 	bl	8000a14 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e099      	b.n	80025a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002490:	e00f      	b.n	80024b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002492:	f7fe fabf 	bl	8000a14 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b05      	cmp	r3, #5
 800249e:	d908      	bls.n	80024b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2220      	movs	r2, #32
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2203      	movs	r2, #3
 80024aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e078      	b.n	80025a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1e8      	bne.n	8002492 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	4b38      	ldr	r3, [pc, #224]	; (80025ac <HAL_DMA_Init+0x158>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	2b04      	cmp	r3, #4
 800250a:	d107      	bne.n	800251c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	4313      	orrs	r3, r2
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4313      	orrs	r3, r2
 800251a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f023 0307 	bic.w	r3, r3, #7
 8002532:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	4313      	orrs	r3, r2
 800253c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	2b04      	cmp	r3, #4
 8002544:	d117      	bne.n	8002576 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4313      	orrs	r3, r2
 800254e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00e      	beq.n	8002576 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 fa77 	bl	8002a4c <DMA_CheckFifoParam>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2240      	movs	r2, #64	; 0x40
 8002568:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002572:	2301      	movs	r3, #1
 8002574:	e016      	b.n	80025a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 fa2e 	bl	80029e0 <DMA_CalcBaseAndBitshift>
 8002584:	4603      	mov	r3, r0
 8002586:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258c:	223f      	movs	r2, #63	; 0x3f
 800258e:	409a      	lsls	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	e010803f 	.word	0xe010803f

080025b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_DMA_Start_IT+0x26>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e048      	b.n	8002668 <HAL_DMA_Start_IT+0xb8>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d137      	bne.n	800265a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2202      	movs	r2, #2
 80025ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 f9c0 	bl	8002984 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002608:	223f      	movs	r2, #63	; 0x3f
 800260a:	409a      	lsls	r2, r3
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0216 	orr.w	r2, r2, #22
 800261e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695a      	ldr	r2, [r3, #20]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800262e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	2b00      	cmp	r3, #0
 8002636:	d007      	beq.n	8002648 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0208 	orr.w	r2, r2, #8
 8002646:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	e005      	b.n	8002666 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002662:	2302      	movs	r3, #2
 8002664:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002666:	7dfb      	ldrb	r3, [r7, #23]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800267c:	4b92      	ldr	r3, [pc, #584]	; (80028c8 <HAL_DMA_IRQHandler+0x258>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a92      	ldr	r2, [pc, #584]	; (80028cc <HAL_DMA_IRQHandler+0x25c>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	0a9b      	lsrs	r3, r3, #10
 8002688:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269a:	2208      	movs	r2, #8
 800269c:	409a      	lsls	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d01a      	beq.n	80026dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d013      	beq.n	80026dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0204 	bic.w	r2, r2, #4
 80026c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c8:	2208      	movs	r2, #8
 80026ca:	409a      	lsls	r2, r3
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	f043 0201 	orr.w	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e0:	2201      	movs	r2, #1
 80026e2:	409a      	lsls	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d012      	beq.n	8002712 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00b      	beq.n	8002712 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	2201      	movs	r2, #1
 8002700:	409a      	lsls	r2, r3
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270a:	f043 0202 	orr.w	r2, r3, #2
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002716:	2204      	movs	r2, #4
 8002718:	409a      	lsls	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d012      	beq.n	8002748 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00b      	beq.n	8002748 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002734:	2204      	movs	r2, #4
 8002736:	409a      	lsls	r2, r3
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002740:	f043 0204 	orr.w	r2, r3, #4
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274c:	2210      	movs	r2, #16
 800274e:	409a      	lsls	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d043      	beq.n	80027e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d03c      	beq.n	80027e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276a:	2210      	movs	r2, #16
 800276c:	409a      	lsls	r2, r3
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d018      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d108      	bne.n	80027a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	d024      	beq.n	80027e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	4798      	blx	r3
 800279e:	e01f      	b.n	80027e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d01b      	beq.n	80027e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	4798      	blx	r3
 80027b0:	e016      	b.n	80027e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d107      	bne.n	80027d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0208 	bic.w	r2, r2, #8
 80027ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e4:	2220      	movs	r2, #32
 80027e6:	409a      	lsls	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 808e 	beq.w	800290e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 8086 	beq.w	800290e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002806:	2220      	movs	r2, #32
 8002808:	409a      	lsls	r2, r3
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b05      	cmp	r3, #5
 8002818:	d136      	bne.n	8002888 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0216 	bic.w	r2, r2, #22
 8002828:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002838:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d103      	bne.n	800284a <HAL_DMA_IRQHandler+0x1da>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002846:	2b00      	cmp	r3, #0
 8002848:	d007      	beq.n	800285a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0208 	bic.w	r2, r2, #8
 8002858:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285e:	223f      	movs	r2, #63	; 0x3f
 8002860:	409a      	lsls	r2, r3
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287a:	2b00      	cmp	r3, #0
 800287c:	d07d      	beq.n	800297a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	4798      	blx	r3
        }
        return;
 8002886:	e078      	b.n	800297a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01c      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d108      	bne.n	80028b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d030      	beq.n	800290e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	4798      	blx	r3
 80028b4:	e02b      	b.n	800290e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d027      	beq.n	800290e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	4798      	blx	r3
 80028c6:	e022      	b.n	800290e <HAL_DMA_IRQHandler+0x29e>
 80028c8:	20000008 	.word	0x20000008
 80028cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10f      	bne.n	80028fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0210 	bic.w	r2, r2, #16
 80028ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	2b00      	cmp	r3, #0
 8002914:	d032      	beq.n	800297c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d022      	beq.n	8002968 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2205      	movs	r2, #5
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0201 	bic.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	3301      	adds	r3, #1
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	429a      	cmp	r2, r3
 8002944:	d307      	bcc.n	8002956 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f2      	bne.n	800293a <HAL_DMA_IRQHandler+0x2ca>
 8002954:	e000      	b.n	8002958 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002956:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4798      	blx	r3
 8002978:	e000      	b.n	800297c <HAL_DMA_IRQHandler+0x30c>
        return;
 800297a:	bf00      	nop
    }
  }
}
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop

08002984 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b40      	cmp	r3, #64	; 0x40
 80029b0:	d108      	bne.n	80029c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029c2:	e007      	b.n	80029d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	60da      	str	r2, [r3, #12]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	3b10      	subs	r3, #16
 80029f0:	4a13      	ldr	r2, [pc, #76]	; (8002a40 <DMA_CalcBaseAndBitshift+0x60>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029fa:	4a12      	ldr	r2, [pc, #72]	; (8002a44 <DMA_CalcBaseAndBitshift+0x64>)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4413      	add	r3, r2
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d908      	bls.n	8002a20 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <DMA_CalcBaseAndBitshift+0x68>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	1d1a      	adds	r2, r3, #4
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	659a      	str	r2, [r3, #88]	; 0x58
 8002a1e:	e006      	b.n	8002a2e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <DMA_CalcBaseAndBitshift+0x68>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	aaaaaaab 	.word	0xaaaaaaab
 8002a44:	08006354 	.word	0x08006354
 8002a48:	fffffc00 	.word	0xfffffc00

08002a4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d11f      	bne.n	8002aa6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d855      	bhi.n	8002b18 <DMA_CheckFifoParam+0xcc>
 8002a6c:	a201      	add	r2, pc, #4	; (adr r2, 8002a74 <DMA_CheckFifoParam+0x28>)
 8002a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a72:	bf00      	nop
 8002a74:	08002a85 	.word	0x08002a85
 8002a78:	08002a97 	.word	0x08002a97
 8002a7c:	08002a85 	.word	0x08002a85
 8002a80:	08002b19 	.word	0x08002b19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d045      	beq.n	8002b1c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a94:	e042      	b.n	8002b1c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a9e:	d13f      	bne.n	8002b20 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa4:	e03c      	b.n	8002b20 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aae:	d121      	bne.n	8002af4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d836      	bhi.n	8002b24 <DMA_CheckFifoParam+0xd8>
 8002ab6:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <DMA_CheckFifoParam+0x70>)
 8002ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abc:	08002acd 	.word	0x08002acd
 8002ac0:	08002ad3 	.word	0x08002ad3
 8002ac4:	08002acd 	.word	0x08002acd
 8002ac8:	08002ae5 	.word	0x08002ae5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad0:	e02f      	b.n	8002b32 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d024      	beq.n	8002b28 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae2:	e021      	b.n	8002b28 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aec:	d11e      	bne.n	8002b2c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002af2:	e01b      	b.n	8002b2c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d902      	bls.n	8002b00 <DMA_CheckFifoParam+0xb4>
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d003      	beq.n	8002b06 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002afe:	e018      	b.n	8002b32 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
      break;
 8002b04:	e015      	b.n	8002b32 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00e      	beq.n	8002b30 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
      break;
 8002b16:	e00b      	b.n	8002b30 <DMA_CheckFifoParam+0xe4>
      break;
 8002b18:	bf00      	nop
 8002b1a:	e00a      	b.n	8002b32 <DMA_CheckFifoParam+0xe6>
      break;
 8002b1c:	bf00      	nop
 8002b1e:	e008      	b.n	8002b32 <DMA_CheckFifoParam+0xe6>
      break;
 8002b20:	bf00      	nop
 8002b22:	e006      	b.n	8002b32 <DMA_CheckFifoParam+0xe6>
      break;
 8002b24:	bf00      	nop
 8002b26:	e004      	b.n	8002b32 <DMA_CheckFifoParam+0xe6>
      break;
 8002b28:	bf00      	nop
 8002b2a:	e002      	b.n	8002b32 <DMA_CheckFifoParam+0xe6>
      break;   
 8002b2c:	bf00      	nop
 8002b2e:	e000      	b.n	8002b32 <DMA_CheckFifoParam+0xe6>
      break;
 8002b30:	bf00      	nop
    }
  } 
  
  return status; 
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	e175      	b.n	8002e4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b60:	2201      	movs	r2, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	f040 8164 	bne.w	8002e46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d00b      	beq.n	8002b9e <HAL_GPIO_Init+0x5e>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d007      	beq.n	8002b9e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b92:	2b11      	cmp	r3, #17
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b12      	cmp	r3, #18
 8002b9c:	d130      	bne.n	8002c00 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	2203      	movs	r2, #3
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 0201 	and.w	r2, r3, #1
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d003      	beq.n	8002c40 <HAL_GPIO_Init+0x100>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b12      	cmp	r3, #18
 8002c3e:	d123      	bne.n	8002c88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	08da      	lsrs	r2, r3, #3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3208      	adds	r2, #8
 8002c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	220f      	movs	r2, #15
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	08da      	lsrs	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3208      	adds	r2, #8
 8002c82:	69b9      	ldr	r1, [r7, #24]
 8002c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	2203      	movs	r2, #3
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 0203 	and.w	r2, r3, #3
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 80be 	beq.w	8002e46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cca:	4b65      	ldr	r3, [pc, #404]	; (8002e60 <HAL_GPIO_Init+0x320>)
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	4a64      	ldr	r2, [pc, #400]	; (8002e60 <HAL_GPIO_Init+0x320>)
 8002cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cd6:	4b62      	ldr	r3, [pc, #392]	; (8002e60 <HAL_GPIO_Init+0x320>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ce2:	4a60      	ldr	r2, [pc, #384]	; (8002e64 <HAL_GPIO_Init+0x324>)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	3302      	adds	r3, #2
 8002cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	220f      	movs	r2, #15
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a57      	ldr	r2, [pc, #348]	; (8002e68 <HAL_GPIO_Init+0x328>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d037      	beq.n	8002d7e <HAL_GPIO_Init+0x23e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a56      	ldr	r2, [pc, #344]	; (8002e6c <HAL_GPIO_Init+0x32c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d031      	beq.n	8002d7a <HAL_GPIO_Init+0x23a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a55      	ldr	r2, [pc, #340]	; (8002e70 <HAL_GPIO_Init+0x330>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d02b      	beq.n	8002d76 <HAL_GPIO_Init+0x236>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a54      	ldr	r2, [pc, #336]	; (8002e74 <HAL_GPIO_Init+0x334>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d025      	beq.n	8002d72 <HAL_GPIO_Init+0x232>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a53      	ldr	r2, [pc, #332]	; (8002e78 <HAL_GPIO_Init+0x338>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01f      	beq.n	8002d6e <HAL_GPIO_Init+0x22e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a52      	ldr	r2, [pc, #328]	; (8002e7c <HAL_GPIO_Init+0x33c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d019      	beq.n	8002d6a <HAL_GPIO_Init+0x22a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a51      	ldr	r2, [pc, #324]	; (8002e80 <HAL_GPIO_Init+0x340>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_GPIO_Init+0x226>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a50      	ldr	r2, [pc, #320]	; (8002e84 <HAL_GPIO_Init+0x344>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00d      	beq.n	8002d62 <HAL_GPIO_Init+0x222>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a4f      	ldr	r2, [pc, #316]	; (8002e88 <HAL_GPIO_Init+0x348>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d007      	beq.n	8002d5e <HAL_GPIO_Init+0x21e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4e      	ldr	r2, [pc, #312]	; (8002e8c <HAL_GPIO_Init+0x34c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d101      	bne.n	8002d5a <HAL_GPIO_Init+0x21a>
 8002d56:	2309      	movs	r3, #9
 8002d58:	e012      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d5a:	230a      	movs	r3, #10
 8002d5c:	e010      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d5e:	2308      	movs	r3, #8
 8002d60:	e00e      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d62:	2307      	movs	r3, #7
 8002d64:	e00c      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d66:	2306      	movs	r3, #6
 8002d68:	e00a      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d6a:	2305      	movs	r3, #5
 8002d6c:	e008      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d6e:	2304      	movs	r3, #4
 8002d70:	e006      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d72:	2303      	movs	r3, #3
 8002d74:	e004      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e002      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_GPIO_Init+0x240>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	f002 0203 	and.w	r2, r2, #3
 8002d86:	0092      	lsls	r2, r2, #2
 8002d88:	4093      	lsls	r3, r2
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d90:	4934      	ldr	r1, [pc, #208]	; (8002e64 <HAL_GPIO_Init+0x324>)
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	3302      	adds	r3, #2
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d9e:	4b3c      	ldr	r3, [pc, #240]	; (8002e90 <HAL_GPIO_Init+0x350>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dc2:	4a33      	ldr	r2, [pc, #204]	; (8002e90 <HAL_GPIO_Init+0x350>)
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dc8:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <HAL_GPIO_Init+0x350>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dec:	4a28      	ldr	r2, [pc, #160]	; (8002e90 <HAL_GPIO_Init+0x350>)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002df2:	4b27      	ldr	r3, [pc, #156]	; (8002e90 <HAL_GPIO_Init+0x350>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e16:	4a1e      	ldr	r2, [pc, #120]	; (8002e90 <HAL_GPIO_Init+0x350>)
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e1c:	4b1c      	ldr	r3, [pc, #112]	; (8002e90 <HAL_GPIO_Init+0x350>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e40:	4a13      	ldr	r2, [pc, #76]	; (8002e90 <HAL_GPIO_Init+0x350>)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	2b0f      	cmp	r3, #15
 8002e50:	f67f ae86 	bls.w	8002b60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e54:	bf00      	nop
 8002e56:	3724      	adds	r7, #36	; 0x24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40013800 	.word	0x40013800
 8002e68:	40020000 	.word	0x40020000
 8002e6c:	40020400 	.word	0x40020400
 8002e70:	40020800 	.word	0x40020800
 8002e74:	40020c00 	.word	0x40020c00
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40021400 	.word	0x40021400
 8002e80:	40021800 	.word	0x40021800
 8002e84:	40021c00 	.word	0x40021c00
 8002e88:	40022000 	.word	0x40022000
 8002e8c:	40022400 	.word	0x40022400
 8002e90:	40013c00 	.word	0x40013c00

08002e94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	887b      	ldrh	r3, [r7, #2]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
 8002eb0:	e001      	b.n	8002eb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	807b      	strh	r3, [r7, #2]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ed4:	787b      	ldrb	r3, [r7, #1]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eda:	887a      	ldrh	r2, [r7, #2]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ee0:	e003      	b.n	8002eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ee2:	887b      	ldrh	r3, [r7, #2]
 8002ee4:	041a      	lsls	r2, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	619a      	str	r2, [r3, #24]
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	460b      	mov	r3, r1
 8002f00:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	887b      	ldrh	r3, [r7, #2]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d004      	beq.n	8002f18 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f0e:	887b      	ldrh	r3, [r7, #2]
 8002f10:	041a      	lsls	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002f16:	e002      	b.n	8002f1e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f18:	887a      	ldrh	r2, [r7, #2]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	619a      	str	r2, [r3, #24]
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f34:	2300      	movs	r3, #0
 8002f36:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e29b      	b.n	800347a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 8087 	beq.w	800305e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f50:	4b96      	ldr	r3, [pc, #600]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 030c 	and.w	r3, r3, #12
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d00c      	beq.n	8002f76 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f5c:	4b93      	ldr	r3, [pc, #588]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 030c 	and.w	r3, r3, #12
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d112      	bne.n	8002f8e <HAL_RCC_OscConfig+0x62>
 8002f68:	4b90      	ldr	r3, [pc, #576]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f74:	d10b      	bne.n	8002f8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f76:	4b8d      	ldr	r3, [pc, #564]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d06c      	beq.n	800305c <HAL_RCC_OscConfig+0x130>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d168      	bne.n	800305c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e275      	b.n	800347a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f96:	d106      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x7a>
 8002f98:	4b84      	ldr	r3, [pc, #528]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a83      	ldr	r2, [pc, #524]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8002f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	e02e      	b.n	8003004 <HAL_RCC_OscConfig+0xd8>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x9c>
 8002fae:	4b7f      	ldr	r3, [pc, #508]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a7e      	ldr	r2, [pc, #504]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8002fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	4b7c      	ldr	r3, [pc, #496]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a7b      	ldr	r2, [pc, #492]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8002fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	e01d      	b.n	8003004 <HAL_RCC_OscConfig+0xd8>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fd0:	d10c      	bne.n	8002fec <HAL_RCC_OscConfig+0xc0>
 8002fd2:	4b76      	ldr	r3, [pc, #472]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a75      	ldr	r2, [pc, #468]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8002fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	4b73      	ldr	r3, [pc, #460]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a72      	ldr	r2, [pc, #456]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8002fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	e00b      	b.n	8003004 <HAL_RCC_OscConfig+0xd8>
 8002fec:	4b6f      	ldr	r3, [pc, #444]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a6e      	ldr	r2, [pc, #440]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8002ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	4b6c      	ldr	r3, [pc, #432]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a6b      	ldr	r2, [pc, #428]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8002ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d013      	beq.n	8003034 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fd fd02 	bl	8000a14 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003014:	f7fd fcfe 	bl	8000a14 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b64      	cmp	r3, #100	; 0x64
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e229      	b.n	800347a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003026:	4b61      	ldr	r3, [pc, #388]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0xe8>
 8003032:	e014      	b.n	800305e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7fd fcee 	bl	8000a14 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800303c:	f7fd fcea 	bl	8000a14 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	; 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e215      	b.n	800347a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304e:	4b57      	ldr	r3, [pc, #348]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x110>
 800305a:	e000      	b.n	800305e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d069      	beq.n	800313e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800306a:	4b50      	ldr	r3, [pc, #320]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00b      	beq.n	800308e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003076:	4b4d      	ldr	r3, [pc, #308]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b08      	cmp	r3, #8
 8003080:	d11c      	bne.n	80030bc <HAL_RCC_OscConfig+0x190>
 8003082:	4b4a      	ldr	r3, [pc, #296]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d116      	bne.n	80030bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308e:	4b47      	ldr	r3, [pc, #284]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <HAL_RCC_OscConfig+0x17a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d001      	beq.n	80030a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e1e9      	b.n	800347a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a6:	4b41      	ldr	r3, [pc, #260]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	493d      	ldr	r1, [pc, #244]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ba:	e040      	b.n	800313e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d023      	beq.n	800310c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c4:	4b39      	ldr	r3, [pc, #228]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a38      	ldr	r2, [pc, #224]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fd fca0 	bl	8000a14 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d8:	f7fd fc9c 	bl	8000a14 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e1c7      	b.n	800347a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ea:	4b30      	ldr	r3, [pc, #192]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f6:	4b2d      	ldr	r3, [pc, #180]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4929      	ldr	r1, [pc, #164]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]
 800310a:	e018      	b.n	800313e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800310c:	4b27      	ldr	r3, [pc, #156]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a26      	ldr	r2, [pc, #152]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8003112:	f023 0301 	bic.w	r3, r3, #1
 8003116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fd fc7c 	bl	8000a14 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003120:	f7fd fc78 	bl	8000a14 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e1a3      	b.n	800347a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003132:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d038      	beq.n	80031bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d019      	beq.n	8003186 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003152:	4b16      	ldr	r3, [pc, #88]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8003154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003156:	4a15      	ldr	r2, [pc, #84]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315e:	f7fd fc59 	bl	8000a14 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003166:	f7fd fc55 	bl	8000a14 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e180      	b.n	800347a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 800317a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x23a>
 8003184:	e01a      	b.n	80031bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003186:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 8003188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318a:	4a08      	ldr	r2, [pc, #32]	; (80031ac <HAL_RCC_OscConfig+0x280>)
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003192:	f7fd fc3f 	bl	8000a14 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003198:	e00a      	b.n	80031b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800319a:	f7fd fc3b 	bl	8000a14 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d903      	bls.n	80031b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e166      	b.n	800347a <HAL_RCC_OscConfig+0x54e>
 80031ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b0:	4b92      	ldr	r3, [pc, #584]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 80031b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1ee      	bne.n	800319a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80a4 	beq.w	8003312 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ca:	4b8c      	ldr	r3, [pc, #560]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10d      	bne.n	80031f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d6:	4b89      	ldr	r3, [pc, #548]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	4a88      	ldr	r2, [pc, #544]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 80031dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e0:	6413      	str	r3, [r2, #64]	; 0x40
 80031e2:	4b86      	ldr	r3, [pc, #536]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ee:	2301      	movs	r3, #1
 80031f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f2:	4b83      	ldr	r3, [pc, #524]	; (8003400 <HAL_RCC_OscConfig+0x4d4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d118      	bne.n	8003230 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80031fe:	4b80      	ldr	r3, [pc, #512]	; (8003400 <HAL_RCC_OscConfig+0x4d4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a7f      	ldr	r2, [pc, #508]	; (8003400 <HAL_RCC_OscConfig+0x4d4>)
 8003204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320a:	f7fd fc03 	bl	8000a14 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003212:	f7fd fbff 	bl	8000a14 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b64      	cmp	r3, #100	; 0x64
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e12a      	b.n	800347a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003224:	4b76      	ldr	r3, [pc, #472]	; (8003400 <HAL_RCC_OscConfig+0x4d4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0f0      	beq.n	8003212 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d106      	bne.n	8003246 <HAL_RCC_OscConfig+0x31a>
 8003238:	4b70      	ldr	r3, [pc, #448]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 800323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323c:	4a6f      	ldr	r2, [pc, #444]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6713      	str	r3, [r2, #112]	; 0x70
 8003244:	e02d      	b.n	80032a2 <HAL_RCC_OscConfig+0x376>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10c      	bne.n	8003268 <HAL_RCC_OscConfig+0x33c>
 800324e:	4b6b      	ldr	r3, [pc, #428]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	4a6a      	ldr	r2, [pc, #424]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 8003254:	f023 0301 	bic.w	r3, r3, #1
 8003258:	6713      	str	r3, [r2, #112]	; 0x70
 800325a:	4b68      	ldr	r3, [pc, #416]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	4a67      	ldr	r2, [pc, #412]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 8003260:	f023 0304 	bic.w	r3, r3, #4
 8003264:	6713      	str	r3, [r2, #112]	; 0x70
 8003266:	e01c      	b.n	80032a2 <HAL_RCC_OscConfig+0x376>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b05      	cmp	r3, #5
 800326e:	d10c      	bne.n	800328a <HAL_RCC_OscConfig+0x35e>
 8003270:	4b62      	ldr	r3, [pc, #392]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 8003272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003274:	4a61      	ldr	r2, [pc, #388]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 8003276:	f043 0304 	orr.w	r3, r3, #4
 800327a:	6713      	str	r3, [r2, #112]	; 0x70
 800327c:	4b5f      	ldr	r3, [pc, #380]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	4a5e      	ldr	r2, [pc, #376]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	6713      	str	r3, [r2, #112]	; 0x70
 8003288:	e00b      	b.n	80032a2 <HAL_RCC_OscConfig+0x376>
 800328a:	4b5c      	ldr	r3, [pc, #368]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a5b      	ldr	r2, [pc, #364]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	6713      	str	r3, [r2, #112]	; 0x70
 8003296:	4b59      	ldr	r3, [pc, #356]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	4a58      	ldr	r2, [pc, #352]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 800329c:	f023 0304 	bic.w	r3, r3, #4
 80032a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d015      	beq.n	80032d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032aa:	f7fd fbb3 	bl	8000a14 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b0:	e00a      	b.n	80032c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b2:	f7fd fbaf 	bl	8000a14 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e0d8      	b.n	800347a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c8:	4b4c      	ldr	r3, [pc, #304]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0ee      	beq.n	80032b2 <HAL_RCC_OscConfig+0x386>
 80032d4:	e014      	b.n	8003300 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d6:	f7fd fb9d 	bl	8000a14 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032dc:	e00a      	b.n	80032f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fd fb99 	bl	8000a14 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e0c2      	b.n	800347a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f4:	4b41      	ldr	r3, [pc, #260]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1ee      	bne.n	80032de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003300:	7dfb      	ldrb	r3, [r7, #23]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d105      	bne.n	8003312 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003306:	4b3d      	ldr	r3, [pc, #244]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	4a3c      	ldr	r2, [pc, #240]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 800330c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003310:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 80ae 	beq.w	8003478 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800331c:	4b37      	ldr	r3, [pc, #220]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b08      	cmp	r3, #8
 8003326:	d06d      	beq.n	8003404 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d14b      	bne.n	80033c8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003330:	4b32      	ldr	r3, [pc, #200]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a31      	ldr	r2, [pc, #196]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 8003336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800333a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7fd fb6a 	bl	8000a14 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003344:	f7fd fb66 	bl	8000a14 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e091      	b.n	800347a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003356:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69da      	ldr	r2, [r3, #28]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	019b      	lsls	r3, r3, #6
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	3b01      	subs	r3, #1
 800337c:	041b      	lsls	r3, r3, #16
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	061b      	lsls	r3, r3, #24
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	071b      	lsls	r3, r3, #28
 800338e:	491b      	ldr	r1, [pc, #108]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 8003390:	4313      	orrs	r3, r2
 8003392:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a18      	ldr	r2, [pc, #96]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 800339a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800339e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fd fb38 	bl	8000a14 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fd fb34 	bl	8000a14 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e05f      	b.n	800347a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x47c>
 80033c6:	e057      	b.n	8003478 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c8:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a0b      	ldr	r2, [pc, #44]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 80033ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d4:	f7fd fb1e 	bl	8000a14 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033dc:	f7fd fb1a 	bl	8000a14 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e045      	b.n	800347a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ee:	4b03      	ldr	r3, [pc, #12]	; (80033fc <HAL_RCC_OscConfig+0x4d0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x4b0>
 80033fa:	e03d      	b.n	8003478 <HAL_RCC_OscConfig+0x54c>
 80033fc:	40023800 	.word	0x40023800
 8003400:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003404:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <HAL_RCC_OscConfig+0x558>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d030      	beq.n	8003474 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800341c:	429a      	cmp	r2, r3
 800341e:	d129      	bne.n	8003474 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800342a:	429a      	cmp	r2, r3
 800342c:	d122      	bne.n	8003474 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003434:	4013      	ands	r3, r2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800343a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800343c:	4293      	cmp	r3, r2
 800343e:	d119      	bne.n	8003474 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	085b      	lsrs	r3, r3, #1
 800344c:	3b01      	subs	r3, #1
 800344e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d10f      	bne.n	8003474 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d107      	bne.n	8003474 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d001      	beq.n	8003478 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e000      	b.n	800347a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800

08003488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0d0      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034a0:	4b6a      	ldr	r3, [pc, #424]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d910      	bls.n	80034d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ae:	4b67      	ldr	r3, [pc, #412]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 020f 	bic.w	r2, r3, #15
 80034b6:	4965      	ldr	r1, [pc, #404]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b63      	ldr	r3, [pc, #396]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0b8      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d020      	beq.n	800351e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034e8:	4b59      	ldr	r3, [pc, #356]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a58      	ldr	r2, [pc, #352]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 80034ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003500:	4b53      	ldr	r3, [pc, #332]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4a52      	ldr	r2, [pc, #328]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 8003506:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800350a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800350c:	4b50      	ldr	r3, [pc, #320]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	494d      	ldr	r1, [pc, #308]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d040      	beq.n	80035ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d107      	bne.n	8003542 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003532:	4b47      	ldr	r3, [pc, #284]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d115      	bne.n	800356a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e07f      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d107      	bne.n	800355a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354a:	4b41      	ldr	r3, [pc, #260]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e073      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355a:	4b3d      	ldr	r3, [pc, #244]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e06b      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800356a:	4b39      	ldr	r3, [pc, #228]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f023 0203 	bic.w	r2, r3, #3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	4936      	ldr	r1, [pc, #216]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 8003578:	4313      	orrs	r3, r2
 800357a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800357c:	f7fd fa4a 	bl	8000a14 <HAL_GetTick>
 8003580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003582:	e00a      	b.n	800359a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003584:	f7fd fa46 	bl	8000a14 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e053      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359a:	4b2d      	ldr	r3, [pc, #180]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 020c 	and.w	r2, r3, #12
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d1eb      	bne.n	8003584 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035ac:	4b27      	ldr	r3, [pc, #156]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d210      	bcs.n	80035dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ba:	4b24      	ldr	r3, [pc, #144]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f023 020f 	bic.w	r2, r3, #15
 80035c2:	4922      	ldr	r1, [pc, #136]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ca:	4b20      	ldr	r3, [pc, #128]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e032      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e8:	4b19      	ldr	r3, [pc, #100]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	4916      	ldr	r1, [pc, #88]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003606:	4b12      	ldr	r3, [pc, #72]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	490e      	ldr	r1, [pc, #56]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800361a:	f000 f821 	bl	8003660 <HAL_RCC_GetSysClockFreq>
 800361e:	4601      	mov	r1, r0
 8003620:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	4a0a      	ldr	r2, [pc, #40]	; (8003654 <HAL_RCC_ClockConfig+0x1cc>)
 800362c:	5cd3      	ldrb	r3, [r2, r3]
 800362e:	fa21 f303 	lsr.w	r3, r1, r3
 8003632:	4a09      	ldr	r2, [pc, #36]	; (8003658 <HAL_RCC_ClockConfig+0x1d0>)
 8003634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <HAL_RCC_ClockConfig+0x1d4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fd f9a6 	bl	800098c <HAL_InitTick>

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40023c00 	.word	0x40023c00
 8003650:	40023800 	.word	0x40023800
 8003654:	0800635c 	.word	0x0800635c
 8003658:	20000008 	.word	0x20000008
 800365c:	20000000 	.word	0x20000000

08003660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	607b      	str	r3, [r7, #4]
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	2300      	movs	r3, #0
 8003670:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003676:	4b63      	ldr	r3, [pc, #396]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b04      	cmp	r3, #4
 8003680:	d007      	beq.n	8003692 <HAL_RCC_GetSysClockFreq+0x32>
 8003682:	2b08      	cmp	r3, #8
 8003684:	d008      	beq.n	8003698 <HAL_RCC_GetSysClockFreq+0x38>
 8003686:	2b00      	cmp	r3, #0
 8003688:	f040 80b4 	bne.w	80037f4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800368c:	4b5e      	ldr	r3, [pc, #376]	; (8003808 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800368e:	60bb      	str	r3, [r7, #8]
      break;
 8003690:	e0b3      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003692:	4b5e      	ldr	r3, [pc, #376]	; (800380c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003694:	60bb      	str	r3, [r7, #8]
      break;
 8003696:	e0b0      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003698:	4b5a      	ldr	r3, [pc, #360]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036a0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036a2:	4b58      	ldr	r3, [pc, #352]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d04a      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ae:	4b55      	ldr	r3, [pc, #340]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	099b      	lsrs	r3, r3, #6
 80036b4:	f04f 0400 	mov.w	r4, #0
 80036b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	ea03 0501 	and.w	r5, r3, r1
 80036c4:	ea04 0602 	and.w	r6, r4, r2
 80036c8:	4629      	mov	r1, r5
 80036ca:	4632      	mov	r2, r6
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	f04f 0400 	mov.w	r4, #0
 80036d4:	0154      	lsls	r4, r2, #5
 80036d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036da:	014b      	lsls	r3, r1, #5
 80036dc:	4619      	mov	r1, r3
 80036de:	4622      	mov	r2, r4
 80036e0:	1b49      	subs	r1, r1, r5
 80036e2:	eb62 0206 	sbc.w	r2, r2, r6
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	f04f 0400 	mov.w	r4, #0
 80036ee:	0194      	lsls	r4, r2, #6
 80036f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036f4:	018b      	lsls	r3, r1, #6
 80036f6:	1a5b      	subs	r3, r3, r1
 80036f8:	eb64 0402 	sbc.w	r4, r4, r2
 80036fc:	f04f 0100 	mov.w	r1, #0
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	00e2      	lsls	r2, r4, #3
 8003706:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800370a:	00d9      	lsls	r1, r3, #3
 800370c:	460b      	mov	r3, r1
 800370e:	4614      	mov	r4, r2
 8003710:	195b      	adds	r3, r3, r5
 8003712:	eb44 0406 	adc.w	r4, r4, r6
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	0262      	lsls	r2, r4, #9
 8003720:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003724:	0259      	lsls	r1, r3, #9
 8003726:	460b      	mov	r3, r1
 8003728:	4614      	mov	r4, r2
 800372a:	4618      	mov	r0, r3
 800372c:	4621      	mov	r1, r4
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f04f 0400 	mov.w	r4, #0
 8003734:	461a      	mov	r2, r3
 8003736:	4623      	mov	r3, r4
 8003738:	f7fc fd7e 	bl	8000238 <__aeabi_uldivmod>
 800373c:	4603      	mov	r3, r0
 800373e:	460c      	mov	r4, r1
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	e049      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003744:	4b2f      	ldr	r3, [pc, #188]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	099b      	lsrs	r3, r3, #6
 800374a:	f04f 0400 	mov.w	r4, #0
 800374e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	ea03 0501 	and.w	r5, r3, r1
 800375a:	ea04 0602 	and.w	r6, r4, r2
 800375e:	4629      	mov	r1, r5
 8003760:	4632      	mov	r2, r6
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	f04f 0400 	mov.w	r4, #0
 800376a:	0154      	lsls	r4, r2, #5
 800376c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003770:	014b      	lsls	r3, r1, #5
 8003772:	4619      	mov	r1, r3
 8003774:	4622      	mov	r2, r4
 8003776:	1b49      	subs	r1, r1, r5
 8003778:	eb62 0206 	sbc.w	r2, r2, r6
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	f04f 0400 	mov.w	r4, #0
 8003784:	0194      	lsls	r4, r2, #6
 8003786:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800378a:	018b      	lsls	r3, r1, #6
 800378c:	1a5b      	subs	r3, r3, r1
 800378e:	eb64 0402 	sbc.w	r4, r4, r2
 8003792:	f04f 0100 	mov.w	r1, #0
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	00e2      	lsls	r2, r4, #3
 800379c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037a0:	00d9      	lsls	r1, r3, #3
 80037a2:	460b      	mov	r3, r1
 80037a4:	4614      	mov	r4, r2
 80037a6:	195b      	adds	r3, r3, r5
 80037a8:	eb44 0406 	adc.w	r4, r4, r6
 80037ac:	f04f 0100 	mov.w	r1, #0
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	02a2      	lsls	r2, r4, #10
 80037b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80037ba:	0299      	lsls	r1, r3, #10
 80037bc:	460b      	mov	r3, r1
 80037be:	4614      	mov	r4, r2
 80037c0:	4618      	mov	r0, r3
 80037c2:	4621      	mov	r1, r4
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f04f 0400 	mov.w	r4, #0
 80037ca:	461a      	mov	r2, r3
 80037cc:	4623      	mov	r3, r4
 80037ce:	f7fc fd33 	bl	8000238 <__aeabi_uldivmod>
 80037d2:	4603      	mov	r3, r0
 80037d4:	460c      	mov	r4, r1
 80037d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037d8:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	0c1b      	lsrs	r3, r3, #16
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	3301      	adds	r3, #1
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f0:	60bb      	str	r3, [r7, #8]
      break;
 80037f2:	e002      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80037f6:	60bb      	str	r3, [r7, #8]
      break;
 80037f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037fa:	68bb      	ldr	r3, [r7, #8]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003804:	40023800 	.word	0x40023800
 8003808:	00f42400 	.word	0x00f42400
 800380c:	007a1200 	.word	0x007a1200

08003810 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003814:	4b03      	ldr	r3, [pc, #12]	; (8003824 <HAL_RCC_GetHCLKFreq+0x14>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000008 	.word	0x20000008

08003828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800382c:	f7ff fff0 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8003830:	4601      	mov	r1, r0
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	0a9b      	lsrs	r3, r3, #10
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4a03      	ldr	r2, [pc, #12]	; (800384c <HAL_RCC_GetPCLK1Freq+0x24>)
 800383e:	5cd3      	ldrb	r3, [r2, r3]
 8003840:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40023800 	.word	0x40023800
 800384c:	0800636c 	.word	0x0800636c

08003850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003854:	f7ff ffdc 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8003858:	4601      	mov	r1, r0
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	0b5b      	lsrs	r3, r3, #13
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4a03      	ldr	r2, [pc, #12]	; (8003874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003866:	5cd3      	ldrb	r3, [r2, r3]
 8003868:	fa21 f303 	lsr.w	r3, r1, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40023800 	.word	0x40023800
 8003874:	0800636c 	.word	0x0800636c

08003878 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003890:	2300      	movs	r3, #0
 8003892:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d012      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038a0:	4b69      	ldr	r3, [pc, #420]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	4a68      	ldr	r2, [pc, #416]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038aa:	6093      	str	r3, [r2, #8]
 80038ac:	4b66      	ldr	r3, [pc, #408]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b4:	4964      	ldr	r1, [pc, #400]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038c2:	2301      	movs	r3, #1
 80038c4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d017      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038d2:	4b5d      	ldr	r3, [pc, #372]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e0:	4959      	ldr	r1, [pc, #356]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038f0:	d101      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038f2:	2301      	movs	r3, #1
 80038f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038fe:	2301      	movs	r3, #1
 8003900:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d017      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800390e:	4b4e      	ldr	r3, [pc, #312]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003914:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	494a      	ldr	r1, [pc, #296]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800392c:	d101      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800392e:	2301      	movs	r3, #1
 8003930:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800393a:	2301      	movs	r3, #1
 800393c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800394a:	2301      	movs	r3, #1
 800394c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 808b 	beq.w	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800395c:	4b3a      	ldr	r3, [pc, #232]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	4a39      	ldr	r2, [pc, #228]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003966:	6413      	str	r3, [r2, #64]	; 0x40
 8003968:	4b37      	ldr	r3, [pc, #220]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003974:	4b35      	ldr	r3, [pc, #212]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a34      	ldr	r2, [pc, #208]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800397a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003980:	f7fd f848 	bl	8000a14 <HAL_GetTick>
 8003984:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003986:	e008      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003988:	f7fd f844 	bl	8000a14 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	; 0x64
 8003994:	d901      	bls.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e38d      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800399a:	4b2c      	ldr	r3, [pc, #176]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039a6:	4b28      	ldr	r3, [pc, #160]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d035      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d02e      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039c4:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ce:	4b1e      	ldr	r3, [pc, #120]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d2:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039da:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	4a1a      	ldr	r2, [pc, #104]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039e6:	4a18      	ldr	r2, [pc, #96]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039ec:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d114      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fd f80c 	bl	8000a14 <HAL_GetTick>
 80039fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fe:	e00a      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a00:	f7fd f808 	bl	8000a14 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e34f      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0ee      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a2e:	d111      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a3c:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a3e:	400b      	ands	r3, r1
 8003a40:	4901      	ldr	r1, [pc, #4]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
 8003a46:	e00b      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40007000 	.word	0x40007000
 8003a50:	0ffffcff 	.word	0x0ffffcff
 8003a54:	4bb3      	ldr	r3, [pc, #716]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4ab2      	ldr	r2, [pc, #712]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a5e:	6093      	str	r3, [r2, #8]
 8003a60:	4bb0      	ldr	r3, [pc, #704]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6c:	49ad      	ldr	r1, [pc, #692]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d010      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a7e:	4ba9      	ldr	r3, [pc, #676]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a84:	4aa7      	ldr	r2, [pc, #668]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a8e:	4ba5      	ldr	r3, [pc, #660]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	49a2      	ldr	r1, [pc, #648]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aac:	4b9d      	ldr	r3, [pc, #628]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aba:	499a      	ldr	r1, [pc, #616]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ace:	4b95      	ldr	r3, [pc, #596]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003adc:	4991      	ldr	r1, [pc, #580]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003af0:	4b8c      	ldr	r3, [pc, #560]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afe:	4989      	ldr	r1, [pc, #548]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b12:	4b84      	ldr	r3, [pc, #528]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b20:	4980      	ldr	r1, [pc, #512]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b34:	4b7b      	ldr	r3, [pc, #492]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	f023 0203 	bic.w	r2, r3, #3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	4978      	ldr	r1, [pc, #480]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b56:	4b73      	ldr	r3, [pc, #460]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5c:	f023 020c 	bic.w	r2, r3, #12
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b64:	496f      	ldr	r1, [pc, #444]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b78:	4b6a      	ldr	r3, [pc, #424]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b86:	4967      	ldr	r1, [pc, #412]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b9a:	4b62      	ldr	r3, [pc, #392]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba8:	495e      	ldr	r1, [pc, #376]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bbc:	4b59      	ldr	r3, [pc, #356]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bca:	4956      	ldr	r1, [pc, #344]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bde:	4b51      	ldr	r3, [pc, #324]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	494d      	ldr	r1, [pc, #308]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c00:	4b48      	ldr	r3, [pc, #288]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0e:	4945      	ldr	r1, [pc, #276]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c22:	4b40      	ldr	r3, [pc, #256]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c30:	493c      	ldr	r1, [pc, #240]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c44:	4b37      	ldr	r3, [pc, #220]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c52:	4934      	ldr	r1, [pc, #208]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d011      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c66:	4b2f      	ldr	r3, [pc, #188]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c74:	492b      	ldr	r1, [pc, #172]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c84:	d101      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c86:	2301      	movs	r3, #1
 8003c88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c96:	2301      	movs	r3, #1
 8003c98:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ca6:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb4:	491b      	ldr	r1, [pc, #108]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00b      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cc8:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd8:	4912      	ldr	r1, [pc, #72]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00b      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003cec:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfc:	4909      	ldr	r1, [pc, #36]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00f      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d10:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d20:	e002      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800
 8003d28:	4985      	ldr	r1, [pc, #532]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00b      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d3c:	4b80      	ldr	r3, [pc, #512]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d4c:	497c      	ldr	r1, [pc, #496]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d005      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d62:	f040 80d6 	bne.w	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d66:	4b76      	ldr	r3, [pc, #472]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a75      	ldr	r2, [pc, #468]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d72:	f7fc fe4f 	bl	8000a14 <HAL_GetTick>
 8003d76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d78:	e008      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d7a:	f7fc fe4b 	bl	8000a14 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b64      	cmp	r3, #100	; 0x64
 8003d86:	d901      	bls.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e194      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d8c:	4b6c      	ldr	r3, [pc, #432]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1f0      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d021      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d11d      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dac:	4b64      	ldr	r3, [pc, #400]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db2:	0c1b      	lsrs	r3, r3, #16
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dba:	4b61      	ldr	r3, [pc, #388]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc0:	0e1b      	lsrs	r3, r3, #24
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	019a      	lsls	r2, r3, #6
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	041b      	lsls	r3, r3, #16
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	061b      	lsls	r3, r3, #24
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	071b      	lsls	r3, r3, #28
 8003de0:	4957      	ldr	r1, [pc, #348]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d004      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d02e      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e12:	d129      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e14:	4b4a      	ldr	r3, [pc, #296]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e1a:	0c1b      	lsrs	r3, r3, #16
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e22:	4b47      	ldr	r3, [pc, #284]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e28:	0f1b      	lsrs	r3, r3, #28
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	019a      	lsls	r2, r3, #6
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	041b      	lsls	r3, r3, #16
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	061b      	lsls	r3, r3, #24
 8003e42:	431a      	orrs	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	071b      	lsls	r3, r3, #28
 8003e48:	493d      	ldr	r1, [pc, #244]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e50:	4b3b      	ldr	r3, [pc, #236]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e56:	f023 021f 	bic.w	r2, r3, #31
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	4937      	ldr	r1, [pc, #220]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d01d      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e74:	4b32      	ldr	r3, [pc, #200]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e7a:	0e1b      	lsrs	r3, r3, #24
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e82:	4b2f      	ldr	r3, [pc, #188]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e88:	0f1b      	lsrs	r3, r3, #28
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	019a      	lsls	r2, r3, #6
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	041b      	lsls	r3, r3, #16
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	061b      	lsls	r3, r3, #24
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	071b      	lsls	r3, r3, #28
 8003ea8:	4925      	ldr	r1, [pc, #148]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d011      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	019a      	lsls	r2, r3, #6
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	041b      	lsls	r3, r3, #16
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	061b      	lsls	r3, r3, #24
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	071b      	lsls	r3, r3, #28
 8003ed8:	4919      	ldr	r1, [pc, #100]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ee0:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a16      	ldr	r2, [pc, #88]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ee6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003eea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eec:	f7fc fd92 	bl	8000a14 <HAL_GetTick>
 8003ef0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ef4:	f7fc fd8e 	bl	8000a14 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b64      	cmp	r3, #100	; 0x64
 8003f00:	d901      	bls.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e0d7      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f06:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	f040 80cd 	bne.w	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a08      	ldr	r2, [pc, #32]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f26:	f7fc fd75 	bl	8000a14 <HAL_GetTick>
 8003f2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f2e:	f7fc fd71 	bl	8000a14 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b64      	cmp	r3, #100	; 0x64
 8003f3a:	d903      	bls.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e0ba      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003f40:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f44:	4b5e      	ldr	r3, [pc, #376]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f50:	d0ed      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d02e      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d12a      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f7a:	4b51      	ldr	r3, [pc, #324]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f88:	4b4d      	ldr	r3, [pc, #308]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8e:	0f1b      	lsrs	r3, r3, #28
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	019a      	lsls	r2, r3, #6
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	041b      	lsls	r3, r3, #16
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	061b      	lsls	r3, r3, #24
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	071b      	lsls	r3, r3, #28
 8003fae:	4944      	ldr	r1, [pc, #272]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fb6:	4b42      	ldr	r3, [pc, #264]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fbc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	493d      	ldr	r1, [pc, #244]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d022      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fe0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fe4:	d11d      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fe6:	4b36      	ldr	r3, [pc, #216]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	0e1b      	lsrs	r3, r3, #24
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ff4:	4b32      	ldr	r3, [pc, #200]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	0f1b      	lsrs	r3, r3, #28
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	019a      	lsls	r2, r3, #6
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	041b      	lsls	r3, r3, #16
 800400e:	431a      	orrs	r2, r3
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	061b      	lsls	r3, r3, #24
 8004014:	431a      	orrs	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	071b      	lsls	r3, r3, #28
 800401a:	4929      	ldr	r1, [pc, #164]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d028      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800402e:	4b24      	ldr	r3, [pc, #144]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004034:	0e1b      	lsrs	r3, r3, #24
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800403c:	4b20      	ldr	r3, [pc, #128]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004042:	0c1b      	lsrs	r3, r3, #16
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	019a      	lsls	r2, r3, #6
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	041b      	lsls	r3, r3, #16
 8004054:	431a      	orrs	r2, r3
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	061b      	lsls	r3, r3, #24
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	071b      	lsls	r3, r3, #28
 8004062:	4917      	ldr	r1, [pc, #92]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800406a:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800406c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004070:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	4911      	ldr	r1, [pc, #68]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004080:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a0e      	ldr	r2, [pc, #56]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408c:	f7fc fcc2 	bl	8000a14 <HAL_GetTick>
 8004090:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004094:	f7fc fcbe 	bl	8000a14 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	; 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e007      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040a6:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b2:	d1ef      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3720      	adds	r7, #32
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40023800 	.word	0x40023800

080040c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e01d      	b.n	8004112 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f001 ff22 	bl	8005f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3304      	adds	r3, #4
 8004100:	4619      	mov	r1, r3
 8004102:	4610      	mov	r0, r2
 8004104:	f000 fa40 	bl	8004588 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	4b0c      	ldr	r3, [pc, #48]	; (800416c <HAL_TIM_Base_Start_IT+0x50>)
 800413c:	4013      	ands	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b06      	cmp	r3, #6
 8004144:	d00b      	beq.n	800415e <HAL_TIM_Base_Start_IT+0x42>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800414c:	d007      	beq.n	800415e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0201 	orr.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	00010007 	.word	0x00010007

08004170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b02      	cmp	r3, #2
 8004184:	d122      	bne.n	80041cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b02      	cmp	r3, #2
 8004192:	d11b      	bne.n	80041cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0202 	mvn.w	r2, #2
 800419c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f9ca 	bl	800454c <HAL_TIM_IC_CaptureCallback>
 80041b8:	e005      	b.n	80041c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f9bc 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f9cd 	bl	8004560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d122      	bne.n	8004220 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d11b      	bne.n	8004220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0204 	mvn.w	r2, #4
 80041f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2202      	movs	r2, #2
 80041f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f9a0 	bl	800454c <HAL_TIM_IC_CaptureCallback>
 800420c:	e005      	b.n	800421a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f992 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f9a3 	bl	8004560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b08      	cmp	r3, #8
 800422c:	d122      	bne.n	8004274 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b08      	cmp	r3, #8
 800423a:	d11b      	bne.n	8004274 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0208 	mvn.w	r2, #8
 8004244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2204      	movs	r2, #4
 800424a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f976 	bl	800454c <HAL_TIM_IC_CaptureCallback>
 8004260:	e005      	b.n	800426e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f968 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f979 	bl	8004560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b10      	cmp	r3, #16
 8004280:	d122      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	2b10      	cmp	r3, #16
 800428e:	d11b      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0210 	mvn.w	r2, #16
 8004298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2208      	movs	r2, #8
 800429e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f94c 	bl	800454c <HAL_TIM_IC_CaptureCallback>
 80042b4:	e005      	b.n	80042c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f93e 	bl	8004538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f94f 	bl	8004560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d10e      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d107      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0201 	mvn.w	r2, #1
 80042ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f918 	bl	8004524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fe:	2b80      	cmp	r3, #128	; 0x80
 8004300:	d10e      	bne.n	8004320 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	2b80      	cmp	r3, #128	; 0x80
 800430e:	d107      	bne.n	8004320 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fb06 	bl	800492c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432e:	d10e      	bne.n	800434e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433a:	2b80      	cmp	r3, #128	; 0x80
 800433c:	d107      	bne.n	800434e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 faf9 	bl	8004940 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b40      	cmp	r3, #64	; 0x40
 800435a:	d10e      	bne.n	800437a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004366:	2b40      	cmp	r3, #64	; 0x40
 8004368:	d107      	bne.n	800437a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f8fd 	bl	8004574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b20      	cmp	r3, #32
 8004386:	d10e      	bne.n	80043a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b20      	cmp	r3, #32
 8004394:	d107      	bne.n	80043a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f06f 0220 	mvn.w	r2, #32
 800439e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fab9 	bl	8004918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043a6:	bf00      	nop
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_TIM_ConfigClockSource+0x18>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e0a6      	b.n	8004516 <HAL_TIM_ConfigClockSource+0x166>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4b4f      	ldr	r3, [pc, #316]	; (8004520 <HAL_TIM_ConfigClockSource+0x170>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b40      	cmp	r3, #64	; 0x40
 80043fe:	d067      	beq.n	80044d0 <HAL_TIM_ConfigClockSource+0x120>
 8004400:	2b40      	cmp	r3, #64	; 0x40
 8004402:	d80b      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x6c>
 8004404:	2b10      	cmp	r3, #16
 8004406:	d073      	beq.n	80044f0 <HAL_TIM_ConfigClockSource+0x140>
 8004408:	2b10      	cmp	r3, #16
 800440a:	d802      	bhi.n	8004412 <HAL_TIM_ConfigClockSource+0x62>
 800440c:	2b00      	cmp	r3, #0
 800440e:	d06f      	beq.n	80044f0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004410:	e078      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004412:	2b20      	cmp	r3, #32
 8004414:	d06c      	beq.n	80044f0 <HAL_TIM_ConfigClockSource+0x140>
 8004416:	2b30      	cmp	r3, #48	; 0x30
 8004418:	d06a      	beq.n	80044f0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800441a:	e073      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800441c:	2b70      	cmp	r3, #112	; 0x70
 800441e:	d00d      	beq.n	800443c <HAL_TIM_ConfigClockSource+0x8c>
 8004420:	2b70      	cmp	r3, #112	; 0x70
 8004422:	d804      	bhi.n	800442e <HAL_TIM_ConfigClockSource+0x7e>
 8004424:	2b50      	cmp	r3, #80	; 0x50
 8004426:	d033      	beq.n	8004490 <HAL_TIM_ConfigClockSource+0xe0>
 8004428:	2b60      	cmp	r3, #96	; 0x60
 800442a:	d041      	beq.n	80044b0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800442c:	e06a      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800442e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004432:	d066      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x152>
 8004434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004438:	d017      	beq.n	800446a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800443a:	e063      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	6899      	ldr	r1, [r3, #8]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f000 f9b6 	bl	80047bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800445e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	609a      	str	r2, [r3, #8]
      break;
 8004468:	e04c      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6899      	ldr	r1, [r3, #8]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f000 f99f 	bl	80047bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800448c:	609a      	str	r2, [r3, #8]
      break;
 800448e:	e039      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	461a      	mov	r2, r3
 800449e:	f000 f913 	bl	80046c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2150      	movs	r1, #80	; 0x50
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 f96c 	bl	8004786 <TIM_ITRx_SetConfig>
      break;
 80044ae:	e029      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	6859      	ldr	r1, [r3, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	461a      	mov	r2, r3
 80044be:	f000 f932 	bl	8004726 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2160      	movs	r1, #96	; 0x60
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 f95c 	bl	8004786 <TIM_ITRx_SetConfig>
      break;
 80044ce:	e019      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	6859      	ldr	r1, [r3, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	461a      	mov	r2, r3
 80044de:	f000 f8f3 	bl	80046c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2140      	movs	r1, #64	; 0x40
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 f94c 	bl	8004786 <TIM_ITRx_SetConfig>
      break;
 80044ee:	e009      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4619      	mov	r1, r3
 80044fa:	4610      	mov	r0, r2
 80044fc:	f000 f943 	bl	8004786 <TIM_ITRx_SetConfig>
      break;
 8004500:	e000      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004502:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	fffeff88 	.word	0xfffeff88

08004524 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a40      	ldr	r2, [pc, #256]	; (800469c <TIM_Base_SetConfig+0x114>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d013      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a6:	d00f      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a3d      	ldr	r2, [pc, #244]	; (80046a0 <TIM_Base_SetConfig+0x118>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00b      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a3c      	ldr	r2, [pc, #240]	; (80046a4 <TIM_Base_SetConfig+0x11c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d007      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a3b      	ldr	r2, [pc, #236]	; (80046a8 <TIM_Base_SetConfig+0x120>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a3a      	ldr	r2, [pc, #232]	; (80046ac <TIM_Base_SetConfig+0x124>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d108      	bne.n	80045da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a2f      	ldr	r2, [pc, #188]	; (800469c <TIM_Base_SetConfig+0x114>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d02b      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e8:	d027      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a2c      	ldr	r2, [pc, #176]	; (80046a0 <TIM_Base_SetConfig+0x118>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d023      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a2b      	ldr	r2, [pc, #172]	; (80046a4 <TIM_Base_SetConfig+0x11c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d01f      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a2a      	ldr	r2, [pc, #168]	; (80046a8 <TIM_Base_SetConfig+0x120>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d01b      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a29      	ldr	r2, [pc, #164]	; (80046ac <TIM_Base_SetConfig+0x124>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d017      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a28      	ldr	r2, [pc, #160]	; (80046b0 <TIM_Base_SetConfig+0x128>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d013      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a27      	ldr	r2, [pc, #156]	; (80046b4 <TIM_Base_SetConfig+0x12c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00f      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a26      	ldr	r2, [pc, #152]	; (80046b8 <TIM_Base_SetConfig+0x130>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00b      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a25      	ldr	r2, [pc, #148]	; (80046bc <TIM_Base_SetConfig+0x134>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d007      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a24      	ldr	r2, [pc, #144]	; (80046c0 <TIM_Base_SetConfig+0x138>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d003      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a23      	ldr	r2, [pc, #140]	; (80046c4 <TIM_Base_SetConfig+0x13c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d108      	bne.n	800464c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	4313      	orrs	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a0a      	ldr	r2, [pc, #40]	; (800469c <TIM_Base_SetConfig+0x114>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d003      	beq.n	8004680 <TIM_Base_SetConfig+0xf8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a0c      	ldr	r2, [pc, #48]	; (80046ac <TIM_Base_SetConfig+0x124>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d103      	bne.n	8004688 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	615a      	str	r2, [r3, #20]
}
 800468e:	bf00      	nop
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40010000 	.word	0x40010000
 80046a0:	40000400 	.word	0x40000400
 80046a4:	40000800 	.word	0x40000800
 80046a8:	40000c00 	.word	0x40000c00
 80046ac:	40010400 	.word	0x40010400
 80046b0:	40014000 	.word	0x40014000
 80046b4:	40014400 	.word	0x40014400
 80046b8:	40014800 	.word	0x40014800
 80046bc:	40001800 	.word	0x40001800
 80046c0:	40001c00 	.word	0x40001c00
 80046c4:	40002000 	.word	0x40002000

080046c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f023 0201 	bic.w	r2, r3, #1
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f023 030a 	bic.w	r3, r3, #10
 8004704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004726:	b480      	push	{r7}
 8004728:	b087      	sub	sp, #28
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	f023 0210 	bic.w	r2, r3, #16
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004750:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	031b      	lsls	r3, r3, #12
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4313      	orrs	r3, r2
 800475a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004762:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	621a      	str	r2, [r3, #32]
}
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004786:	b480      	push	{r7}
 8004788:	b085      	sub	sp, #20
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f043 0307 	orr.w	r3, r3, #7
 80047a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	609a      	str	r2, [r3, #8]
}
 80047b0:	bf00      	nop
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	021a      	lsls	r2, r3, #8
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	431a      	orrs	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	609a      	str	r2, [r3, #8]
}
 80047f0:	bf00      	nop
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004810:	2302      	movs	r3, #2
 8004812:	e06d      	b.n	80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a30      	ldr	r2, [pc, #192]	; (80048fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d004      	beq.n	8004848 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a2f      	ldr	r2, [pc, #188]	; (8004900 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d108      	bne.n	800485a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800484e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004860:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a20      	ldr	r2, [pc, #128]	; (80048fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d022      	beq.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004886:	d01d      	beq.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a1d      	ldr	r2, [pc, #116]	; (8004904 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d018      	beq.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a1c      	ldr	r2, [pc, #112]	; (8004908 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d013      	beq.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1a      	ldr	r2, [pc, #104]	; (800490c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00e      	beq.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a15      	ldr	r2, [pc, #84]	; (8004900 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d009      	beq.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a16      	ldr	r2, [pc, #88]	; (8004910 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d004      	beq.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a15      	ldr	r2, [pc, #84]	; (8004914 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d10c      	bne.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40010000 	.word	0x40010000
 8004900:	40010400 	.word	0x40010400
 8004904:	40000400 	.word	0x40000400
 8004908:	40000800 	.word	0x40000800
 800490c:	40000c00 	.word	0x40000c00
 8004910:	40014000 	.word	0x40014000
 8004914:	40001800 	.word	0x40001800

08004918 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e040      	b.n	80049e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f001 fb00 	bl	8005f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2224      	movs	r2, #36	; 0x24
 8004980:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0201 	bic.w	r2, r2, #1
 8004990:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f8c6 	bl	8004b24 <UART_SetConfig>
 8004998:	4603      	mov	r3, r0
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e022      	b.n	80049e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fb64 	bl	8005078 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 fbeb 	bl	80051bc <UART_CheckIdleState>
 80049e6:	4603      	mov	r3, r0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	4613      	mov	r3, r2
 80049fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	d164      	bne.n	8004ad0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <HAL_UART_Transmit_DMA+0x22>
 8004a0c:	88fb      	ldrh	r3, [r7, #6]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e05d      	b.n	8004ad2 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_UART_Transmit_DMA+0x34>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e056      	b.n	8004ad2 <HAL_UART_Transmit_DMA+0xe2>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	88fa      	ldrh	r2, [r7, #6]
 8004a36:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	88fa      	ldrh	r2, [r7, #6]
 8004a3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2221      	movs	r2, #33	; 0x21
 8004a4c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d02a      	beq.n	8004aac <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a5a:	4a20      	ldr	r2, [pc, #128]	; (8004adc <HAL_UART_Transmit_DMA+0xec>)
 8004a5c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a62:	4a1f      	ldr	r2, [pc, #124]	; (8004ae0 <HAL_UART_Transmit_DMA+0xf0>)
 8004a64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a6a:	4a1e      	ldr	r2, [pc, #120]	; (8004ae4 <HAL_UART_Transmit_DMA+0xf4>)
 8004a6c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a72:	2200      	movs	r2, #0
 8004a74:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7e:	4619      	mov	r1, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3328      	adds	r3, #40	; 0x28
 8004a86:	461a      	mov	r2, r3
 8004a88:	88fb      	ldrh	r3, [r7, #6]
 8004a8a:	f7fd fd91 	bl	80025b0 <HAL_DMA_Start_IT>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00b      	beq.n	8004aac <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2210      	movs	r2, #16
 8004a98:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e012      	b.n	8004ad2 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2240      	movs	r2, #64	; 0x40
 8004ab2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004aca:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	e000      	b.n	8004ad2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8004ad0:	2302      	movs	r3, #2
  }
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	080053a7 	.word	0x080053a7
 8004ae0:	080053f7 	.word	0x080053f7
 8004ae4:	08005413 	.word	0x08005413

08004ae8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	4bb1      	ldr	r3, [pc, #708]	; (8004e18 <UART_SetConfig+0x2f4>)
 8004b54:	4013      	ands	r3, r2
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6812      	ldr	r2, [r2, #0]
 8004b5a:	6939      	ldr	r1, [r7, #16]
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a9f      	ldr	r2, [pc, #636]	; (8004e1c <UART_SetConfig+0x2f8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d121      	bne.n	8004be8 <UART_SetConfig+0xc4>
 8004ba4:	4b9e      	ldr	r3, [pc, #632]	; (8004e20 <UART_SetConfig+0x2fc>)
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d816      	bhi.n	8004be0 <UART_SetConfig+0xbc>
 8004bb2:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <UART_SetConfig+0x94>)
 8004bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb8:	08004bc9 	.word	0x08004bc9
 8004bbc:	08004bd5 	.word	0x08004bd5
 8004bc0:	08004bcf 	.word	0x08004bcf
 8004bc4:	08004bdb 	.word	0x08004bdb
 8004bc8:	2301      	movs	r3, #1
 8004bca:	77fb      	strb	r3, [r7, #31]
 8004bcc:	e151      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	77fb      	strb	r3, [r7, #31]
 8004bd2:	e14e      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004bd4:	2304      	movs	r3, #4
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e14b      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004bda:	2308      	movs	r3, #8
 8004bdc:	77fb      	strb	r3, [r7, #31]
 8004bde:	e148      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004be0:	2310      	movs	r3, #16
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	bf00      	nop
 8004be6:	e144      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a8d      	ldr	r2, [pc, #564]	; (8004e24 <UART_SetConfig+0x300>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d134      	bne.n	8004c5c <UART_SetConfig+0x138>
 8004bf2:	4b8b      	ldr	r3, [pc, #556]	; (8004e20 <UART_SetConfig+0x2fc>)
 8004bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf8:	f003 030c 	and.w	r3, r3, #12
 8004bfc:	2b0c      	cmp	r3, #12
 8004bfe:	d829      	bhi.n	8004c54 <UART_SetConfig+0x130>
 8004c00:	a201      	add	r2, pc, #4	; (adr r2, 8004c08 <UART_SetConfig+0xe4>)
 8004c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c06:	bf00      	nop
 8004c08:	08004c3d 	.word	0x08004c3d
 8004c0c:	08004c55 	.word	0x08004c55
 8004c10:	08004c55 	.word	0x08004c55
 8004c14:	08004c55 	.word	0x08004c55
 8004c18:	08004c49 	.word	0x08004c49
 8004c1c:	08004c55 	.word	0x08004c55
 8004c20:	08004c55 	.word	0x08004c55
 8004c24:	08004c55 	.word	0x08004c55
 8004c28:	08004c43 	.word	0x08004c43
 8004c2c:	08004c55 	.word	0x08004c55
 8004c30:	08004c55 	.word	0x08004c55
 8004c34:	08004c55 	.word	0x08004c55
 8004c38:	08004c4f 	.word	0x08004c4f
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	77fb      	strb	r3, [r7, #31]
 8004c40:	e117      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004c42:	2302      	movs	r3, #2
 8004c44:	77fb      	strb	r3, [r7, #31]
 8004c46:	e114      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004c48:	2304      	movs	r3, #4
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e111      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004c4e:	2308      	movs	r3, #8
 8004c50:	77fb      	strb	r3, [r7, #31]
 8004c52:	e10e      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004c54:	2310      	movs	r3, #16
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	bf00      	nop
 8004c5a:	e10a      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a71      	ldr	r2, [pc, #452]	; (8004e28 <UART_SetConfig+0x304>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d120      	bne.n	8004ca8 <UART_SetConfig+0x184>
 8004c66:	4b6e      	ldr	r3, [pc, #440]	; (8004e20 <UART_SetConfig+0x2fc>)
 8004c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d00f      	beq.n	8004c94 <UART_SetConfig+0x170>
 8004c74:	2b10      	cmp	r3, #16
 8004c76:	d802      	bhi.n	8004c7e <UART_SetConfig+0x15a>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <UART_SetConfig+0x164>
 8004c7c:	e010      	b.n	8004ca0 <UART_SetConfig+0x17c>
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	d005      	beq.n	8004c8e <UART_SetConfig+0x16a>
 8004c82:	2b30      	cmp	r3, #48	; 0x30
 8004c84:	d009      	beq.n	8004c9a <UART_SetConfig+0x176>
 8004c86:	e00b      	b.n	8004ca0 <UART_SetConfig+0x17c>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	77fb      	strb	r3, [r7, #31]
 8004c8c:	e0f1      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	77fb      	strb	r3, [r7, #31]
 8004c92:	e0ee      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004c94:	2304      	movs	r3, #4
 8004c96:	77fb      	strb	r3, [r7, #31]
 8004c98:	e0eb      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004c9a:	2308      	movs	r3, #8
 8004c9c:	77fb      	strb	r3, [r7, #31]
 8004c9e:	e0e8      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004ca0:	2310      	movs	r3, #16
 8004ca2:	77fb      	strb	r3, [r7, #31]
 8004ca4:	bf00      	nop
 8004ca6:	e0e4      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a5f      	ldr	r2, [pc, #380]	; (8004e2c <UART_SetConfig+0x308>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d120      	bne.n	8004cf4 <UART_SetConfig+0x1d0>
 8004cb2:	4b5b      	ldr	r3, [pc, #364]	; (8004e20 <UART_SetConfig+0x2fc>)
 8004cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cbc:	2b40      	cmp	r3, #64	; 0x40
 8004cbe:	d00f      	beq.n	8004ce0 <UART_SetConfig+0x1bc>
 8004cc0:	2b40      	cmp	r3, #64	; 0x40
 8004cc2:	d802      	bhi.n	8004cca <UART_SetConfig+0x1a6>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <UART_SetConfig+0x1b0>
 8004cc8:	e010      	b.n	8004cec <UART_SetConfig+0x1c8>
 8004cca:	2b80      	cmp	r3, #128	; 0x80
 8004ccc:	d005      	beq.n	8004cda <UART_SetConfig+0x1b6>
 8004cce:	2bc0      	cmp	r3, #192	; 0xc0
 8004cd0:	d009      	beq.n	8004ce6 <UART_SetConfig+0x1c2>
 8004cd2:	e00b      	b.n	8004cec <UART_SetConfig+0x1c8>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e0cb      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	77fb      	strb	r3, [r7, #31]
 8004cde:	e0c8      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004ce0:	2304      	movs	r3, #4
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e0c5      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004ce6:	2308      	movs	r3, #8
 8004ce8:	77fb      	strb	r3, [r7, #31]
 8004cea:	e0c2      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004cec:	2310      	movs	r3, #16
 8004cee:	77fb      	strb	r3, [r7, #31]
 8004cf0:	bf00      	nop
 8004cf2:	e0be      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a4d      	ldr	r2, [pc, #308]	; (8004e30 <UART_SetConfig+0x30c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d124      	bne.n	8004d48 <UART_SetConfig+0x224>
 8004cfe:	4b48      	ldr	r3, [pc, #288]	; (8004e20 <UART_SetConfig+0x2fc>)
 8004d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d0c:	d012      	beq.n	8004d34 <UART_SetConfig+0x210>
 8004d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d12:	d802      	bhi.n	8004d1a <UART_SetConfig+0x1f6>
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d007      	beq.n	8004d28 <UART_SetConfig+0x204>
 8004d18:	e012      	b.n	8004d40 <UART_SetConfig+0x21c>
 8004d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d1e:	d006      	beq.n	8004d2e <UART_SetConfig+0x20a>
 8004d20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d24:	d009      	beq.n	8004d3a <UART_SetConfig+0x216>
 8004d26:	e00b      	b.n	8004d40 <UART_SetConfig+0x21c>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e0a1      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	77fb      	strb	r3, [r7, #31]
 8004d32:	e09e      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004d34:	2304      	movs	r3, #4
 8004d36:	77fb      	strb	r3, [r7, #31]
 8004d38:	e09b      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004d3a:	2308      	movs	r3, #8
 8004d3c:	77fb      	strb	r3, [r7, #31]
 8004d3e:	e098      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004d40:	2310      	movs	r3, #16
 8004d42:	77fb      	strb	r3, [r7, #31]
 8004d44:	bf00      	nop
 8004d46:	e094      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a39      	ldr	r2, [pc, #228]	; (8004e34 <UART_SetConfig+0x310>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d124      	bne.n	8004d9c <UART_SetConfig+0x278>
 8004d52:	4b33      	ldr	r3, [pc, #204]	; (8004e20 <UART_SetConfig+0x2fc>)
 8004d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d60:	d012      	beq.n	8004d88 <UART_SetConfig+0x264>
 8004d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d66:	d802      	bhi.n	8004d6e <UART_SetConfig+0x24a>
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d007      	beq.n	8004d7c <UART_SetConfig+0x258>
 8004d6c:	e012      	b.n	8004d94 <UART_SetConfig+0x270>
 8004d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d72:	d006      	beq.n	8004d82 <UART_SetConfig+0x25e>
 8004d74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d78:	d009      	beq.n	8004d8e <UART_SetConfig+0x26a>
 8004d7a:	e00b      	b.n	8004d94 <UART_SetConfig+0x270>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	77fb      	strb	r3, [r7, #31]
 8004d80:	e077      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004d82:	2302      	movs	r3, #2
 8004d84:	77fb      	strb	r3, [r7, #31]
 8004d86:	e074      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004d88:	2304      	movs	r3, #4
 8004d8a:	77fb      	strb	r3, [r7, #31]
 8004d8c:	e071      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004d8e:	2308      	movs	r3, #8
 8004d90:	77fb      	strb	r3, [r7, #31]
 8004d92:	e06e      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004d94:	2310      	movs	r3, #16
 8004d96:	77fb      	strb	r3, [r7, #31]
 8004d98:	bf00      	nop
 8004d9a:	e06a      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a25      	ldr	r2, [pc, #148]	; (8004e38 <UART_SetConfig+0x314>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d124      	bne.n	8004df0 <UART_SetConfig+0x2cc>
 8004da6:	4b1e      	ldr	r3, [pc, #120]	; (8004e20 <UART_SetConfig+0x2fc>)
 8004da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dac:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db4:	d012      	beq.n	8004ddc <UART_SetConfig+0x2b8>
 8004db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dba:	d802      	bhi.n	8004dc2 <UART_SetConfig+0x29e>
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d007      	beq.n	8004dd0 <UART_SetConfig+0x2ac>
 8004dc0:	e012      	b.n	8004de8 <UART_SetConfig+0x2c4>
 8004dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc6:	d006      	beq.n	8004dd6 <UART_SetConfig+0x2b2>
 8004dc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dcc:	d009      	beq.n	8004de2 <UART_SetConfig+0x2be>
 8004dce:	e00b      	b.n	8004de8 <UART_SetConfig+0x2c4>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	77fb      	strb	r3, [r7, #31]
 8004dd4:	e04d      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	77fb      	strb	r3, [r7, #31]
 8004dda:	e04a      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004ddc:	2304      	movs	r3, #4
 8004dde:	77fb      	strb	r3, [r7, #31]
 8004de0:	e047      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004de2:	2308      	movs	r3, #8
 8004de4:	77fb      	strb	r3, [r7, #31]
 8004de6:	e044      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004de8:	2310      	movs	r3, #16
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	bf00      	nop
 8004dee:	e040      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a11      	ldr	r2, [pc, #68]	; (8004e3c <UART_SetConfig+0x318>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d139      	bne.n	8004e6e <UART_SetConfig+0x34a>
 8004dfa:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <UART_SetConfig+0x2fc>)
 8004dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e08:	d027      	beq.n	8004e5a <UART_SetConfig+0x336>
 8004e0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e0e:	d817      	bhi.n	8004e40 <UART_SetConfig+0x31c>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01c      	beq.n	8004e4e <UART_SetConfig+0x32a>
 8004e14:	e027      	b.n	8004e66 <UART_SetConfig+0x342>
 8004e16:	bf00      	nop
 8004e18:	efff69f3 	.word	0xefff69f3
 8004e1c:	40011000 	.word	0x40011000
 8004e20:	40023800 	.word	0x40023800
 8004e24:	40004400 	.word	0x40004400
 8004e28:	40004800 	.word	0x40004800
 8004e2c:	40004c00 	.word	0x40004c00
 8004e30:	40005000 	.word	0x40005000
 8004e34:	40011400 	.word	0x40011400
 8004e38:	40007800 	.word	0x40007800
 8004e3c:	40007c00 	.word	0x40007c00
 8004e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e44:	d006      	beq.n	8004e54 <UART_SetConfig+0x330>
 8004e46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e4a:	d009      	beq.n	8004e60 <UART_SetConfig+0x33c>
 8004e4c:	e00b      	b.n	8004e66 <UART_SetConfig+0x342>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	77fb      	strb	r3, [r7, #31]
 8004e52:	e00e      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004e54:	2302      	movs	r3, #2
 8004e56:	77fb      	strb	r3, [r7, #31]
 8004e58:	e00b      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004e5a:	2304      	movs	r3, #4
 8004e5c:	77fb      	strb	r3, [r7, #31]
 8004e5e:	e008      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004e60:	2308      	movs	r3, #8
 8004e62:	77fb      	strb	r3, [r7, #31]
 8004e64:	e005      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004e66:	2310      	movs	r3, #16
 8004e68:	77fb      	strb	r3, [r7, #31]
 8004e6a:	bf00      	nop
 8004e6c:	e001      	b.n	8004e72 <UART_SetConfig+0x34e>
 8004e6e:	2310      	movs	r3, #16
 8004e70:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7a:	d17f      	bne.n	8004f7c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004e7c:	7ffb      	ldrb	r3, [r7, #31]
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d85c      	bhi.n	8004f3c <UART_SetConfig+0x418>
 8004e82:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <UART_SetConfig+0x364>)
 8004e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e88:	08004ead 	.word	0x08004ead
 8004e8c:	08004ecd 	.word	0x08004ecd
 8004e90:	08004eed 	.word	0x08004eed
 8004e94:	08004f3d 	.word	0x08004f3d
 8004e98:	08004f05 	.word	0x08004f05
 8004e9c:	08004f3d 	.word	0x08004f3d
 8004ea0:	08004f3d 	.word	0x08004f3d
 8004ea4:	08004f3d 	.word	0x08004f3d
 8004ea8:	08004f25 	.word	0x08004f25
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eac:	f7fe fcbc 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8004eb0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	005a      	lsls	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	085b      	lsrs	r3, r3, #1
 8004ebc:	441a      	add	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	61bb      	str	r3, [r7, #24]
        break;
 8004eca:	e03a      	b.n	8004f42 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ecc:	f7fe fcc0 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 8004ed0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	005a      	lsls	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	085b      	lsrs	r3, r3, #1
 8004edc:	441a      	add	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	61bb      	str	r3, [r7, #24]
        break;
 8004eea:	e02a      	b.n	8004f42 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	085a      	lsrs	r2, r3, #1
 8004ef2:	4b5f      	ldr	r3, [pc, #380]	; (8005070 <UART_SetConfig+0x54c>)
 8004ef4:	4413      	add	r3, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6852      	ldr	r2, [r2, #4]
 8004efa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	61bb      	str	r3, [r7, #24]
        break;
 8004f02:	e01e      	b.n	8004f42 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f04:	f7fe fbac 	bl	8003660 <HAL_RCC_GetSysClockFreq>
 8004f08:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	005a      	lsls	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	085b      	lsrs	r3, r3, #1
 8004f14:	441a      	add	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	61bb      	str	r3, [r7, #24]
        break;
 8004f22:	e00e      	b.n	8004f42 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	085b      	lsrs	r3, r3, #1
 8004f2a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	61bb      	str	r3, [r7, #24]
        break;
 8004f3a:	e002      	b.n	8004f42 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	75fb      	strb	r3, [r7, #23]
        break;
 8004f40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	2b0f      	cmp	r3, #15
 8004f46:	d916      	bls.n	8004f76 <UART_SetConfig+0x452>
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f4e:	d212      	bcs.n	8004f76 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	f023 030f 	bic.w	r3, r3, #15
 8004f58:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	085b      	lsrs	r3, r3, #1
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	897b      	ldrh	r3, [r7, #10]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	897a      	ldrh	r2, [r7, #10]
 8004f72:	60da      	str	r2, [r3, #12]
 8004f74:	e070      	b.n	8005058 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	75fb      	strb	r3, [r7, #23]
 8004f7a:	e06d      	b.n	8005058 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004f7c:	7ffb      	ldrb	r3, [r7, #31]
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d859      	bhi.n	8005036 <UART_SetConfig+0x512>
 8004f82:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <UART_SetConfig+0x464>)
 8004f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f88:	08004fad 	.word	0x08004fad
 8004f8c:	08004fcb 	.word	0x08004fcb
 8004f90:	08004fe9 	.word	0x08004fe9
 8004f94:	08005037 	.word	0x08005037
 8004f98:	08005001 	.word	0x08005001
 8004f9c:	08005037 	.word	0x08005037
 8004fa0:	08005037 	.word	0x08005037
 8004fa4:	08005037 	.word	0x08005037
 8004fa8:	0800501f 	.word	0x0800501f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fac:	f7fe fc3c 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8004fb0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	085a      	lsrs	r2, r3, #1
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	441a      	add	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	61bb      	str	r3, [r7, #24]
        break;
 8004fc8:	e038      	b.n	800503c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fca:	f7fe fc41 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 8004fce:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	085a      	lsrs	r2, r3, #1
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	441a      	add	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	61bb      	str	r3, [r7, #24]
        break;
 8004fe6:	e029      	b.n	800503c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	085a      	lsrs	r2, r3, #1
 8004fee:	4b21      	ldr	r3, [pc, #132]	; (8005074 <UART_SetConfig+0x550>)
 8004ff0:	4413      	add	r3, r2
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6852      	ldr	r2, [r2, #4]
 8004ff6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	61bb      	str	r3, [r7, #24]
        break;
 8004ffe:	e01d      	b.n	800503c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005000:	f7fe fb2e 	bl	8003660 <HAL_RCC_GetSysClockFreq>
 8005004:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	085a      	lsrs	r2, r3, #1
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	441a      	add	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	fbb2 f3f3 	udiv	r3, r2, r3
 8005018:	b29b      	uxth	r3, r3
 800501a:	61bb      	str	r3, [r7, #24]
        break;
 800501c:	e00e      	b.n	800503c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	085b      	lsrs	r3, r3, #1
 8005024:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005030:	b29b      	uxth	r3, r3
 8005032:	61bb      	str	r3, [r7, #24]
        break;
 8005034:	e002      	b.n	800503c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	75fb      	strb	r3, [r7, #23]
        break;
 800503a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	2b0f      	cmp	r3, #15
 8005040:	d908      	bls.n	8005054 <UART_SetConfig+0x530>
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005048:	d204      	bcs.n	8005054 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	60da      	str	r2, [r3, #12]
 8005052:	e001      	b.n	8005058 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005064:	7dfb      	ldrb	r3, [r7, #23]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3720      	adds	r7, #32
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	01e84800 	.word	0x01e84800
 8005074:	00f42400 	.word	0x00f42400

08005078 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	f003 0310 	and.w	r3, r3, #16
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01a      	beq.n	800518e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005176:	d10a      	bne.n	800518e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	605a      	str	r2, [r3, #4]
  }
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80051ca:	f7fb fc23 	bl	8000a14 <HAL_GetTick>
 80051ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d10e      	bne.n	80051fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f82a 	bl	8005246 <UART_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e020      	b.n	800523e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b04      	cmp	r3, #4
 8005208:	d10e      	bne.n	8005228 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800520a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f814 	bl	8005246 <UART_WaitOnFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e00a      	b.n	800523e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2220      	movs	r2, #32
 800522c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2220      	movs	r2, #32
 8005232:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	603b      	str	r3, [r7, #0]
 8005252:	4613      	mov	r3, r2
 8005254:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005256:	e05d      	b.n	8005314 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525e:	d059      	beq.n	8005314 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005260:	f7fb fbd8 	bl	8000a14 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	429a      	cmp	r2, r3
 800526e:	d302      	bcc.n	8005276 <UART_WaitOnFlagUntilTimeout+0x30>
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d11b      	bne.n	80052ae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005284:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0201 	bic.w	r2, r2, #1
 8005294:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e042      	b.n	8005334 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d02b      	beq.n	8005314 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ca:	d123      	bne.n	8005314 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052d4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0201 	bic.w	r2, r2, #1
 80052f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2220      	movs	r2, #32
 80052fa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2220      	movs	r2, #32
 8005300:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2220      	movs	r2, #32
 8005306:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e00f      	b.n	8005334 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	69da      	ldr	r2, [r3, #28]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4013      	ands	r3, r2
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	429a      	cmp	r2, r3
 8005322:	bf0c      	ite	eq
 8005324:	2301      	moveq	r3, #1
 8005326:	2300      	movne	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	429a      	cmp	r2, r3
 8005330:	d092      	beq.n	8005258 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005352:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2220      	movs	r2, #32
 8005358:	675a      	str	r2, [r3, #116]	; 0x74
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800537c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0201 	bic.w	r2, r2, #1
 800538c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	661a      	str	r2, [r3, #96]	; 0x60
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053bc:	d014      	beq.n	80053e8 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053d4:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053e4:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053e6:	e002      	b.n	80053ee <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f7ff fb7d 	bl	8004ae8 <HAL_UART_TxCpltCallback>
}
 80053ee:	bf00      	nop
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b084      	sub	sp, #16
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f7ff fb79 	bl	8004afc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800540a:	bf00      	nop
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b086      	sub	sp, #24
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005424:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800542a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005436:	2b80      	cmp	r3, #128	; 0x80
 8005438:	d109      	bne.n	800544e <UART_DMAError+0x3c>
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b21      	cmp	r3, #33	; 0x21
 800543e:	d106      	bne.n	800544e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2200      	movs	r2, #0
 8005444:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005448:	6978      	ldr	r0, [r7, #20]
 800544a:	f7ff ff77 	bl	800533c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005458:	2b40      	cmp	r3, #64	; 0x40
 800545a:	d109      	bne.n	8005470 <UART_DMAError+0x5e>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b22      	cmp	r3, #34	; 0x22
 8005460:	d106      	bne.n	8005470 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2200      	movs	r2, #0
 8005466:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800546a:	6978      	ldr	r0, [r7, #20]
 800546c:	f7ff ff7b 	bl	8005366 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005474:	f043 0210 	orr.w	r2, r3, #16
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800547c:	6978      	ldr	r0, [r7, #20]
 800547e:	f7ff fb47 	bl	8004b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005482:	bf00      	nop
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <control_motors>:
/*La funcion va a manejar la info de los motores
 * y el status (variables del main), y se va a encargar de controlar
 * los motores y actualizar la misma */

void control_motors(int throttle,int direction,int brake)
{
 800548c:	b590      	push	{r4, r7, lr}
 800548e:	b08b      	sub	sp, #44	; 0x2c
 8005490:	af04      	add	r7, sp, #16
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
	/*control_nodos es una variable se encarga de enviar la controlword a cada nodo, el contador va a controlar la data a pedir de los nodos*/
	static uint8_t nodo=MOTOR1,control_nodos[2],contador[2];
	static int tickstart;

	uint8_t NMT[2];
	NMT[1]=0;
 8005498:	2300      	movs	r3, #0
 800549a:	757b      	strb	r3, [r7, #21]
	//
	if(FLAG_CAN==1)
 800549c:	4ba7      	ldr	r3, [pc, #668]	; (800573c <control_motors+0x2b0>)
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d10e      	bne.n	80054c2 <control_motors+0x36>
	{
	analize_CAN_Rx(pRxHeader,buffer_Rx_msg);
 80054a4:	4ba6      	ldr	r3, [pc, #664]	; (8005740 <control_motors+0x2b4>)
 80054a6:	4aa7      	ldr	r2, [pc, #668]	; (8005744 <control_motors+0x2b8>)
 80054a8:	9203      	str	r2, [sp, #12]
 80054aa:	466c      	mov	r4, sp
 80054ac:	f103 0210 	add.w	r2, r3, #16
 80054b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80054b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80054b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054b8:	f7fb f8d6 	bl	8000668 <analize_CAN_Rx>
	FLAG_CAN=0;			//bajo el flag
 80054bc:	4b9f      	ldr	r3, [pc, #636]	; (800573c <control_motors+0x2b0>)
 80054be:	2200      	movs	r2, #0
 80054c0:	801a      	strh	r2, [r3, #0]
	}

	// tiempos
	/* debo seleccionar alternadamente el motor a controlar, arranco la variable en 155 para
	 * saber que es la primera vez que la inicio y despues la alterno entre los nodos*/
	switch (status[nodo-1])
 80054c2:	4ba1      	ldr	r3, [pc, #644]	; (8005748 <control_motors+0x2bc>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	4aa0      	ldr	r2, [pc, #640]	; (800574c <control_motors+0x2c0>)
 80054ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	f200 80cf 	bhi.w	8005672 <control_motors+0x1e6>
 80054d4:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <control_motors+0x50>)
 80054d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054da:	bf00      	nop
 80054dc:	080054f1 	.word	0x080054f1
 80054e0:	08005673 	.word	0x08005673
 80054e4:	08005523 	.word	0x08005523
 80054e8:	08005585 	.word	0x08005585
 80054ec:	0800564b 	.word	0x0800564b
	{
		case(INITIALIZATION):		// configuro ambos nodos y arranco mi base de tiempo.
			control_nodos[0]=NOTSEND;
 80054f0:	4b97      	ldr	r3, [pc, #604]	; (8005750 <control_motors+0x2c4>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
			control_nodos[1]=NOTSEND;
 80054f6:	4b96      	ldr	r3, [pc, #600]	; (8005750 <control_motors+0x2c4>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	705a      	strb	r2, [r3, #1]
			contador[0]=1;
 80054fc:	4b95      	ldr	r3, [pc, #596]	; (8005754 <control_motors+0x2c8>)
 80054fe:	2201      	movs	r2, #1
 8005500:	701a      	strb	r2, [r3, #0]
			contador[1]=1;
 8005502:	4b94      	ldr	r3, [pc, #592]	; (8005754 <control_motors+0x2c8>)
 8005504:	2201      	movs	r2, #1
 8005506:	705a      	strb	r2, [r3, #1]
			status[0]=WFBOOTUP;
 8005508:	4b90      	ldr	r3, [pc, #576]	; (800574c <control_motors+0x2c0>)
 800550a:	2201      	movs	r2, #1
 800550c:	801a      	strh	r2, [r3, #0]
			status[1]=WFBOOTUP;
 800550e:	4b8f      	ldr	r3, [pc, #572]	; (800574c <control_motors+0x2c0>)
 8005510:	2201      	movs	r2, #1
 8005512:	805a      	strh	r2, [r3, #2]
			tickstart= HAL_GetTick();
 8005514:	f7fb fa7e 	bl	8000a14 <HAL_GetTick>
 8005518:	4603      	mov	r3, r0
 800551a:	461a      	mov	r2, r3
 800551c:	4b8e      	ldr	r3, [pc, #568]	; (8005758 <control_motors+0x2cc>)
 800551e:	601a      	str	r2, [r3, #0]
			break;
 8005520:	e0a7      	b.n	8005672 <control_motors+0x1e6>
				//UN VEZ QUE LLEGA MSJ BOOTUP
				break;

		case(PREOPERATIONAL):

				if (status[0]==PREOPERATIONAL && status[1]==PREOPERATIONAL)		// Si estan ambos en operational
 8005522:	4b8a      	ldr	r3, [pc, #552]	; (800574c <control_motors+0x2c0>)
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	2b02      	cmp	r3, #2
 8005528:	f040 80a0 	bne.w	800566c <control_motors+0x1e0>
 800552c:	4b87      	ldr	r3, [pc, #540]	; (800574c <control_motors+0x2c0>)
 800552e:	885b      	ldrh	r3, [r3, #2]
 8005530:	2b02      	cmp	r3, #2
 8005532:	f040 809b 	bne.w	800566c <control_motors+0x1e0>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);		// prendo led verde
 8005536:	2201      	movs	r2, #1
 8005538:	2101      	movs	r1, #1
 800553a:	4888      	ldr	r0, [pc, #544]	; (800575c <control_motors+0x2d0>)
 800553c:	f7fd fcc2 	bl	8002ec4 <HAL_GPIO_WritePin>

					if(FLAG_OP==1)
 8005540:	4b87      	ldr	r3, [pc, #540]	; (8005760 <control_motors+0x2d4>)
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	2b01      	cmp	r3, #1
 8005546:	f040 8091 	bne.w	800566c <control_motors+0x1e0>
					{
						NMT[0]=0x01;		        //Pasar a operacional
 800554a:	2301      	movs	r3, #1
 800554c:	753b      	strb	r3, [r7, #20]

						if(can1_Tx(0x000,NMT,2)!=HAL_OK)
 800554e:	f107 0314 	add.w	r3, r7, #20
 8005552:	2202      	movs	r2, #2
 8005554:	4619      	mov	r1, r3
 8005556:	2000      	movs	r0, #0
 8005558:	f7fb f9d6 	bl	8000908 <can1_Tx>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <control_motors+0xdc>
						{
							Error_Handler();
 8005562:	f000 fbd5 	bl	8005d10 <Error_Handler>
 8005566:	e0e6      	b.n	8005736 <control_motors+0x2aa>
							return;
						}
						HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);				// enciendo luz azul en caso operacional
 8005568:	2180      	movs	r1, #128	; 0x80
 800556a:	487c      	ldr	r0, [pc, #496]	; (800575c <control_motors+0x2d0>)
 800556c:	f7fd fcc3 	bl	8002ef6 <HAL_GPIO_TogglePin>
						status[0]=OPERATIONAL;
 8005570:	4b76      	ldr	r3, [pc, #472]	; (800574c <control_motors+0x2c0>)
 8005572:	2203      	movs	r2, #3
 8005574:	801a      	strh	r2, [r3, #0]
						status[1]=OPERATIONAL;
 8005576:	4b75      	ldr	r3, [pc, #468]	; (800574c <control_motors+0x2c0>)
 8005578:	2203      	movs	r2, #3
 800557a:	805a      	strh	r2, [r3, #2]
						FLAG_OP=0;											// UNA VEZ ENVIADO EL MSJ NMT BAJO EL FLAG
 800557c:	4b78      	ldr	r3, [pc, #480]	; (8005760 <control_motors+0x2d4>)
 800557e:	2200      	movs	r2, #0
 8005580:	801a      	strh	r2, [r3, #0]
					}

			}

			break;
 8005582:	e073      	b.n	800566c <control_motors+0x1e0>
	/*Caso OPERATIONAL y Ctrl WORD enviada:*/
		case(OPERATIONAL):
					if(control_nodos[nodo-1]==NOTSEND)		// Pulso de pasar de preoperational a operational
 8005584:	4b70      	ldr	r3, [pc, #448]	; (8005748 <control_motors+0x2bc>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	3b01      	subs	r3, #1
 800558a:	4a71      	ldr	r2, [pc, #452]	; (8005750 <control_motors+0x2c4>)
 800558c:	5cd3      	ldrb	r3, [r2, r3]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d144      	bne.n	800561c <control_motors+0x190>
					{
						if( (HAL_GetTick()-tickstart>freq) )
 8005592:	f7fb fa3f 	bl	8000a14 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	4b6f      	ldr	r3, [pc, #444]	; (8005758 <control_motors+0x2cc>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	4a71      	ldr	r2, [pc, #452]	; (8005764 <control_motors+0x2d8>)
 80055a0:	7812      	ldrb	r2, [r2, #0]
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d90f      	bls.n	80055c6 <control_motors+0x13a>
						{
						if(send_ctrlwrd_1(nodo)== HAL_OK)
 80055a6:	4b68      	ldr	r3, [pc, #416]	; (8005748 <control_motors+0x2bc>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fb f805 	bl	80005bc <send_ctrlwrd_1>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d12a      	bne.n	800560e <control_motors+0x182>
							control_nodos[nodo-1]=SEMI_SEND;
 80055b8:	4b63      	ldr	r3, [pc, #396]	; (8005748 <control_motors+0x2bc>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	3b01      	subs	r3, #1
 80055be:	4a64      	ldr	r2, [pc, #400]	; (8005750 <control_motors+0x2c4>)
 80055c0:	2102      	movs	r1, #2
 80055c2:	54d1      	strb	r1, [r2, r3]
 80055c4:	e023      	b.n	800560e <control_motors+0x182>
					}
					else if(control_nodos[nodo-1]==SEMI_SEND)
 80055c6:	4b60      	ldr	r3, [pc, #384]	; (8005748 <control_motors+0x2bc>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	4a60      	ldr	r2, [pc, #384]	; (8005750 <control_motors+0x2c4>)
 80055ce:	5cd3      	ldrb	r3, [r2, r3]
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d10f      	bne.n	80055f4 <control_motors+0x168>
					{
						if(send_ctrlword_2(nodo)==HAL_OK)
 80055d4:	4b5c      	ldr	r3, [pc, #368]	; (8005748 <control_motors+0x2bc>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fb f819 	bl	8000612 <send_ctrlword_2>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d113      	bne.n	800560e <control_motors+0x182>
							control_nodos[nodo-1]=SEND;
 80055e6:	4b58      	ldr	r3, [pc, #352]	; (8005748 <control_motors+0x2bc>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	4a58      	ldr	r2, [pc, #352]	; (8005750 <control_motors+0x2c4>)
 80055ee:	2101      	movs	r1, #1
 80055f0:	54d1      	strb	r1, [r2, r3]
 80055f2:	e00c      	b.n	800560e <control_motors+0x182>
					}
					else if(FLAG_OP==1)
 80055f4:	4b5a      	ldr	r3, [pc, #360]	; (8005760 <control_motors+0x2d4>)
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d108      	bne.n	800560e <control_motors+0x182>
					{
						status[0]=STOPPED;
 80055fc:	4b53      	ldr	r3, [pc, #332]	; (800574c <control_motors+0x2c0>)
 80055fe:	2204      	movs	r2, #4
 8005600:	801a      	strh	r2, [r3, #0]
						status[1]=STOPPED;
 8005602:	4b52      	ldr	r3, [pc, #328]	; (800574c <control_motors+0x2c0>)
 8005604:	2204      	movs	r2, #4
 8005606:	805a      	strh	r2, [r3, #2]
						FLAG_OP=0;
 8005608:	4b55      	ldr	r3, [pc, #340]	; (8005760 <control_motors+0x2d4>)
 800560a:	2200      	movs	r2, #0
 800560c:	801a      	strh	r2, [r3, #0]
					}
						tickstart=HAL_GetTick();
 800560e:	f7fb fa01 	bl	8000a14 <HAL_GetTick>
 8005612:	4603      	mov	r3, r0
 8005614:	461a      	mov	r2, r3
 8005616:	4b50      	ldr	r3, [pc, #320]	; (8005758 <control_motors+0x2cc>)
 8005618:	601a      	str	r2, [r3, #0]
					else if (cycles==5)
					{
						run_motor_n(nodo,throttle,status[nodo-1]);
						cycles++;
					}
					break;
 800561a:	e029      	b.n	8005670 <control_motors+0x1e4>
					else if (cycles==5)
 800561c:	4b52      	ldr	r3, [pc, #328]	; (8005768 <control_motors+0x2dc>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b05      	cmp	r3, #5
 8005622:	d125      	bne.n	8005670 <control_motors+0x1e4>
						run_motor_n(nodo,throttle,status[nodo-1]);
 8005624:	4b48      	ldr	r3, [pc, #288]	; (8005748 <control_motors+0x2bc>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	b298      	uxth	r0, r3
 800562a:	68f9      	ldr	r1, [r7, #12]
 800562c:	4b46      	ldr	r3, [pc, #280]	; (8005748 <control_motors+0x2bc>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	3b01      	subs	r3, #1
 8005632:	4a46      	ldr	r2, [pc, #280]	; (800574c <control_motors+0x2c0>)
 8005634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005638:	461a      	mov	r2, r3
 800563a:	f7fa ff7d 	bl	8000538 <run_motor_n>
						cycles++;
 800563e:	4b4a      	ldr	r3, [pc, #296]	; (8005768 <control_motors+0x2dc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3301      	adds	r3, #1
 8005644:	4a48      	ldr	r2, [pc, #288]	; (8005768 <control_motors+0x2dc>)
 8005646:	6013      	str	r3, [r2, #0]
					break;
 8005648:	e012      	b.n	8005670 <control_motors+0x1e4>

		case(STOPPED):
				control_nodos[0]=NOTSEND;
 800564a:	4b41      	ldr	r3, [pc, #260]	; (8005750 <control_motors+0x2c4>)
 800564c:	2200      	movs	r2, #0
 800564e:	701a      	strb	r2, [r3, #0]
				control_nodos[1]=NOTSEND;
 8005650:	4b3f      	ldr	r3, [pc, #252]	; (8005750 <control_motors+0x2c4>)
 8005652:	2200      	movs	r2, #0
 8005654:	705a      	strb	r2, [r3, #1]
				status[0]=PREOPERATIONAL;
 8005656:	4b3d      	ldr	r3, [pc, #244]	; (800574c <control_motors+0x2c0>)
 8005658:	2202      	movs	r2, #2
 800565a:	801a      	strh	r2, [r3, #0]
				status[1]=PREOPERATIONAL;
 800565c:	4b3b      	ldr	r3, [pc, #236]	; (800574c <control_motors+0x2c0>)
 800565e:	2202      	movs	r2, #2
 8005660:	805a      	strh	r2, [r3, #2]
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8005662:	2180      	movs	r1, #128	; 0x80
 8005664:	483d      	ldr	r0, [pc, #244]	; (800575c <control_motors+0x2d0>)
 8005666:	f7fd fc46 	bl	8002ef6 <HAL_GPIO_TogglePin>
				break;
 800566a:	e002      	b.n	8005672 <control_motors+0x1e6>
			break;
 800566c:	bf00      	nop
 800566e:	e000      	b.n	8005672 <control_motors+0x1e6>
					break;
 8005670:	bf00      	nop
	}
	/*Reseteo Variable control en el caso de volver a preoperational*/

	/* controlo alternadamente motor 1 y motor 2 --- RESETEO VARUABKES
	//control_nodos[nodo-1]=control;  // ???? en q esta ba pensando*/
	if(nodo==MOTOR1)
 8005672:	4b35      	ldr	r3, [pc, #212]	; (8005748 <control_motors+0x2bc>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d103      	bne.n	8005682 <control_motors+0x1f6>
	{
		nodo=MOTOR2;
 800567a:	4b33      	ldr	r3, [pc, #204]	; (8005748 <control_motors+0x2bc>)
 800567c:	2202      	movs	r2, #2
 800567e:	701a      	strb	r2, [r3, #0]
 8005680:	e006      	b.n	8005690 <control_motors+0x204>
	}
	else if (nodo==MOTOR2)
 8005682:	4b31      	ldr	r3, [pc, #196]	; (8005748 <control_motors+0x2bc>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b02      	cmp	r3, #2
 8005688:	d102      	bne.n	8005690 <control_motors+0x204>
	{
		nodo=MOTOR1;
 800568a:	4b2f      	ldr	r3, [pc, #188]	; (8005748 <control_motors+0x2bc>)
 800568c:	2201      	movs	r2, #1
 800568e:	701a      	strb	r2, [r3, #0]
	}

	//PIDO INFO (CONSTANTEMENTE)---ciclos¿?7

			if( (HAL_GetTick()-tickstart>freq) )
 8005690:	f7fb f9c0 	bl	8000a14 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	4b30      	ldr	r3, [pc, #192]	; (8005758 <control_motors+0x2cc>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	4a31      	ldr	r2, [pc, #196]	; (8005764 <control_motors+0x2d8>)
 800569e:	7812      	ldrb	r2, [r2, #0]
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d948      	bls.n	8005736 <control_motors+0x2aa>
			{
				if((status[nodo-1]==OPERATIONAL && cycles==5) || (status[nodo-1]==PREOPERATIONAL && FLAG_OP==1))
 80056a4:	4b28      	ldr	r3, [pc, #160]	; (8005748 <control_motors+0x2bc>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	3b01      	subs	r3, #1
 80056aa:	4a28      	ldr	r2, [pc, #160]	; (800574c <control_motors+0x2c0>)
 80056ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d103      	bne.n	80056bc <control_motors+0x230>
 80056b4:	4b2c      	ldr	r3, [pc, #176]	; (8005768 <control_motors+0x2dc>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b05      	cmp	r3, #5
 80056ba:	d03c      	beq.n	8005736 <control_motors+0x2aa>
 80056bc:	4b22      	ldr	r3, [pc, #136]	; (8005748 <control_motors+0x2bc>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	4a22      	ldr	r2, [pc, #136]	; (800574c <control_motors+0x2c0>)
 80056c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d103      	bne.n	80056d4 <control_motors+0x248>
 80056cc:	4b24      	ldr	r3, [pc, #144]	; (8005760 <control_motors+0x2d4>)
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d030      	beq.n	8005736 <control_motors+0x2aa>
				{

				}
				else
				{
					if(ask_for_info( nodo ,contador[nodo-1])==HAL_OK)
 80056d4:	4b1c      	ldr	r3, [pc, #112]	; (8005748 <control_motors+0x2bc>)
 80056d6:	7818      	ldrb	r0, [r3, #0]
 80056d8:	4b1b      	ldr	r3, [pc, #108]	; (8005748 <control_motors+0x2bc>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	3b01      	subs	r3, #1
 80056de:	4a1d      	ldr	r2, [pc, #116]	; (8005754 <control_motors+0x2c8>)
 80056e0:	5cd3      	ldrb	r3, [r2, r3]
 80056e2:	4619      	mov	r1, r3
 80056e4:	f7fb f89c 	bl	8000820 <ask_for_info>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d123      	bne.n	8005736 <control_motors+0x2aa>
					{
						contador[nodo-1]++;
 80056ee:	4b16      	ldr	r3, [pc, #88]	; (8005748 <control_motors+0x2bc>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	4a17      	ldr	r2, [pc, #92]	; (8005754 <control_motors+0x2c8>)
 80056f6:	5cd2      	ldrb	r2, [r2, r3]
 80056f8:	3201      	adds	r2, #1
 80056fa:	b2d1      	uxtb	r1, r2
 80056fc:	4a15      	ldr	r2, [pc, #84]	; (8005754 <control_motors+0x2c8>)
 80056fe:	54d1      	strb	r1, [r2, r3]
						cycles++;
 8005700:	4b19      	ldr	r3, [pc, #100]	; (8005768 <control_motors+0x2dc>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3301      	adds	r3, #1
 8005706:	4a18      	ldr	r2, [pc, #96]	; (8005768 <control_motors+0x2dc>)
 8005708:	6013      	str	r3, [r2, #0]
						tickstart=HAL_GetTick();
 800570a:	f7fb f983 	bl	8000a14 <HAL_GetTick>
 800570e:	4603      	mov	r3, r0
 8005710:	461a      	mov	r2, r3
 8005712:	4b11      	ldr	r3, [pc, #68]	; (8005758 <control_motors+0x2cc>)
 8005714:	601a      	str	r2, [r3, #0]
						if(contador[nodo-1]>10)
 8005716:	4b0c      	ldr	r3, [pc, #48]	; (8005748 <control_motors+0x2bc>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	3b01      	subs	r3, #1
 800571c:	4a0d      	ldr	r2, [pc, #52]	; (8005754 <control_motors+0x2c8>)
 800571e:	5cd3      	ldrb	r3, [r2, r3]
 8005720:	2b0a      	cmp	r3, #10
 8005722:	d908      	bls.n	8005736 <control_motors+0x2aa>
						{
							contador[nodo-1]=1;
 8005724:	4b08      	ldr	r3, [pc, #32]	; (8005748 <control_motors+0x2bc>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	3b01      	subs	r3, #1
 800572a:	4a0a      	ldr	r2, [pc, #40]	; (8005754 <control_motors+0x2c8>)
 800572c:	2101      	movs	r1, #1
 800572e:	54d1      	strb	r1, [r2, r3]
							cycles=0;
 8005730:	4b0d      	ldr	r3, [pc, #52]	; (8005768 <control_motors+0x2dc>)
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
						}
					}
				}
			}
 }
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	bd90      	pop	{r4, r7, pc}
 800573c:	2000003e 	.word	0x2000003e
 8005740:	2000009c 	.word	0x2000009c
 8005744:	20000040 	.word	0x20000040
 8005748:	20000006 	.word	0x20000006
 800574c:	200000b8 	.word	0x200000b8
 8005750:	2000002c 	.word	0x2000002c
 8005754:	20000030 	.word	0x20000030
 8005758:	20000034 	.word	0x20000034
 800575c:	40020400 	.word	0x40020400
 8005760:	2000003c 	.word	0x2000003c
 8005764:	20000005 	.word	0x20000005
 8005768:	20000028 	.word	0x20000028

0800576c <mysystem_start>:
#include "SystemInit.h"

CAN_FilterTypeDef sFilterConfig;

void mysystem_start(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
	/*Inicio configuracion CAN*/

	  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8005770:	2102      	movs	r1, #2
 8005772:	4819      	ldr	r0, [pc, #100]	; (80057d8 <mysystem_start+0x6c>)
 8005774:	f7fc fb03 	bl	8001d7e <HAL_CAN_ActivateNotification>
	  HAL_CAN_Start(&hcan1);
 8005778:	4817      	ldr	r0, [pc, #92]	; (80057d8 <mysystem_start+0x6c>)
 800577a:	f7fc f8ab 	bl	80018d4 <HAL_CAN_Start>

		/*Inicio configuracion Filtro can*/

	  sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 800577e:	4b17      	ldr	r3, [pc, #92]	; (80057dc <mysystem_start+0x70>)
 8005780:	2200      	movs	r2, #0
 8005782:	611a      	str	r2, [r3, #16]
	  sFilterConfig.FilterIdHigh=0x245<<5;
 8005784:	4b15      	ldr	r3, [pc, #84]	; (80057dc <mysystem_start+0x70>)
 8005786:	f644 02a0 	movw	r2, #18592	; 0x48a0
 800578a:	601a      	str	r2, [r3, #0]
	  sFilterConfig.FilterIdLow=0;
 800578c:	4b13      	ldr	r3, [pc, #76]	; (80057dc <mysystem_start+0x70>)
 800578e:	2200      	movs	r2, #0
 8005790:	605a      	str	r2, [r3, #4]
	  sFilterConfig.FilterMaskIdHigh=0;
 8005792:	4b12      	ldr	r3, [pc, #72]	; (80057dc <mysystem_start+0x70>)
 8005794:	2200      	movs	r2, #0
 8005796:	609a      	str	r2, [r3, #8]
	  sFilterConfig.FilterMaskIdLow=0;
 8005798:	4b10      	ldr	r3, [pc, #64]	; (80057dc <mysystem_start+0x70>)
 800579a:	2200      	movs	r2, #0
 800579c:	60da      	str	r2, [r3, #12]
	  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 800579e:	4b0f      	ldr	r3, [pc, #60]	; (80057dc <mysystem_start+0x70>)
 80057a0:	2201      	movs	r2, #1
 80057a2:	61da      	str	r2, [r3, #28]
	  sFilterConfig.FilterActivation=ENABLE;
 80057a4:	4b0d      	ldr	r3, [pc, #52]	; (80057dc <mysystem_start+0x70>)
 80057a6:	2201      	movs	r2, #1
 80057a8:	621a      	str	r2, [r3, #32]
	  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80057aa:	490c      	ldr	r1, [pc, #48]	; (80057dc <mysystem_start+0x70>)
 80057ac:	480a      	ldr	r0, [pc, #40]	; (80057d8 <mysystem_start+0x6c>)
 80057ae:	f7fb ffa5 	bl	80016fc <HAL_CAN_ConfigFilter>

		/*Inicio ADC con DMA */
	  HAL_ADC_Start_DMA(&hadc1,ADC_val, 2);
 80057b2:	2202      	movs	r2, #2
 80057b4:	490a      	ldr	r1, [pc, #40]	; (80057e0 <mysystem_start+0x74>)
 80057b6:	480b      	ldr	r0, [pc, #44]	; (80057e4 <mysystem_start+0x78>)
 80057b8:	f7fb fabe 	bl	8000d38 <HAL_ADC_Start_DMA>

	  HAL_TIM_Base_Start_IT(&htim2);
 80057bc:	480a      	ldr	r0, [pc, #40]	; (80057e8 <mysystem_start+0x7c>)
 80057be:	f7fe fcad 	bl	800411c <HAL_TIM_Base_Start_IT>




		/*Inicio*/
	  status[0]= INITIALIZATION;
 80057c2:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <mysystem_start+0x80>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	801a      	strh	r2, [r3, #0]
	  status[1]= INITIALIZATION;
 80057c8:	4b08      	ldr	r3, [pc, #32]	; (80057ec <mysystem_start+0x80>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	805a      	strh	r2, [r3, #2]
	  FLAG_OP=0;
 80057ce:	4b08      	ldr	r3, [pc, #32]	; (80057f0 <mysystem_start+0x84>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	801a      	strh	r2, [r3, #0]

}
 80057d4:	bf00      	nop
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	20000330 	.word	0x20000330
 80057dc:	200000d8 	.word	0x200000d8
 80057e0:	20000048 	.word	0x20000048
 80057e4:	20000248 	.word	0x20000248
 80057e8:	200002f0 	.word	0x200002f0
 80057ec:	200000b8 	.word	0x200000b8
 80057f0:	2000003c 	.word	0x2000003c

080057f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80057f8:	f7fb f8ba 	bl	8000970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80057fc:	f000 f828 	bl	8005850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005800:	f000 f9fe 	bl	8005c00 <MX_GPIO_Init>
  MX_DMA_Init();
 8005804:	f000 f9c2 	bl	8005b8c <MX_DMA_Init>
  MX_CAN1_Init();
 8005808:	f000 f90c 	bl	8005a24 <MX_CAN1_Init>
  MX_ADC1_Init();
 800580c:	f000 f8aa 	bl	8005964 <MX_ADC1_Init>
  MX_TIM2_Init();
 8005810:	f000 f93e 	bl	8005a90 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8005814:	f000 f98a 	bl	8005b2c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  mysystem_start();
 8005818:	f7ff ffa8 	bl	800576c <mysystem_start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
      {
	  direction=ADC_val[1];
 800581c:	4b08      	ldr	r3, [pc, #32]	; (8005840 <main+0x4c>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	461a      	mov	r2, r3
 8005822:	4b08      	ldr	r3, [pc, #32]	; (8005844 <main+0x50>)
 8005824:	601a      	str	r2, [r3, #0]
	  brake=0;
 8005826:	4b08      	ldr	r3, [pc, #32]	; (8005848 <main+0x54>)
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]

	  control_motors(throttle,direction,brake);
 800582c:	4b07      	ldr	r3, [pc, #28]	; (800584c <main+0x58>)
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	4b04      	ldr	r3, [pc, #16]	; (8005844 <main+0x50>)
 8005832:	6819      	ldr	r1, [r3, #0]
 8005834:	4b04      	ldr	r3, [pc, #16]	; (8005848 <main+0x54>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	461a      	mov	r2, r3
 800583a:	f7ff fe27 	bl	800548c <control_motors>
	  direction=ADC_val[1];
 800583e:	e7ed      	b.n	800581c <main+0x28>
 8005840:	20000048 	.word	0x20000048
 8005844:	20000244 	.word	0x20000244
 8005848:	20000358 	.word	0x20000358
 800584c:	20000240 	.word	0x20000240

08005850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b0b8      	sub	sp, #224	; 0xe0
 8005854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005856:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800585a:	2234      	movs	r2, #52	; 0x34
 800585c:	2100      	movs	r1, #0
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fd64 	bl	800632c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005864:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	605a      	str	r2, [r3, #4]
 800586e:	609a      	str	r2, [r3, #8]
 8005870:	60da      	str	r2, [r3, #12]
 8005872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005874:	f107 0308 	add.w	r3, r7, #8
 8005878:	2290      	movs	r2, #144	; 0x90
 800587a:	2100      	movs	r1, #0
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fd55 	bl	800632c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005882:	4b36      	ldr	r3, [pc, #216]	; (800595c <SystemClock_Config+0x10c>)
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	4a35      	ldr	r2, [pc, #212]	; (800595c <SystemClock_Config+0x10c>)
 8005888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800588c:	6413      	str	r3, [r2, #64]	; 0x40
 800588e:	4b33      	ldr	r3, [pc, #204]	; (800595c <SystemClock_Config+0x10c>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005896:	607b      	str	r3, [r7, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800589a:	4b31      	ldr	r3, [pc, #196]	; (8005960 <SystemClock_Config+0x110>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80058a2:	4a2f      	ldr	r2, [pc, #188]	; (8005960 <SystemClock_Config+0x110>)
 80058a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	4b2d      	ldr	r3, [pc, #180]	; (8005960 <SystemClock_Config+0x110>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80058b6:	2301      	movs	r3, #1
 80058b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80058bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80058c4:	2302      	movs	r3, #2
 80058c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80058ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80058ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80058d2:	2304      	movs	r3, #4
 80058d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80058d8:	2360      	movs	r3, #96	; 0x60
 80058da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80058de:	2302      	movs	r3, #2
 80058e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80058e4:	2304      	movs	r3, #4
 80058e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80058ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fd fb1c 	bl	8002f2c <HAL_RCC_OscConfig>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80058fa:	f000 fa09 	bl	8005d10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80058fe:	230f      	movs	r3, #15
 8005900:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005904:	2302      	movs	r3, #2
 8005906:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800590a:	2300      	movs	r3, #0
 800590c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005910:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005914:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8005918:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800591c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005920:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005924:	2103      	movs	r1, #3
 8005926:	4618      	mov	r0, r3
 8005928:	f7fd fdae 	bl	8003488 <HAL_RCC_ClockConfig>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8005932:	f000 f9ed 	bl	8005d10 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800593a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800593c:	2300      	movs	r3, #0
 800593e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005940:	f107 0308 	add.w	r3, r7, #8
 8005944:	4618      	mov	r0, r3
 8005946:	f7fd ff97 	bl	8003878 <HAL_RCCEx_PeriphCLKConfig>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8005950:	f000 f9de 	bl	8005d10 <Error_Handler>
  }
}
 8005954:	bf00      	nop
 8005956:	37e0      	adds	r7, #224	; 0xe0
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	40023800 	.word	0x40023800
 8005960:	40007000 	.word	0x40007000

08005964 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800596a:	463b      	mov	r3, r7
 800596c:	2200      	movs	r2, #0
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	605a      	str	r2, [r3, #4]
 8005972:	609a      	str	r2, [r3, #8]
 8005974:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8005976:	4b28      	ldr	r3, [pc, #160]	; (8005a18 <MX_ADC1_Init+0xb4>)
 8005978:	4a28      	ldr	r2, [pc, #160]	; (8005a1c <MX_ADC1_Init+0xb8>)
 800597a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800597c:	4b26      	ldr	r3, [pc, #152]	; (8005a18 <MX_ADC1_Init+0xb4>)
 800597e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005982:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005984:	4b24      	ldr	r3, [pc, #144]	; (8005a18 <MX_ADC1_Init+0xb4>)
 8005986:	2200      	movs	r2, #0
 8005988:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800598a:	4b23      	ldr	r3, [pc, #140]	; (8005a18 <MX_ADC1_Init+0xb4>)
 800598c:	2201      	movs	r2, #1
 800598e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005990:	4b21      	ldr	r3, [pc, #132]	; (8005a18 <MX_ADC1_Init+0xb4>)
 8005992:	2201      	movs	r2, #1
 8005994:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005996:	4b20      	ldr	r3, [pc, #128]	; (8005a18 <MX_ADC1_Init+0xb4>)
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800599e:	4b1e      	ldr	r3, [pc, #120]	; (8005a18 <MX_ADC1_Init+0xb4>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80059a4:	4b1c      	ldr	r3, [pc, #112]	; (8005a18 <MX_ADC1_Init+0xb4>)
 80059a6:	4a1e      	ldr	r2, [pc, #120]	; (8005a20 <MX_ADC1_Init+0xbc>)
 80059a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80059aa:	4b1b      	ldr	r3, [pc, #108]	; (8005a18 <MX_ADC1_Init+0xb4>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80059b0:	4b19      	ldr	r3, [pc, #100]	; (8005a18 <MX_ADC1_Init+0xb4>)
 80059b2:	2202      	movs	r2, #2
 80059b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80059b6:	4b18      	ldr	r3, [pc, #96]	; (8005a18 <MX_ADC1_Init+0xb4>)
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80059be:	4b16      	ldr	r3, [pc, #88]	; (8005a18 <MX_ADC1_Init+0xb4>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80059c4:	4814      	ldr	r0, [pc, #80]	; (8005a18 <MX_ADC1_Init+0xb4>)
 80059c6:	f7fb f831 	bl	8000a2c <HAL_ADC_Init>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80059d0:	f000 f99e 	bl	8005d10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80059d4:	2306      	movs	r3, #6
 80059d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80059d8:	2301      	movs	r3, #1
 80059da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80059dc:	2301      	movs	r3, #1
 80059de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80059e0:	463b      	mov	r3, r7
 80059e2:	4619      	mov	r1, r3
 80059e4:	480c      	ldr	r0, [pc, #48]	; (8005a18 <MX_ADC1_Init+0xb4>)
 80059e6:	f7fb fabd 	bl	8000f64 <HAL_ADC_ConfigChannel>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80059f0:	f000 f98e 	bl	8005d10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80059f4:	2309      	movs	r3, #9
 80059f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80059f8:	2302      	movs	r3, #2
 80059fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80059fc:	463b      	mov	r3, r7
 80059fe:	4619      	mov	r1, r3
 8005a00:	4805      	ldr	r0, [pc, #20]	; (8005a18 <MX_ADC1_Init+0xb4>)
 8005a02:	f7fb faaf 	bl	8000f64 <HAL_ADC_ConfigChannel>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8005a0c:	f000 f980 	bl	8005d10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005a10:	bf00      	nop
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000248 	.word	0x20000248
 8005a1c:	40012000 	.word	0x40012000
 8005a20:	0f000001 	.word	0x0f000001

08005a24 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8005a28:	4b17      	ldr	r3, [pc, #92]	; (8005a88 <MX_CAN1_Init+0x64>)
 8005a2a:	4a18      	ldr	r2, [pc, #96]	; (8005a8c <MX_CAN1_Init+0x68>)
 8005a2c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8005a2e:	4b16      	ldr	r3, [pc, #88]	; (8005a88 <MX_CAN1_Init+0x64>)
 8005a30:	2203      	movs	r2, #3
 8005a32:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8005a34:	4b14      	ldr	r3, [pc, #80]	; (8005a88 <MX_CAN1_Init+0x64>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005a3a:	4b13      	ldr	r3, [pc, #76]	; (8005a88 <MX_CAN1_Init+0x64>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8005a40:	4b11      	ldr	r3, [pc, #68]	; (8005a88 <MX_CAN1_Init+0x64>)
 8005a42:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8005a46:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8005a48:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <MX_CAN1_Init+0x64>)
 8005a4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a4e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8005a50:	4b0d      	ldr	r3, [pc, #52]	; (8005a88 <MX_CAN1_Init+0x64>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8005a56:	4b0c      	ldr	r3, [pc, #48]	; (8005a88 <MX_CAN1_Init+0x64>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8005a5c:	4b0a      	ldr	r3, [pc, #40]	; (8005a88 <MX_CAN1_Init+0x64>)
 8005a5e:	2201      	movs	r2, #1
 8005a60:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8005a62:	4b09      	ldr	r3, [pc, #36]	; (8005a88 <MX_CAN1_Init+0x64>)
 8005a64:	2201      	movs	r2, #1
 8005a66:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8005a68:	4b07      	ldr	r3, [pc, #28]	; (8005a88 <MX_CAN1_Init+0x64>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8005a6e:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <MX_CAN1_Init+0x64>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005a74:	4804      	ldr	r0, [pc, #16]	; (8005a88 <MX_CAN1_Init+0x64>)
 8005a76:	f7fb fd45 	bl	8001504 <HAL_CAN_Init>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8005a80:	f000 f946 	bl	8005d10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8005a84:	bf00      	nop
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	20000330 	.word	0x20000330
 8005a8c:	40006400 	.word	0x40006400

08005a90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a96:	f107 0310 	add.w	r3, r7, #16
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	605a      	str	r2, [r3, #4]
 8005aa0:	609a      	str	r2, [r3, #8]
 8005aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005aa4:	1d3b      	adds	r3, r7, #4
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	605a      	str	r2, [r3, #4]
 8005aac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005aae:	4b1e      	ldr	r3, [pc, #120]	; (8005b28 <MX_TIM2_Init+0x98>)
 8005ab0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005ab4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 8005ab6:	4b1c      	ldr	r3, [pc, #112]	; (8005b28 <MX_TIM2_Init+0x98>)
 8005ab8:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8005abc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005abe:	4b1a      	ldr	r3, [pc, #104]	; (8005b28 <MX_TIM2_Init+0x98>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8005ac4:	4b18      	ldr	r3, [pc, #96]	; (8005b28 <MX_TIM2_Init+0x98>)
 8005ac6:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005aca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005acc:	4b16      	ldr	r3, [pc, #88]	; (8005b28 <MX_TIM2_Init+0x98>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ad2:	4b15      	ldr	r3, [pc, #84]	; (8005b28 <MX_TIM2_Init+0x98>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005ad8:	4813      	ldr	r0, [pc, #76]	; (8005b28 <MX_TIM2_Init+0x98>)
 8005ada:	f7fe faf3 	bl	80040c4 <HAL_TIM_Base_Init>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8005ae4:	f000 f914 	bl	8005d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005aee:	f107 0310 	add.w	r3, r7, #16
 8005af2:	4619      	mov	r1, r3
 8005af4:	480c      	ldr	r0, [pc, #48]	; (8005b28 <MX_TIM2_Init+0x98>)
 8005af6:	f7fe fc5b 	bl	80043b0 <HAL_TIM_ConfigClockSource>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8005b00:	f000 f906 	bl	8005d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b04:	2300      	movs	r3, #0
 8005b06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005b0c:	1d3b      	adds	r3, r7, #4
 8005b0e:	4619      	mov	r1, r3
 8005b10:	4805      	ldr	r0, [pc, #20]	; (8005b28 <MX_TIM2_Init+0x98>)
 8005b12:	f7fe fe73 	bl	80047fc <HAL_TIMEx_MasterConfigSynchronization>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8005b1c:	f000 f8f8 	bl	8005d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005b20:	bf00      	nop
 8005b22:	3720      	adds	r7, #32
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	200002f0 	.word	0x200002f0

08005b2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005b30:	4b14      	ldr	r3, [pc, #80]	; (8005b84 <MX_USART3_UART_Init+0x58>)
 8005b32:	4a15      	ldr	r2, [pc, #84]	; (8005b88 <MX_USART3_UART_Init+0x5c>)
 8005b34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005b36:	4b13      	ldr	r3, [pc, #76]	; (8005b84 <MX_USART3_UART_Init+0x58>)
 8005b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005b3e:	4b11      	ldr	r3, [pc, #68]	; (8005b84 <MX_USART3_UART_Init+0x58>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005b44:	4b0f      	ldr	r3, [pc, #60]	; (8005b84 <MX_USART3_UART_Init+0x58>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005b4a:	4b0e      	ldr	r3, [pc, #56]	; (8005b84 <MX_USART3_UART_Init+0x58>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005b50:	4b0c      	ldr	r3, [pc, #48]	; (8005b84 <MX_USART3_UART_Init+0x58>)
 8005b52:	220c      	movs	r2, #12
 8005b54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b56:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <MX_USART3_UART_Init+0x58>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b5c:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <MX_USART3_UART_Init+0x58>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b62:	4b08      	ldr	r3, [pc, #32]	; (8005b84 <MX_USART3_UART_Init+0x58>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b68:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <MX_USART3_UART_Init+0x58>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005b6e:	4805      	ldr	r0, [pc, #20]	; (8005b84 <MX_USART3_UART_Init+0x58>)
 8005b70:	f7fe fef0 	bl	8004954 <HAL_UART_Init>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005b7a:	f000 f8c9 	bl	8005d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005b7e:	bf00      	nop
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000160 	.word	0x20000160
 8005b88:	40004800 	.word	0x40004800

08005b8c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005b92:	4b1a      	ldr	r3, [pc, #104]	; (8005bfc <MX_DMA_Init+0x70>)
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	4a19      	ldr	r2, [pc, #100]	; (8005bfc <MX_DMA_Init+0x70>)
 8005b98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b9e:	4b17      	ldr	r3, [pc, #92]	; (8005bfc <MX_DMA_Init+0x70>)
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ba6:	607b      	str	r3, [r7, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005baa:	4b14      	ldr	r3, [pc, #80]	; (8005bfc <MX_DMA_Init+0x70>)
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	4a13      	ldr	r2, [pc, #76]	; (8005bfc <MX_DMA_Init+0x70>)
 8005bb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8005bb6:	4b11      	ldr	r3, [pc, #68]	; (8005bfc <MX_DMA_Init+0x70>)
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	200c      	movs	r0, #12
 8005bc8:	f7fc fc0d 	bl	80023e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005bcc:	200c      	movs	r0, #12
 8005bce:	f7fc fc26 	bl	800241e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	200e      	movs	r0, #14
 8005bd8:	f7fc fc05 	bl	80023e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8005bdc:	200e      	movs	r0, #14
 8005bde:	f7fc fc1e 	bl	800241e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005be2:	2200      	movs	r2, #0
 8005be4:	2100      	movs	r1, #0
 8005be6:	2038      	movs	r0, #56	; 0x38
 8005be8:	f7fc fbfd 	bl	80023e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005bec:	2038      	movs	r0, #56	; 0x38
 8005bee:	f7fc fc16 	bl	800241e <HAL_NVIC_EnableIRQ>

}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40023800 	.word	0x40023800

08005c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08a      	sub	sp, #40	; 0x28
 8005c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c06:	f107 0314 	add.w	r3, r7, #20
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	605a      	str	r2, [r3, #4]
 8005c10:	609a      	str	r2, [r3, #8]
 8005c12:	60da      	str	r2, [r3, #12]
 8005c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c16:	4b39      	ldr	r3, [pc, #228]	; (8005cfc <MX_GPIO_Init+0xfc>)
 8005c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1a:	4a38      	ldr	r2, [pc, #224]	; (8005cfc <MX_GPIO_Init+0xfc>)
 8005c1c:	f043 0304 	orr.w	r3, r3, #4
 8005c20:	6313      	str	r3, [r2, #48]	; 0x30
 8005c22:	4b36      	ldr	r3, [pc, #216]	; (8005cfc <MX_GPIO_Init+0xfc>)
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	f003 0304 	and.w	r3, r3, #4
 8005c2a:	613b      	str	r3, [r7, #16]
 8005c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005c2e:	4b33      	ldr	r3, [pc, #204]	; (8005cfc <MX_GPIO_Init+0xfc>)
 8005c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c32:	4a32      	ldr	r2, [pc, #200]	; (8005cfc <MX_GPIO_Init+0xfc>)
 8005c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c38:	6313      	str	r3, [r2, #48]	; 0x30
 8005c3a:	4b30      	ldr	r3, [pc, #192]	; (8005cfc <MX_GPIO_Init+0xfc>)
 8005c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c46:	4b2d      	ldr	r3, [pc, #180]	; (8005cfc <MX_GPIO_Init+0xfc>)
 8005c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4a:	4a2c      	ldr	r2, [pc, #176]	; (8005cfc <MX_GPIO_Init+0xfc>)
 8005c4c:	f043 0301 	orr.w	r3, r3, #1
 8005c50:	6313      	str	r3, [r2, #48]	; 0x30
 8005c52:	4b2a      	ldr	r3, [pc, #168]	; (8005cfc <MX_GPIO_Init+0xfc>)
 8005c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	60bb      	str	r3, [r7, #8]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c5e:	4b27      	ldr	r3, [pc, #156]	; (8005cfc <MX_GPIO_Init+0xfc>)
 8005c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c62:	4a26      	ldr	r2, [pc, #152]	; (8005cfc <MX_GPIO_Init+0xfc>)
 8005c64:	f043 0302 	orr.w	r3, r3, #2
 8005c68:	6313      	str	r3, [r2, #48]	; 0x30
 8005c6a:	4b24      	ldr	r3, [pc, #144]	; (8005cfc <MX_GPIO_Init+0xfc>)
 8005c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	607b      	str	r3, [r7, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c76:	4b21      	ldr	r3, [pc, #132]	; (8005cfc <MX_GPIO_Init+0xfc>)
 8005c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7a:	4a20      	ldr	r2, [pc, #128]	; (8005cfc <MX_GPIO_Init+0xfc>)
 8005c7c:	f043 0308 	orr.w	r3, r3, #8
 8005c80:	6313      	str	r3, [r2, #48]	; 0x30
 8005c82:	4b1e      	ldr	r3, [pc, #120]	; (8005cfc <MX_GPIO_Init+0xfc>)
 8005c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7, GPIO_PIN_RESET);
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f24c 0181 	movw	r1, #49281	; 0xc081
 8005c94:	481a      	ldr	r0, [pc, #104]	; (8005d00 <MX_GPIO_Init+0x100>)
 8005c96:	f7fd f915 	bl	8002ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005c9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005ca0:	4b18      	ldr	r3, [pc, #96]	; (8005d04 <MX_GPIO_Init+0x104>)
 8005ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ca8:	f107 0314 	add.w	r3, r7, #20
 8005cac:	4619      	mov	r1, r3
 8005cae:	4816      	ldr	r0, [pc, #88]	; (8005d08 <MX_GPIO_Init+0x108>)
 8005cb0:	f7fc ff46 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005cb4:	230c      	movs	r3, #12
 8005cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb8:	2302      	movs	r3, #2
 8005cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005cc4:	2307      	movs	r3, #7
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cc8:	f107 0314 	add.w	r3, r7, #20
 8005ccc:	4619      	mov	r1, r3
 8005cce:	480f      	ldr	r0, [pc, #60]	; (8005d0c <MX_GPIO_Init+0x10c>)
 8005cd0:	f7fc ff36 	bl	8002b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB15 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7;
 8005cd4:	f24c 0381 	movw	r3, #49281	; 0xc081
 8005cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ce6:	f107 0314 	add.w	r3, r7, #20
 8005cea:	4619      	mov	r1, r3
 8005cec:	4804      	ldr	r0, [pc, #16]	; (8005d00 <MX_GPIO_Init+0x100>)
 8005cee:	f7fc ff27 	bl	8002b40 <HAL_GPIO_Init>

}
 8005cf2:	bf00      	nop
 8005cf4:	3728      	adds	r7, #40	; 0x28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40023800 	.word	0x40023800
 8005d00:	40020400 	.word	0x40020400
 8005d04:	10110000 	.word	0x10110000
 8005d08:	40020800 	.word	0x40020800
 8005d0c:	40020000 	.word	0x40020000

08005d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	// enciendo pin rojo si hay algun error
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8005d14:	2201      	movs	r2, #1
 8005d16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d1a:	4802      	ldr	r0, [pc, #8]	; (8005d24 <Error_Handler+0x14>)
 8005d1c:	f7fd f8d2 	bl	8002ec4 <HAL_GPIO_WritePin>
	}*/

  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005d20:	bf00      	nop
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40020400 	.word	0x40020400

08005d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005d2e:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <HAL_MspInit+0x44>)
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	4a0e      	ldr	r2, [pc, #56]	; (8005d6c <HAL_MspInit+0x44>)
 8005d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d38:	6413      	str	r3, [r2, #64]	; 0x40
 8005d3a:	4b0c      	ldr	r3, [pc, #48]	; (8005d6c <HAL_MspInit+0x44>)
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d42:	607b      	str	r3, [r7, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d46:	4b09      	ldr	r3, [pc, #36]	; (8005d6c <HAL_MspInit+0x44>)
 8005d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4a:	4a08      	ldr	r2, [pc, #32]	; (8005d6c <HAL_MspInit+0x44>)
 8005d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d50:	6453      	str	r3, [r2, #68]	; 0x44
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <HAL_MspInit+0x44>)
 8005d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40023800 	.word	0x40023800

08005d70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08a      	sub	sp, #40	; 0x28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d78:	f107 0314 	add.w	r3, r7, #20
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	609a      	str	r2, [r3, #8]
 8005d84:	60da      	str	r2, [r3, #12]
 8005d86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a3d      	ldr	r2, [pc, #244]	; (8005e84 <HAL_ADC_MspInit+0x114>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d173      	bne.n	8005e7a <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005d92:	4b3d      	ldr	r3, [pc, #244]	; (8005e88 <HAL_ADC_MspInit+0x118>)
 8005d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d96:	4a3c      	ldr	r2, [pc, #240]	; (8005e88 <HAL_ADC_MspInit+0x118>)
 8005d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d9e:	4b3a      	ldr	r3, [pc, #232]	; (8005e88 <HAL_ADC_MspInit+0x118>)
 8005da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da6:	613b      	str	r3, [r7, #16]
 8005da8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005daa:	4b37      	ldr	r3, [pc, #220]	; (8005e88 <HAL_ADC_MspInit+0x118>)
 8005dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dae:	4a36      	ldr	r2, [pc, #216]	; (8005e88 <HAL_ADC_MspInit+0x118>)
 8005db0:	f043 0301 	orr.w	r3, r3, #1
 8005db4:	6313      	str	r3, [r2, #48]	; 0x30
 8005db6:	4b34      	ldr	r3, [pc, #208]	; (8005e88 <HAL_ADC_MspInit+0x118>)
 8005db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dc2:	4b31      	ldr	r3, [pc, #196]	; (8005e88 <HAL_ADC_MspInit+0x118>)
 8005dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc6:	4a30      	ldr	r2, [pc, #192]	; (8005e88 <HAL_ADC_MspInit+0x118>)
 8005dc8:	f043 0302 	orr.w	r3, r3, #2
 8005dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8005dce:	4b2e      	ldr	r3, [pc, #184]	; (8005e88 <HAL_ADC_MspInit+0x118>)
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	60bb      	str	r3, [r7, #8]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005dda:	2340      	movs	r3, #64	; 0x40
 8005ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005dde:	2303      	movs	r3, #3
 8005de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005de6:	f107 0314 	add.w	r3, r7, #20
 8005dea:	4619      	mov	r1, r3
 8005dec:	4827      	ldr	r0, [pc, #156]	; (8005e8c <HAL_ADC_MspInit+0x11c>)
 8005dee:	f7fc fea7 	bl	8002b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005df2:	2302      	movs	r3, #2
 8005df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005df6:	2303      	movs	r3, #3
 8005df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dfe:	f107 0314 	add.w	r3, r7, #20
 8005e02:	4619      	mov	r1, r3
 8005e04:	4822      	ldr	r0, [pc, #136]	; (8005e90 <HAL_ADC_MspInit+0x120>)
 8005e06:	f7fc fe9b 	bl	8002b40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005e0a:	4b22      	ldr	r3, [pc, #136]	; (8005e94 <HAL_ADC_MspInit+0x124>)
 8005e0c:	4a22      	ldr	r2, [pc, #136]	; (8005e98 <HAL_ADC_MspInit+0x128>)
 8005e0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005e10:	4b20      	ldr	r3, [pc, #128]	; (8005e94 <HAL_ADC_MspInit+0x124>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e16:	4b1f      	ldr	r3, [pc, #124]	; (8005e94 <HAL_ADC_MspInit+0x124>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e1c:	4b1d      	ldr	r3, [pc, #116]	; (8005e94 <HAL_ADC_MspInit+0x124>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005e22:	4b1c      	ldr	r3, [pc, #112]	; (8005e94 <HAL_ADC_MspInit+0x124>)
 8005e24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005e2a:	4b1a      	ldr	r3, [pc, #104]	; (8005e94 <HAL_ADC_MspInit+0x124>)
 8005e2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005e32:	4b18      	ldr	r3, [pc, #96]	; (8005e94 <HAL_ADC_MspInit+0x124>)
 8005e34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005e3a:	4b16      	ldr	r3, [pc, #88]	; (8005e94 <HAL_ADC_MspInit+0x124>)
 8005e3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e40:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005e42:	4b14      	ldr	r3, [pc, #80]	; (8005e94 <HAL_ADC_MspInit+0x124>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e48:	4b12      	ldr	r3, [pc, #72]	; (8005e94 <HAL_ADC_MspInit+0x124>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005e4e:	4811      	ldr	r0, [pc, #68]	; (8005e94 <HAL_ADC_MspInit+0x124>)
 8005e50:	f7fc fb00 	bl	8002454 <HAL_DMA_Init>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8005e5a:	f7ff ff59 	bl	8005d10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a0c      	ldr	r2, [pc, #48]	; (8005e94 <HAL_ADC_MspInit+0x124>)
 8005e62:	639a      	str	r2, [r3, #56]	; 0x38
 8005e64:	4a0b      	ldr	r2, [pc, #44]	; (8005e94 <HAL_ADC_MspInit+0x124>)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	2012      	movs	r0, #18
 8005e70:	f7fc fab9 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005e74:	2012      	movs	r0, #18
 8005e76:	f7fc fad2 	bl	800241e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005e7a:	bf00      	nop
 8005e7c:	3728      	adds	r7, #40	; 0x28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40012000 	.word	0x40012000
 8005e88:	40023800 	.word	0x40023800
 8005e8c:	40020000 	.word	0x40020000
 8005e90:	40020400 	.word	0x40020400
 8005e94:	20000290 	.word	0x20000290
 8005e98:	40026410 	.word	0x40026410

08005e9c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08a      	sub	sp, #40	; 0x28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ea4:	f107 0314 	add.w	r3, r7, #20
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	605a      	str	r2, [r3, #4]
 8005eae:	609a      	str	r2, [r3, #8]
 8005eb0:	60da      	str	r2, [r3, #12]
 8005eb2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1b      	ldr	r2, [pc, #108]	; (8005f28 <HAL_CAN_MspInit+0x8c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d130      	bne.n	8005f20 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005ebe:	4b1b      	ldr	r3, [pc, #108]	; (8005f2c <HAL_CAN_MspInit+0x90>)
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	4a1a      	ldr	r2, [pc, #104]	; (8005f2c <HAL_CAN_MspInit+0x90>)
 8005ec4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eca:	4b18      	ldr	r3, [pc, #96]	; (8005f2c <HAL_CAN_MspInit+0x90>)
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed2:	613b      	str	r3, [r7, #16]
 8005ed4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ed6:	4b15      	ldr	r3, [pc, #84]	; (8005f2c <HAL_CAN_MspInit+0x90>)
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eda:	4a14      	ldr	r2, [pc, #80]	; (8005f2c <HAL_CAN_MspInit+0x90>)
 8005edc:	f043 0302 	orr.w	r3, r3, #2
 8005ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ee2:	4b12      	ldr	r3, [pc, #72]	; (8005f2c <HAL_CAN_MspInit+0x90>)
 8005ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005eee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005efc:	2303      	movs	r3, #3
 8005efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005f00:	2309      	movs	r3, #9
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f04:	f107 0314 	add.w	r3, r7, #20
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4809      	ldr	r0, [pc, #36]	; (8005f30 <HAL_CAN_MspInit+0x94>)
 8005f0c:	f7fc fe18 	bl	8002b40 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8005f10:	2200      	movs	r2, #0
 8005f12:	2100      	movs	r1, #0
 8005f14:	2014      	movs	r0, #20
 8005f16:	f7fc fa66 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005f1a:	2014      	movs	r0, #20
 8005f1c:	f7fc fa7f 	bl	800241e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8005f20:	bf00      	nop
 8005f22:	3728      	adds	r7, #40	; 0x28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40006400 	.word	0x40006400
 8005f2c:	40023800 	.word	0x40023800
 8005f30:	40020400 	.word	0x40020400

08005f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f44:	d113      	bne.n	8005f6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f46:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <HAL_TIM_Base_MspInit+0x44>)
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	4a0b      	ldr	r2, [pc, #44]	; (8005f78 <HAL_TIM_Base_MspInit+0x44>)
 8005f4c:	f043 0301 	orr.w	r3, r3, #1
 8005f50:	6413      	str	r3, [r2, #64]	; 0x40
 8005f52:	4b09      	ldr	r3, [pc, #36]	; (8005f78 <HAL_TIM_Base_MspInit+0x44>)
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005f5e:	2200      	movs	r2, #0
 8005f60:	2100      	movs	r1, #0
 8005f62:	201c      	movs	r0, #28
 8005f64:	f7fc fa3f 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005f68:	201c      	movs	r0, #28
 8005f6a:	f7fc fa58 	bl	800241e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005f6e:	bf00      	nop
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	40023800 	.word	0x40023800

08005f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08a      	sub	sp, #40	; 0x28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f84:	f107 0314 	add.w	r3, r7, #20
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	605a      	str	r2, [r3, #4]
 8005f8e:	609a      	str	r2, [r3, #8]
 8005f90:	60da      	str	r2, [r3, #12]
 8005f92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a46      	ldr	r2, [pc, #280]	; (80060b4 <HAL_UART_MspInit+0x138>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	f040 8086 	bne.w	80060ac <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005fa0:	4b45      	ldr	r3, [pc, #276]	; (80060b8 <HAL_UART_MspInit+0x13c>)
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa4:	4a44      	ldr	r2, [pc, #272]	; (80060b8 <HAL_UART_MspInit+0x13c>)
 8005fa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005faa:	6413      	str	r3, [r2, #64]	; 0x40
 8005fac:	4b42      	ldr	r3, [pc, #264]	; (80060b8 <HAL_UART_MspInit+0x13c>)
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fb4:	613b      	str	r3, [r7, #16]
 8005fb6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fb8:	4b3f      	ldr	r3, [pc, #252]	; (80060b8 <HAL_UART_MspInit+0x13c>)
 8005fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbc:	4a3e      	ldr	r2, [pc, #248]	; (80060b8 <HAL_UART_MspInit+0x13c>)
 8005fbe:	f043 0308 	orr.w	r3, r3, #8
 8005fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8005fc4:	4b3c      	ldr	r3, [pc, #240]	; (80060b8 <HAL_UART_MspInit+0x13c>)
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005fd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005fe2:	2307      	movs	r3, #7
 8005fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005fe6:	f107 0314 	add.w	r3, r7, #20
 8005fea:	4619      	mov	r1, r3
 8005fec:	4833      	ldr	r0, [pc, #204]	; (80060bc <HAL_UART_MspInit+0x140>)
 8005fee:	f7fc fda7 	bl	8002b40 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005ff2:	4b33      	ldr	r3, [pc, #204]	; (80060c0 <HAL_UART_MspInit+0x144>)
 8005ff4:	4a33      	ldr	r2, [pc, #204]	; (80060c4 <HAL_UART_MspInit+0x148>)
 8005ff6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005ff8:	4b31      	ldr	r3, [pc, #196]	; (80060c0 <HAL_UART_MspInit+0x144>)
 8005ffa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ffe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006000:	4b2f      	ldr	r3, [pc, #188]	; (80060c0 <HAL_UART_MspInit+0x144>)
 8006002:	2200      	movs	r2, #0
 8006004:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006006:	4b2e      	ldr	r3, [pc, #184]	; (80060c0 <HAL_UART_MspInit+0x144>)
 8006008:	2200      	movs	r2, #0
 800600a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800600c:	4b2c      	ldr	r3, [pc, #176]	; (80060c0 <HAL_UART_MspInit+0x144>)
 800600e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006012:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006014:	4b2a      	ldr	r3, [pc, #168]	; (80060c0 <HAL_UART_MspInit+0x144>)
 8006016:	2200      	movs	r2, #0
 8006018:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800601a:	4b29      	ldr	r3, [pc, #164]	; (80060c0 <HAL_UART_MspInit+0x144>)
 800601c:	2200      	movs	r2, #0
 800601e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8006020:	4b27      	ldr	r3, [pc, #156]	; (80060c0 <HAL_UART_MspInit+0x144>)
 8006022:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006026:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006028:	4b25      	ldr	r3, [pc, #148]	; (80060c0 <HAL_UART_MspInit+0x144>)
 800602a:	2200      	movs	r2, #0
 800602c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800602e:	4b24      	ldr	r3, [pc, #144]	; (80060c0 <HAL_UART_MspInit+0x144>)
 8006030:	2200      	movs	r2, #0
 8006032:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006034:	4822      	ldr	r0, [pc, #136]	; (80060c0 <HAL_UART_MspInit+0x144>)
 8006036:	f7fc fa0d 	bl	8002454 <HAL_DMA_Init>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8006040:	f7ff fe66 	bl	8005d10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a1e      	ldr	r2, [pc, #120]	; (80060c0 <HAL_UART_MspInit+0x144>)
 8006048:	66da      	str	r2, [r3, #108]	; 0x6c
 800604a:	4a1d      	ldr	r2, [pc, #116]	; (80060c0 <HAL_UART_MspInit+0x144>)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8006050:	4b1d      	ldr	r3, [pc, #116]	; (80060c8 <HAL_UART_MspInit+0x14c>)
 8006052:	4a1e      	ldr	r2, [pc, #120]	; (80060cc <HAL_UART_MspInit+0x150>)
 8006054:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8006056:	4b1c      	ldr	r3, [pc, #112]	; (80060c8 <HAL_UART_MspInit+0x14c>)
 8006058:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800605c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800605e:	4b1a      	ldr	r3, [pc, #104]	; (80060c8 <HAL_UART_MspInit+0x14c>)
 8006060:	2240      	movs	r2, #64	; 0x40
 8006062:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006064:	4b18      	ldr	r3, [pc, #96]	; (80060c8 <HAL_UART_MspInit+0x14c>)
 8006066:	2200      	movs	r2, #0
 8006068:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800606a:	4b17      	ldr	r3, [pc, #92]	; (80060c8 <HAL_UART_MspInit+0x14c>)
 800606c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006070:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006072:	4b15      	ldr	r3, [pc, #84]	; (80060c8 <HAL_UART_MspInit+0x14c>)
 8006074:	2200      	movs	r2, #0
 8006076:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006078:	4b13      	ldr	r3, [pc, #76]	; (80060c8 <HAL_UART_MspInit+0x14c>)
 800607a:	2200      	movs	r2, #0
 800607c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800607e:	4b12      	ldr	r3, [pc, #72]	; (80060c8 <HAL_UART_MspInit+0x14c>)
 8006080:	2200      	movs	r2, #0
 8006082:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006084:	4b10      	ldr	r3, [pc, #64]	; (80060c8 <HAL_UART_MspInit+0x14c>)
 8006086:	2200      	movs	r2, #0
 8006088:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800608a:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <HAL_UART_MspInit+0x14c>)
 800608c:	2200      	movs	r2, #0
 800608e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006090:	480d      	ldr	r0, [pc, #52]	; (80060c8 <HAL_UART_MspInit+0x14c>)
 8006092:	f7fc f9df 	bl	8002454 <HAL_DMA_Init>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 800609c:	f7ff fe38 	bl	8005d10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a09      	ldr	r2, [pc, #36]	; (80060c8 <HAL_UART_MspInit+0x14c>)
 80060a4:	669a      	str	r2, [r3, #104]	; 0x68
 80060a6:	4a08      	ldr	r2, [pc, #32]	; (80060c8 <HAL_UART_MspInit+0x14c>)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80060ac:	bf00      	nop
 80060ae:	3728      	adds	r7, #40	; 0x28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	40004800 	.word	0x40004800
 80060b8:	40023800 	.word	0x40023800
 80060bc:	40020c00 	.word	0x40020c00
 80060c0:	20000100 	.word	0x20000100
 80060c4:	40026028 	.word	0x40026028
 80060c8:	200001e0 	.word	0x200001e0
 80060cc:	40026058 	.word	0x40026058

080060d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80060d4:	bf00      	nop
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060de:	b480      	push	{r7}
 80060e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80060e2:	e7fe      	b.n	80060e2 <HardFault_Handler+0x4>

080060e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80060e8:	e7fe      	b.n	80060e8 <MemManage_Handler+0x4>

080060ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80060ea:	b480      	push	{r7}
 80060ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80060ee:	e7fe      	b.n	80060ee <BusFault_Handler+0x4>

080060f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80060f0:	b480      	push	{r7}
 80060f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80060f4:	e7fe      	b.n	80060f4 <UsageFault_Handler+0x4>

080060f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80060f6:	b480      	push	{r7}
 80060f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80060fa:	bf00      	nop
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006104:	b480      	push	{r7}
 8006106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006108:	bf00      	nop
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006112:	b480      	push	{r7}
 8006114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006116:	bf00      	nop
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006124:	f7fa fc62 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006128:	bf00      	nop
 800612a:	bd80      	pop	{r7, pc}

0800612c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006130:	4802      	ldr	r0, [pc, #8]	; (800613c <DMA1_Stream1_IRQHandler+0x10>)
 8006132:	f7fc fa9d 	bl	8002670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006136:	bf00      	nop
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20000100 	.word	0x20000100

08006140 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006144:	4802      	ldr	r0, [pc, #8]	; (8006150 <DMA1_Stream3_IRQHandler+0x10>)
 8006146:	f7fc fa93 	bl	8002670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800614a:	bf00      	nop
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	200001e0 	.word	0x200001e0

08006154 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006158:	4802      	ldr	r0, [pc, #8]	; (8006164 <ADC_IRQHandler+0x10>)
 800615a:	f7fa fcab 	bl	8000ab4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800615e:	bf00      	nop
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20000248 	.word	0x20000248

08006168 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800616c:	4806      	ldr	r0, [pc, #24]	; (8006188 <CAN1_RX0_IRQHandler+0x20>)
 800616e:	f7fb fe2c 	bl	8001dca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  //inicial
  HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0 , &pRxHeader, buffer_Rx_msg);
 8006172:	4b06      	ldr	r3, [pc, #24]	; (800618c <CAN1_RX0_IRQHandler+0x24>)
 8006174:	4a06      	ldr	r2, [pc, #24]	; (8006190 <CAN1_RX0_IRQHandler+0x28>)
 8006176:	2100      	movs	r1, #0
 8006178:	4803      	ldr	r0, [pc, #12]	; (8006188 <CAN1_RX0_IRQHandler+0x20>)
 800617a:	f7fb fcee 	bl	8001b5a <HAL_CAN_GetRxMessage>
  FLAG_CAN=1;
 800617e:	4b05      	ldr	r3, [pc, #20]	; (8006194 <CAN1_RX0_IRQHandler+0x2c>)
 8006180:	2201      	movs	r2, #1
 8006182:	801a      	strh	r2, [r3, #0]
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006184:	bf00      	nop
 8006186:	bd80      	pop	{r7, pc}
 8006188:	20000330 	.word	0x20000330
 800618c:	20000040 	.word	0x20000040
 8006190:	2000009c 	.word	0x2000009c
 8006194:	2000003e 	.word	0x2000003e

08006198 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	static char now,last;
	now=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800619c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061a0:	4814      	ldr	r0, [pc, #80]	; (80061f4 <TIM2_IRQHandler+0x5c>)
 80061a2:	f7fc fe77 	bl	8002e94 <HAL_GPIO_ReadPin>
 80061a6:	4603      	mov	r3, r0
 80061a8:	461a      	mov	r2, r3
 80061aa:	4b13      	ldr	r3, [pc, #76]	; (80061f8 <TIM2_IRQHandler+0x60>)
 80061ac:	701a      	strb	r2, [r3, #0]
	if (now==1 && (now^last))   /// Doy un pulso
 80061ae:	4b12      	ldr	r3, [pc, #72]	; (80061f8 <TIM2_IRQHandler+0x60>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d10f      	bne.n	80061d6 <TIM2_IRQHandler+0x3e>
 80061b6:	4b10      	ldr	r3, [pc, #64]	; (80061f8 <TIM2_IRQHandler+0x60>)
 80061b8:	781a      	ldrb	r2, [r3, #0]
 80061ba:	4b10      	ldr	r3, [pc, #64]	; (80061fc <TIM2_IRQHandler+0x64>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d009      	beq.n	80061d6 <TIM2_IRQHandler+0x3e>
	{
		FLAG_OP = !FLAG_OP;
 80061c2:	4b0f      	ldr	r3, [pc, #60]	; (8006200 <TIM2_IRQHandler+0x68>)
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	bf0c      	ite	eq
 80061ca:	2301      	moveq	r3, #1
 80061cc:	2300      	movne	r3, #0
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <TIM2_IRQHandler+0x68>)
 80061d4:	801a      	strh	r2, [r3, #0]
	}

	  HAL_UART_Transmit_DMA(&huart3, info_motores, Info_motores_size);
 80061d6:	2212      	movs	r2, #18
 80061d8:	490a      	ldr	r1, [pc, #40]	; (8006204 <TIM2_IRQHandler+0x6c>)
 80061da:	480b      	ldr	r0, [pc, #44]	; (8006208 <TIM2_IRQHandler+0x70>)
 80061dc:	f7fe fc08 	bl	80049f0 <HAL_UART_Transmit_DMA>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80061e0:	480a      	ldr	r0, [pc, #40]	; (800620c <TIM2_IRQHandler+0x74>)
 80061e2:	f7fd ffc5 	bl	8004170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  last=now;
 80061e6:	4b04      	ldr	r3, [pc, #16]	; (80061f8 <TIM2_IRQHandler+0x60>)
 80061e8:	781a      	ldrb	r2, [r3, #0]
 80061ea:	4b04      	ldr	r3, [pc, #16]	; (80061fc <TIM2_IRQHandler+0x64>)
 80061ec:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 80061ee:	bf00      	nop
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	40020800 	.word	0x40020800
 80061f8:	20000038 	.word	0x20000038
 80061fc:	20000039 	.word	0x20000039
 8006200:	2000003c 	.word	0x2000003c
 8006204:	20000050 	.word	0x20000050
 8006208:	20000160 	.word	0x20000160
 800620c:	200002f0 	.word	0x200002f0

08006210 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006214:	4802      	ldr	r0, [pc, #8]	; (8006220 <DMA2_Stream0_IRQHandler+0x10>)
 8006216:	f7fc fa2b 	bl	8002670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
 // throttle=(int)promedio(ADC_val[0]);
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800621a:	bf00      	nop
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000290 	.word	0x20000290

08006224 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006228:	4b15      	ldr	r3, [pc, #84]	; (8006280 <SystemInit+0x5c>)
 800622a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622e:	4a14      	ldr	r2, [pc, #80]	; (8006280 <SystemInit+0x5c>)
 8006230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006238:	4b12      	ldr	r3, [pc, #72]	; (8006284 <SystemInit+0x60>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a11      	ldr	r2, [pc, #68]	; (8006284 <SystemInit+0x60>)
 800623e:	f043 0301 	orr.w	r3, r3, #1
 8006242:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006244:	4b0f      	ldr	r3, [pc, #60]	; (8006284 <SystemInit+0x60>)
 8006246:	2200      	movs	r2, #0
 8006248:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800624a:	4b0e      	ldr	r3, [pc, #56]	; (8006284 <SystemInit+0x60>)
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	490d      	ldr	r1, [pc, #52]	; (8006284 <SystemInit+0x60>)
 8006250:	4b0d      	ldr	r3, [pc, #52]	; (8006288 <SystemInit+0x64>)
 8006252:	4013      	ands	r3, r2
 8006254:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006256:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <SystemInit+0x60>)
 8006258:	4a0c      	ldr	r2, [pc, #48]	; (800628c <SystemInit+0x68>)
 800625a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800625c:	4b09      	ldr	r3, [pc, #36]	; (8006284 <SystemInit+0x60>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a08      	ldr	r2, [pc, #32]	; (8006284 <SystemInit+0x60>)
 8006262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006266:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006268:	4b06      	ldr	r3, [pc, #24]	; (8006284 <SystemInit+0x60>)
 800626a:	2200      	movs	r2, #0
 800626c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800626e:	4b04      	ldr	r3, [pc, #16]	; (8006280 <SystemInit+0x5c>)
 8006270:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006274:	609a      	str	r2, [r3, #8]
#endif
}
 8006276:	bf00      	nop
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	e000ed00 	.word	0xe000ed00
 8006284:	40023800 	.word	0x40023800
 8006288:	fef6ffff 	.word	0xfef6ffff
 800628c:	24003010 	.word	0x24003010

08006290 <Reset_Handler>:
 8006290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80062c8 <LoopFillZerobss+0x14>
 8006294:	2100      	movs	r1, #0
 8006296:	e003      	b.n	80062a0 <LoopCopyDataInit>

08006298 <CopyDataInit>:
 8006298:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <LoopFillZerobss+0x18>)
 800629a:	585b      	ldr	r3, [r3, r1]
 800629c:	5043      	str	r3, [r0, r1]
 800629e:	3104      	adds	r1, #4

080062a0 <LoopCopyDataInit>:
 80062a0:	480b      	ldr	r0, [pc, #44]	; (80062d0 <LoopFillZerobss+0x1c>)
 80062a2:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <LoopFillZerobss+0x20>)
 80062a4:	1842      	adds	r2, r0, r1
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d3f6      	bcc.n	8006298 <CopyDataInit>
 80062aa:	4a0b      	ldr	r2, [pc, #44]	; (80062d8 <LoopFillZerobss+0x24>)
 80062ac:	e002      	b.n	80062b4 <LoopFillZerobss>

080062ae <FillZerobss>:
 80062ae:	2300      	movs	r3, #0
 80062b0:	f842 3b04 	str.w	r3, [r2], #4

080062b4 <LoopFillZerobss>:
 80062b4:	4b09      	ldr	r3, [pc, #36]	; (80062dc <LoopFillZerobss+0x28>)
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d3f9      	bcc.n	80062ae <FillZerobss>
 80062ba:	f7ff ffb3 	bl	8006224 <SystemInit>
 80062be:	f000 f811 	bl	80062e4 <__libc_init_array>
 80062c2:	f7ff fa97 	bl	80057f4 <main>
 80062c6:	4770      	bx	lr
 80062c8:	20080000 	.word	0x20080000
 80062cc:	08006384 	.word	0x08006384
 80062d0:	20000000 	.word	0x20000000
 80062d4:	2000000c 	.word	0x2000000c
 80062d8:	2000000c 	.word	0x2000000c
 80062dc:	2000035c 	.word	0x2000035c

080062e0 <CAN1_RX1_IRQHandler>:
 80062e0:	e7fe      	b.n	80062e0 <CAN1_RX1_IRQHandler>
	...

080062e4 <__libc_init_array>:
 80062e4:	b570      	push	{r4, r5, r6, lr}
 80062e6:	4e0d      	ldr	r6, [pc, #52]	; (800631c <__libc_init_array+0x38>)
 80062e8:	4c0d      	ldr	r4, [pc, #52]	; (8006320 <__libc_init_array+0x3c>)
 80062ea:	1ba4      	subs	r4, r4, r6
 80062ec:	10a4      	asrs	r4, r4, #2
 80062ee:	2500      	movs	r5, #0
 80062f0:	42a5      	cmp	r5, r4
 80062f2:	d109      	bne.n	8006308 <__libc_init_array+0x24>
 80062f4:	4e0b      	ldr	r6, [pc, #44]	; (8006324 <__libc_init_array+0x40>)
 80062f6:	4c0c      	ldr	r4, [pc, #48]	; (8006328 <__libc_init_array+0x44>)
 80062f8:	f000 f820 	bl	800633c <_init>
 80062fc:	1ba4      	subs	r4, r4, r6
 80062fe:	10a4      	asrs	r4, r4, #2
 8006300:	2500      	movs	r5, #0
 8006302:	42a5      	cmp	r5, r4
 8006304:	d105      	bne.n	8006312 <__libc_init_array+0x2e>
 8006306:	bd70      	pop	{r4, r5, r6, pc}
 8006308:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800630c:	4798      	blx	r3
 800630e:	3501      	adds	r5, #1
 8006310:	e7ee      	b.n	80062f0 <__libc_init_array+0xc>
 8006312:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006316:	4798      	blx	r3
 8006318:	3501      	adds	r5, #1
 800631a:	e7f2      	b.n	8006302 <__libc_init_array+0x1e>
 800631c:	0800637c 	.word	0x0800637c
 8006320:	0800637c 	.word	0x0800637c
 8006324:	0800637c 	.word	0x0800637c
 8006328:	08006380 	.word	0x08006380

0800632c <memset>:
 800632c:	4402      	add	r2, r0
 800632e:	4603      	mov	r3, r0
 8006330:	4293      	cmp	r3, r2
 8006332:	d100      	bne.n	8006336 <memset+0xa>
 8006334:	4770      	bx	lr
 8006336:	f803 1b01 	strb.w	r1, [r3], #1
 800633a:	e7f9      	b.n	8006330 <memset+0x4>

0800633c <_init>:
 800633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633e:	bf00      	nop
 8006340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006342:	bc08      	pop	{r3}
 8006344:	469e      	mov	lr, r3
 8006346:	4770      	bx	lr

08006348 <_fini>:
 8006348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634a:	bf00      	nop
 800634c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800634e:	bc08      	pop	{r3}
 8006350:	469e      	mov	lr, r3
 8006352:	4770      	bx	lr

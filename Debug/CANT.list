
CANT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a58  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006c50  08006c50  00016c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c70  08006c70  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006c70  08006c70  00016c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c78  08006c78  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c78  08006c78  00016c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c7c  08006c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000014  08006c94  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08006c94  00020368  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136e7  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002914  00000000  00000000  00033729  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001068  00000000  00000000  00036040  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f00  00000000  00000000  000370a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028bdf  00000000  00000000  00037fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ef5b  00000000  00000000  00060b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fda59  00000000  00000000  0006fae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016d53b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a8  00000000  00000000  0016d5b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000014 	.word	0x20000014
 8000214:	00000000 	.word	0x00000000
 8000218:	08006c38 	.word	0x08006c38

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000018 	.word	0x20000018
 8000234:	08006c38 	.word	0x08006c38

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <can1_Tx>:
// mi driver para enviar info por can
// le doy el ID y el mensaje a enviar, y me devuelve un 1 si se envio correctamente, o un cero si tuvo algun error


char can1_Tx(uint16_t Id ,uint8_t mensaje [],uint8_t bytes)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	6039      	str	r1, [r7, #0]
 8000542:	80fb      	strh	r3, [r7, #6]
 8000544:	4613      	mov	r3, r2
 8000546:	717b      	strb	r3, [r7, #5]

	  if(HAL_CAN_IsTxMessagePending(&hcan1, CAN_TX_MAILBOX0) == 0)
 8000548:	2101      	movs	r1, #1
 800054a:	4832      	ldr	r0, [pc, #200]	; (8000614 <can1_Tx+0xdc>)
 800054c:	f001 fc85 	bl	8001e5a <HAL_CAN_IsTxMessagePending>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d118      	bne.n	8000588 <can1_Tx+0x50>
	  {
	  pHeader.DLC=bytes;
 8000556:	797b      	ldrb	r3, [r7, #5]
 8000558:	4a2f      	ldr	r2, [pc, #188]	; (8000618 <can1_Tx+0xe0>)
 800055a:	6113      	str	r3, [r2, #16]
	  pHeader.IDE=CAN_ID_STD;
 800055c:	4b2e      	ldr	r3, [pc, #184]	; (8000618 <can1_Tx+0xe0>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
	  pHeader.RTR=CAN_RTR_DATA;
 8000562:	4b2d      	ldr	r3, [pc, #180]	; (8000618 <can1_Tx+0xe0>)
 8000564:	2200      	movs	r2, #0
 8000566:	60da      	str	r2, [r3, #12]
	  pHeader.StdId=Id;
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	4a2b      	ldr	r2, [pc, #172]	; (8000618 <can1_Tx+0xe0>)
 800056c:	6013      	str	r3, [r2, #0]
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);

		  if(HAL_CAN_AddTxMessage(&hcan1, &pHeader, mensaje, &TxMailbox1) != HAL_OK )
 800056e:	4b2b      	ldr	r3, [pc, #172]	; (800061c <can1_Tx+0xe4>)
 8000570:	683a      	ldr	r2, [r7, #0]
 8000572:	4929      	ldr	r1, [pc, #164]	; (8000618 <can1_Tx+0xe0>)
 8000574:	4827      	ldr	r0, [pc, #156]	; (8000614 <can1_Tx+0xdc>)
 8000576:	f001 fb95 	bl	8001ca4 <HAL_CAN_AddTxMessage>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <can1_Tx+0x4c>
	  		{
	  				return HAL_ERROR;
 8000580:	2301      	movs	r3, #1
 8000582:	e042      	b.n	800060a <can1_Tx+0xd2>
	  		}
		  return HAL_OK;
 8000584:	2300      	movs	r3, #0
 8000586:	e040      	b.n	800060a <can1_Tx+0xd2>
	  }

	  else if(HAL_CAN_IsTxMessagePending(&hcan1, CAN_TX_MAILBOX1) == 0)
 8000588:	2102      	movs	r1, #2
 800058a:	4822      	ldr	r0, [pc, #136]	; (8000614 <can1_Tx+0xdc>)
 800058c:	f001 fc65 	bl	8001e5a <HAL_CAN_IsTxMessagePending>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d118      	bne.n	80005c8 <can1_Tx+0x90>
	  {
	  pHeader.DLC=bytes;
 8000596:	797b      	ldrb	r3, [r7, #5]
 8000598:	4a1f      	ldr	r2, [pc, #124]	; (8000618 <can1_Tx+0xe0>)
 800059a:	6113      	str	r3, [r2, #16]
	  pHeader.IDE=CAN_ID_STD;
 800059c:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <can1_Tx+0xe0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
	  pHeader.RTR=CAN_RTR_DATA;
 80005a2:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <can1_Tx+0xe0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
	  pHeader.StdId=Id;
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	4a1b      	ldr	r2, [pc, #108]	; (8000618 <can1_Tx+0xe0>)
 80005ac:	6013      	str	r3, [r2, #0]
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);

		  if(HAL_CAN_AddTxMessage(&hcan1, &pHeader, mensaje, &TxMailbox2) != HAL_OK )
 80005ae:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <can1_Tx+0xe8>)
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	4919      	ldr	r1, [pc, #100]	; (8000618 <can1_Tx+0xe0>)
 80005b4:	4817      	ldr	r0, [pc, #92]	; (8000614 <can1_Tx+0xdc>)
 80005b6:	f001 fb75 	bl	8001ca4 <HAL_CAN_AddTxMessage>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <can1_Tx+0x8c>
	  		{
	  				return HAL_ERROR;
 80005c0:	2301      	movs	r3, #1
 80005c2:	e022      	b.n	800060a <can1_Tx+0xd2>
	  		}
		  return HAL_OK;
 80005c4:	2300      	movs	r3, #0
 80005c6:	e020      	b.n	800060a <can1_Tx+0xd2>

	  }
	  else if(HAL_CAN_IsTxMessagePending(&hcan1, CAN_TX_MAILBOX2) == 0)
 80005c8:	2104      	movs	r1, #4
 80005ca:	4812      	ldr	r0, [pc, #72]	; (8000614 <can1_Tx+0xdc>)
 80005cc:	f001 fc45 	bl	8001e5a <HAL_CAN_IsTxMessagePending>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d118      	bne.n	8000608 <can1_Tx+0xd0>
	  {
	  pHeader.DLC=bytes;
 80005d6:	797b      	ldrb	r3, [r7, #5]
 80005d8:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <can1_Tx+0xe0>)
 80005da:	6113      	str	r3, [r2, #16]
	  pHeader.IDE=CAN_ID_STD;
 80005dc:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <can1_Tx+0xe0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
	  pHeader.RTR=CAN_RTR_DATA;
 80005e2:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <can1_Tx+0xe0>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
	  pHeader.StdId=Id;
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <can1_Tx+0xe0>)
 80005ec:	6013      	str	r3, [r2, #0]
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);

		  if(HAL_CAN_AddTxMessage(&hcan1, &pHeader, mensaje, &TxMailbox3) != HAL_OK )
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <can1_Tx+0xec>)
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	4909      	ldr	r1, [pc, #36]	; (8000618 <can1_Tx+0xe0>)
 80005f4:	4807      	ldr	r0, [pc, #28]	; (8000614 <can1_Tx+0xdc>)
 80005f6:	f001 fb55 	bl	8001ca4 <HAL_CAN_AddTxMessage>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <can1_Tx+0xcc>
	  		{
	  				return HAL_ERROR;
 8000600:	2301      	movs	r3, #1
 8000602:	e002      	b.n	800060a <can1_Tx+0xd2>
	  		}
		  return HAL_OK;
 8000604:	2300      	movs	r3, #0
 8000606:	e000      	b.n	800060a <can1_Tx+0xd2>
	  }
	  return HAL_ERROR;
 8000608:	2301      	movs	r3, #1
}
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000328 	.word	0x20000328
 8000618:	20000044 	.word	0x20000044
 800061c:	20000324 	.word	0x20000324
 8000620:	20000234 	.word	0x20000234
 8000624:	200001dc 	.word	0x200001dc

08000628 <run_motor_n>:
/*La funcion pone en movimiento el motor del nodo indicado, debe recibir
 *  el valor del nodo (1 o 2), el valor al cual se desea mover y el estado del nodo,
 *  si el nodo no se encuentra en estado operacional no se realiza accion*/

char run_motor_n(uint32_t pedal1,uint32_t pedal2)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
	static int now=0,last=0,node=1;
	uint32_t v,a,b,c,d;
	uint8_t VEL[8]; //velocidad a enviar por can.
		now=HAL_GetTick();
 8000632:	f000 fb71 	bl	8000d18 <HAL_GetTick>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	4b44      	ldr	r3, [pc, #272]	; (800074c <run_motor_n+0x124>)
 800063c:	601a      	str	r2, [r3, #0]
		// Actualizo valor de Velocidad
		if (now-last>50)			//ms??
 800063e:	4b43      	ldr	r3, [pc, #268]	; (800074c <run_motor_n+0x124>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4b43      	ldr	r3, [pc, #268]	; (8000750 <run_motor_n+0x128>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	2b32      	cmp	r3, #50	; 0x32
 800064a:	dd6d      	ble.n	8000728 <run_motor_n+0x100>
		{
		if (node==1)
 800064c:	4b41      	ldr	r3, [pc, #260]	; (8000754 <run_motor_n+0x12c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d10d      	bne.n	8000670 <run_motor_n+0x48>
			v=(pedal1*500)/4095;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800065a:	fb02 f203 	mul.w	r2, r2, r3
 800065e:	4b3e      	ldr	r3, [pc, #248]	; (8000758 <run_motor_n+0x130>)
 8000660:	fba3 1302 	umull	r1, r3, r3, r2
 8000664:	1ad2      	subs	r2, r2, r3
 8000666:	0852      	lsrs	r2, r2, #1
 8000668:	4413      	add	r3, r2
 800066a:	0adb      	lsrs	r3, r3, #11
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
 800066e:	e010      	b.n	8000692 <run_motor_n+0x6a>
		else if(node==2)
 8000670:	4b38      	ldr	r3, [pc, #224]	; (8000754 <run_motor_n+0x12c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b02      	cmp	r3, #2
 8000676:	d10c      	bne.n	8000692 <run_motor_n+0x6a>
			v=(pedal2*500)/4095;
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800067e:	fb02 f203 	mul.w	r2, r2, r3
 8000682:	4b35      	ldr	r3, [pc, #212]	; (8000758 <run_motor_n+0x130>)
 8000684:	fba3 1302 	umull	r1, r3, r3, r2
 8000688:	1ad2      	subs	r2, r2, r3
 800068a:	0852      	lsrs	r2, r2, #1
 800068c:	4413      	add	r3, r2
 800068e:	0adb      	lsrs	r3, r3, #11
 8000690:	627b      	str	r3, [r7, #36]	; 0x24

		if (v<10)
 8000692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000694:	2b09      	cmp	r3, #9
 8000696:	d801      	bhi.n	800069c <run_motor_n+0x74>
			v=0;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	; 0x24

		a=((v)&(0x000000FF));
 800069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	623b      	str	r3, [r7, #32]
		b=((v)&(0x0000FF00))>>(8);
 80006a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	61fb      	str	r3, [r7, #28]
		c=((v)&(0x00FF0000))>>(16);
 80006aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ac:	0c1b      	lsrs	r3, r3, #16
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	61bb      	str	r3, [r7, #24]
		d=((v)&(0xFF000000))>>(24);
 80006b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b4:	0e1b      	lsrs	r3, r3, #24
 80006b6:	617b      	str	r3, [r7, #20]
		VEL[0]=0x23;
 80006b8:	2323      	movs	r3, #35	; 0x23
 80006ba:	733b      	strb	r3, [r7, #12]
		VEL[1]=0xff;
 80006bc:	23ff      	movs	r3, #255	; 0xff
 80006be:	737b      	strb	r3, [r7, #13]
		VEL[2]=0x60;
 80006c0:	2360      	movs	r3, #96	; 0x60
 80006c2:	73bb      	strb	r3, [r7, #14]
		VEL[3]=0x00;  	 		//subindex
 80006c4:	2300      	movs	r3, #0
 80006c6:	73fb      	strb	r3, [r7, #15]
		VEL[4]=a;
 80006c8:	6a3b      	ldr	r3, [r7, #32]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	743b      	strb	r3, [r7, #16]
		VEL[5]=b;
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	747b      	strb	r3, [r7, #17]
		VEL[6]=c;
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	74bb      	strb	r3, [r7, #18]
		VEL[7]=d;
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	74fb      	strb	r3, [r7, #19]
			if(can1_Tx(0x600+node,VEL,8)!=HAL_OK)
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <run_motor_n+0x12c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	f107 010c 	add.w	r1, r7, #12
 80006f0:	2208      	movs	r2, #8
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff20 	bl	8000538 <can1_Tx>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d003      	beq.n	8000706 <run_motor_n+0xde>
				{
					Error_Handler();
 80006fe:	f005 ff2d 	bl	800655c <Error_Handler>
					return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	e01d      	b.n	8000742 <run_motor_n+0x11a>
				}
		last=now;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <run_motor_n+0x124>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a11      	ldr	r2, [pc, #68]	; (8000750 <run_motor_n+0x128>)
 800070c:	6013      	str	r3, [r2, #0]
		node++;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <run_motor_n+0x12c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	3301      	adds	r3, #1
 8000714:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <run_motor_n+0x12c>)
 8000716:	6013      	str	r3, [r2, #0]
		if(node==3)
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <run_motor_n+0x12c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b03      	cmp	r3, #3
 800071e:	d10f      	bne.n	8000740 <run_motor_n+0x118>
			node=1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <run_motor_n+0x12c>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	e00b      	b.n	8000740 <run_motor_n+0x118>
		}
		else if (now<last)
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <run_motor_n+0x124>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <run_motor_n+0x128>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	429a      	cmp	r2, r3
 8000732:	da03      	bge.n	800073c <run_motor_n+0x114>
			last=0;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <run_motor_n+0x128>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	e001      	b.n	8000740 <run_motor_n+0x118>
		else
		{
			return HAL_OK;
 800073c:	2300      	movs	r3, #0
 800073e:	e000      	b.n	8000742 <run_motor_n+0x11a>
		}
	return HAL_OK;
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3728      	adds	r7, #40	; 0x28
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000030 	.word	0x20000030
 8000750:	20000034 	.word	0x20000034
 8000754:	20000000 	.word	0x20000000
 8000758:	00100101 	.word	0x00100101

0800075c <send_ctrlwrd_1>:

int send_ctrlwrd_1(uint16_t node)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	80fb      	strh	r3, [r7, #6]
	uint8_t CTRL_WORD[8]; // activar motores
	CTRL_WORD[0]=0x2B;
 8000766:	232b      	movs	r3, #43	; 0x2b
 8000768:	723b      	strb	r3, [r7, #8]
	CTRL_WORD[1]=0x40;
 800076a:	2340      	movs	r3, #64	; 0x40
 800076c:	727b      	strb	r3, [r7, #9]
	CTRL_WORD[2]=0x60;
 800076e:	2360      	movs	r3, #96	; 0x60
 8000770:	72bb      	strb	r3, [r7, #10]
	CTRL_WORD[3]=0x00;
 8000772:	2300      	movs	r3, #0
 8000774:	72fb      	strb	r3, [r7, #11]
	CTRL_WORD[4]=0x06;
 8000776:	2306      	movs	r3, #6
 8000778:	733b      	strb	r3, [r7, #12]
	CTRL_WORD[5]=0x00;
 800077a:	2300      	movs	r3, #0
 800077c:	737b      	strb	r3, [r7, #13]
	CTRL_WORD[6]=0x00;
 800077e:	2300      	movs	r3, #0
 8000780:	73bb      	strb	r3, [r7, #14]
	CTRL_WORD[7]=0x00;
 8000782:	2300      	movs	r3, #0
 8000784:	73fb      	strb	r3, [r7, #15]
	if(can1_Tx(0x600+node,CTRL_WORD,8)!=HAL_OK)
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800078c:	b29b      	uxth	r3, r3
 800078e:	f107 0108 	add.w	r1, r7, #8
 8000792:	2208      	movs	r2, #8
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fecf 	bl	8000538 <can1_Tx>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d003      	beq.n	80007a8 <send_ctrlwrd_1+0x4c>
	{
		Error_Handler();
 80007a0:	f005 fedc 	bl	800655c <Error_Handler>
		return HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e000      	b.n	80007aa <send_ctrlwrd_1+0x4e>
	}
	return HAL_OK;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <send_ctrlword_2>:

int send_ctrlword_2(uint16_t node)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b084      	sub	sp, #16
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	80fb      	strh	r3, [r7, #6]
	uint8_t CTRL_WORD[8]; // activar motores

	CTRL_WORD[0]=0x2B;
 80007bc:	232b      	movs	r3, #43	; 0x2b
 80007be:	723b      	strb	r3, [r7, #8]
	CTRL_WORD[1]=0x40;
 80007c0:	2340      	movs	r3, #64	; 0x40
 80007c2:	727b      	strb	r3, [r7, #9]
	CTRL_WORD[2]=0x60;
 80007c4:	2360      	movs	r3, #96	; 0x60
 80007c6:	72bb      	strb	r3, [r7, #10]
	CTRL_WORD[3]=0x00;
 80007c8:	2300      	movs	r3, #0
 80007ca:	72fb      	strb	r3, [r7, #11]
	CTRL_WORD[4]=0x0F;
 80007cc:	230f      	movs	r3, #15
 80007ce:	733b      	strb	r3, [r7, #12]
	CTRL_WORD[5]=0x00;
 80007d0:	2300      	movs	r3, #0
 80007d2:	737b      	strb	r3, [r7, #13]
	CTRL_WORD[6]=0x00;
 80007d4:	2300      	movs	r3, #0
 80007d6:	73bb      	strb	r3, [r7, #14]
	CTRL_WORD[7]=0x00;
 80007d8:	2300      	movs	r3, #0
 80007da:	73fb      	strb	r3, [r7, #15]

	if(can1_Tx(0x600+node,CTRL_WORD,8)!=HAL_OK)
 80007dc:	88fb      	ldrh	r3, [r7, #6]
 80007de:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	f107 0108 	add.w	r1, r7, #8
 80007e8:	2208      	movs	r2, #8
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fea4 	bl	8000538 <can1_Tx>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d003      	beq.n	80007fe <send_ctrlword_2+0x4c>
	{
		Error_Handler();
 80007f6:	f005 feb1 	bl	800655c <Error_Handler>
		return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <send_ctrlword_2+0x4e>
	}
	return HAL_OK;
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <analize_CAN_Rx>:

// Recibo Mensaje-- debo pasarle las variables donde voy a guardar el ID, y el mensaje:
char analize_CAN_Rx(uint32_t Id,uint8_t DLC,uint8_t mensaje [])
{
 8000808:	b480      	push	{r7}
 800080a:	b08d      	sub	sp, #52	; 0x34
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	460b      	mov	r3, r1
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	72fb      	strb	r3, [r7, #11]
	int info,B1,B2,B3,B4;
	uint16_t index,command_byte=0;		//,subindex
 8000816:	2300      	movs	r3, #0
 8000818:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint8_t ccs,contador,nodo;

	/*Vamos a analizar casos: mensaje de bootup, y mensaje sdo, podriamos agregar pdo en un futuro*/
	/*ORDEN DE REVISION: MENSAJES DE MAYOR A MENOR ID*/
		if(Id>0x700)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000820:	d913      	bls.n	800084a <analize_CAN_Rx+0x42>
		{
			nodo=Id-0x700;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			if(status[nodo-1]==WFBOOTUP)
 8000828:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800082c:	3b01      	subs	r3, #1
 800082e:	4a74      	ldr	r2, [pc, #464]	; (8000a00 <analize_CAN_Rx+0x1f8>)
 8000830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000834:	2b01      	cmp	r3, #1
 8000836:	f040 80dc 	bne.w	80009f2 <analize_CAN_Rx+0x1ea>
				status[nodo-1]=GOTOPREOPERATIONAL;
 800083a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800083e:	3b01      	subs	r3, #1
 8000840:	4a6f      	ldr	r2, [pc, #444]	; (8000a00 <analize_CAN_Rx+0x1f8>)
 8000842:	2102      	movs	r1, #2
 8000844:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000848:	e0d3      	b.n	80009f2 <analize_CAN_Rx+0x1ea>
		}
		// con revisar que sea mayor a cero  me alcanza porque sino hubiese entrado en el caso anterior
		else if (Id>0x600)
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000850:	d901      	bls.n	8000856 <analize_CAN_Rx+0x4e>
			// ESTO NO DEBERIA PASAR, FILTRAR ANTES
		{
			return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e0ce      	b.n	80009f4 <analize_CAN_Rx+0x1ec>
		}
		else if (Id>0x580)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800085c:	f240 80c9 	bls.w	80009f2 <analize_CAN_Rx+0x1ea>
			// primero debo analizar el byte de comando
			// Analisis CANOPEN
		{
		nodo=Id-0x580;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	3b80      	subs	r3, #128	; 0x80
 8000866:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		index= (mensaje[1]<<(8))|mensaje[2]	;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3301      	adds	r3, #1
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	021b      	lsls	r3, r3, #8
 8000872:	b21a      	sxth	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3302      	adds	r3, #2
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b21b      	sxth	r3, r3
 800087c:	4313      	orrs	r3, r2
 800087e:	b21b      	sxth	r3, r3
 8000880:	857b      	strh	r3, [r7, #42]	; 0x2a
		command_byte=mensaje[0];
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	85fb      	strh	r3, [r7, #46]	; 0x2e
		ccs=(command_byte&ccs_MSK)>>(5);
 8000888:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800088a:	115b      	asrs	r3, r3, #5
 800088c:	b2db      	uxtb	r3, r3
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		info=0;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
		if(nodo<0)
			return HAL_ERROR;
		B1=mensaje[7];
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3307      	adds	r3, #7
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	623b      	str	r3, [r7, #32]
		B2=mensaje[6];
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3306      	adds	r3, #6
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	61fb      	str	r3, [r7, #28]
		B3=mensaje[5];
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3305      	adds	r3, #5
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	61bb      	str	r3, [r7, #24]
		B4=mensaje[4];
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3304      	adds	r3, #4
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	617b      	str	r3, [r7, #20]
		info=B1<<(24)|B2<<(16)|B3<<(8)|B4;
 80008ba:	6a3b      	ldr	r3, [r7, #32]
 80008bc:	061a      	lsls	r2, r3, #24
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	041b      	lsls	r3, r3, #16
 80008c2:	431a      	orrs	r2, r3
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	021b      	lsls	r3, r3, #8
 80008c8:	4313      	orrs	r3, r2
 80008ca:	697a      	ldr	r2, [r7, #20]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24

			if (index==VELOCITY)	        //velocity actual value
 80008d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008d2:	f646 4260 	movw	r2, #27744	; 0x6c60
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d107      	bne.n	80008ea <analize_CAN_Rx+0xe2>
			{
				velocity[nodo-1]=info;
 80008da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80008de:	3b01      	subs	r3, #1
 80008e0:	4948      	ldr	r1, [pc, #288]	; (8000a04 <analize_CAN_Rx+0x1fc>)
 80008e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80008e8:	e083      	b.n	80009f2 <analize_CAN_Rx+0x1ea>
			}
			else if (index==DCLINK)	    //DC Link actual voltage
 80008ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008ec:	f647 1260 	movw	r2, #31072	; 0x7960
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d108      	bne.n	8000906 <analize_CAN_Rx+0xfe>
			{
				DcLink[nodo-1]=info;
 80008f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80008f8:	3b01      	subs	r3, #1
 80008fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008fc:	b211      	sxth	r1, r2
 80008fe:	4a42      	ldr	r2, [pc, #264]	; (8000a08 <analize_CAN_Rx+0x200>)
 8000900:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000904:	e075      	b.n	80009f2 <analize_CAN_Rx+0x1ea>
			}
			else if (index==DC_CURRENT) 	//DC Current
 8000906:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000908:	f242 3220 	movw	r2, #8992	; 0x2320
 800090c:	4293      	cmp	r3, r2
 800090e:	d107      	bne.n	8000920 <analize_CAN_Rx+0x118>
			{
				DcCurrent[nodo-1]=info;
 8000910:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000914:	3b01      	subs	r3, #1
 8000916:	493d      	ldr	r1, [pc, #244]	; (8000a0c <analize_CAN_Rx+0x204>)
 8000918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800091a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800091e:	e068      	b.n	80009f2 <analize_CAN_Rx+0x1ea>
			}
			else if (index==MOTOR_TEMP)		//Motor Temp
 8000920:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000922:	f242 5220 	movw	r2, #9504	; 0x2520
 8000926:	4293      	cmp	r3, r2
 8000928:	d107      	bne.n	800093a <analize_CAN_Rx+0x132>
			{
				MotorTemp[nodo-1]=info;
 800092a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800092e:	3b01      	subs	r3, #1
 8000930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000932:	b2d1      	uxtb	r1, r2
 8000934:	4a36      	ldr	r2, [pc, #216]	; (8000a10 <analize_CAN_Rx+0x208>)
 8000936:	54d1      	strb	r1, [r2, r3]
 8000938:	e05b      	b.n	80009f2 <analize_CAN_Rx+0x1ea>
			}
			else if (index==MOTOR_CRR)		// Motor Current Actual Value
 800093a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800093c:	f647 0260 	movw	r2, #30816	; 0x7860
 8000940:	4293      	cmp	r3, r2
 8000942:	d107      	bne.n	8000954 <analize_CAN_Rx+0x14c>
			{
				MotorCrr[nodo-1]=info;
 8000944:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000948:	3b01      	subs	r3, #1
 800094a:	4932      	ldr	r1, [pc, #200]	; (8000a14 <analize_CAN_Rx+0x20c>)
 800094c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800094e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000952:	e04e      	b.n	80009f2 <analize_CAN_Rx+0x1ea>
			}
			else if (index==TORQUE)		//Torque Actual Value
 8000954:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000956:	f247 7260 	movw	r2, #30560	; 0x7760
 800095a:	4293      	cmp	r3, r2
 800095c:	d108      	bne.n	8000970 <analize_CAN_Rx+0x168>
			{
				Torque[nodo-1]=info;
 800095e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000962:	3b01      	subs	r3, #1
 8000964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000966:	b211      	sxth	r1, r2
 8000968:	4a2b      	ldr	r2, [pc, #172]	; (8000a18 <analize_CAN_Rx+0x210>)
 800096a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800096e:	e040      	b.n	80009f2 <analize_CAN_Rx+0x1ea>
			}
			else if (index==VELOCITY_AVG)		// Velocity actual value AVG
 8000970:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000972:	f248 6220 	movw	r2, #34336	; 0x8620
 8000976:	4293      	cmp	r3, r2
 8000978:	d107      	bne.n	800098a <analize_CAN_Rx+0x182>
			{
				VelocityAVG[nodo-1]=info;
 800097a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800097e:	3b01      	subs	r3, #1
 8000980:	4926      	ldr	r1, [pc, #152]	; (8000a1c <analize_CAN_Rx+0x214>)
 8000982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000988:	e033      	b.n	80009f2 <analize_CAN_Rx+0x1ea>
			}
			else if (index==CONTROLLER_TEMP)		//controller temperature
 800098a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800098c:	f242 6220 	movw	r2, #9760	; 0x2620
 8000990:	4293      	cmp	r3, r2
 8000992:	d107      	bne.n	80009a4 <analize_CAN_Rx+0x19c>
			{
				ControllerTemp[nodo-1]=info;
 8000994:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000998:	3b01      	subs	r3, #1
 800099a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800099c:	b2d1      	uxtb	r1, r2
 800099e:	4a20      	ldr	r2, [pc, #128]	; (8000a20 <analize_CAN_Rx+0x218>)
 80009a0:	54d1      	strb	r1, [r2, r3]
 80009a2:	e026      	b.n	80009f2 <analize_CAN_Rx+0x1ea>
			}
			else if (index==PHASE_A_CRR)		//Velocity actual Value
 80009a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80009a6:	f5b3 6f72 	cmp.w	r3, #3872	; 0xf20
 80009aa:	d108      	bne.n	80009be <analize_CAN_Rx+0x1b6>
			{
				Phase_A_Crr[nodo-1]=info;
 80009ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80009b0:	3b01      	subs	r3, #1
 80009b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009b4:	b211      	sxth	r1, r2
 80009b6:	4a1b      	ldr	r2, [pc, #108]	; (8000a24 <analize_CAN_Rx+0x21c>)
 80009b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009bc:	e019      	b.n	80009f2 <analize_CAN_Rx+0x1ea>
			}
			else if (index==PHASE_B_CRR)		//Velocity actual Value
 80009be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80009c0:	f5b3 5f81 	cmp.w	r3, #4128	; 0x1020
 80009c4:	d108      	bne.n	80009d8 <analize_CAN_Rx+0x1d0>
			{
				Phase_B_Crr[nodo-1]=info;
 80009c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80009ca:	3b01      	subs	r3, #1
 80009cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ce:	b211      	sxth	r1, r2
 80009d0:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <analize_CAN_Rx+0x220>)
 80009d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009d6:	e00c      	b.n	80009f2 <analize_CAN_Rx+0x1ea>
			}
			else if (index==WARNINGS)		//Velocity actual Value
 80009d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80009da:	f242 7220 	movw	r2, #10016	; 0x2720
 80009de:	4293      	cmp	r3, r2
 80009e0:	d107      	bne.n	80009f2 <analize_CAN_Rx+0x1ea>
			{
				Warnings[nodo-1]=info;
 80009e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80009e6:	3b01      	subs	r3, #1
 80009e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ea:	b211      	sxth	r1, r2
 80009ec:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <analize_CAN_Rx+0x224>)
 80009ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}


	  return HAL_OK ;
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3734      	adds	r7, #52	; 0x34
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	20000358 	.word	0x20000358
 8000a04:	200002a0 	.word	0x200002a0
 8000a08:	20000174 	.word	0x20000174
 8000a0c:	200002b4 	.word	0x200002b4
 8000a10:	20000364 	.word	0x20000364
 8000a14:	20000238 	.word	0x20000238
 8000a18:	20000170 	.word	0x20000170
 8000a1c:	2000035c 	.word	0x2000035c
 8000a20:	200001e8 	.word	0x200001e8
 8000a24:	20000088 	.word	0x20000088
 8000a28:	200002a8 	.word	0x200002a8
 8000a2c:	200002c4 	.word	0x200002c4

08000a30 <ask_for_info>:

/*La funcion envia el mensaje SDO para pedir data al nodo indicado*/

int ask_for_info(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
	/*inicio la variable en cero, voy a pedir 9 datos*/
	static int now=0,last=0;
	static uint8_t node=1,contador=1;
	uint8_t PIDO_INFO[8];
	PIDO_INFO[3]=0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	70fb      	strb	r3, [r7, #3]
	PIDO_INFO[4]=0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	713b      	strb	r3, [r7, #4]
	PIDO_INFO[5]=0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	717b      	strb	r3, [r7, #5]
	PIDO_INFO[6]=0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	71bb      	strb	r3, [r7, #6]
	PIDO_INFO[7]=0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	71fb      	strb	r3, [r7, #7]
	/*primero command byte, luego index y subindex*/
	now=HAL_GetTick();
 8000a4a:	f000 f965 	bl	8000d18 <HAL_GetTick>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b52      	ldr	r3, [pc, #328]	; (8000b9c <ask_for_info+0x16c>)
 8000a54:	601a      	str	r2, [r3, #0]
	if (now-last>10)			//ms??
 8000a56:	4b51      	ldr	r3, [pc, #324]	; (8000b9c <ask_for_info+0x16c>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	4b51      	ldr	r3, [pc, #324]	; (8000ba0 <ask_for_info+0x170>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	2b0a      	cmp	r3, #10
 8000a62:	f340 8096 	ble.w	8000b92 <ask_for_info+0x162>
	{
	PIDO_INFO[0]=0x40;
 8000a66:	2340      	movs	r3, #64	; 0x40
 8000a68:	703b      	strb	r3, [r7, #0]
	if (contador==1)	//velocity actual value
 8000a6a:	4b4e      	ldr	r3, [pc, #312]	; (8000ba4 <ask_for_info+0x174>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d104      	bne.n	8000a7c <ask_for_info+0x4c>
	{
		PIDO_INFO[1]=((VELOCITY)&(0xFF00))>>(8);
 8000a72:	236c      	movs	r3, #108	; 0x6c
 8000a74:	707b      	strb	r3, [r7, #1]
		PIDO_INFO[2]=(VELOCITY)&(0x00FF);
 8000a76:	2360      	movs	r3, #96	; 0x60
 8000a78:	70bb      	strb	r3, [r7, #2]
 8000a7a:	e05c      	b.n	8000b36 <ask_for_info+0x106>
	}
	else if (contador==2)	//DC Link Actual Voltage
 8000a7c:	4b49      	ldr	r3, [pc, #292]	; (8000ba4 <ask_for_info+0x174>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d104      	bne.n	8000a8e <ask_for_info+0x5e>
	{
		PIDO_INFO[1]=(DCLINK&(0xFF00))>>8;
 8000a84:	2379      	movs	r3, #121	; 0x79
 8000a86:	707b      	strb	r3, [r7, #1]
		PIDO_INFO[2]=DCLINK&(0x00FF);
 8000a88:	2360      	movs	r3, #96	; 0x60
 8000a8a:	70bb      	strb	r3, [r7, #2]
 8000a8c:	e053      	b.n	8000b36 <ask_for_info+0x106>
	}
	else if (contador==3)	//Dc Current
 8000a8e:	4b45      	ldr	r3, [pc, #276]	; (8000ba4 <ask_for_info+0x174>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d104      	bne.n	8000aa0 <ask_for_info+0x70>
	{
		PIDO_INFO[1]=(DC_CURRENT&(0xFF00))>>8;
 8000a96:	2323      	movs	r3, #35	; 0x23
 8000a98:	707b      	strb	r3, [r7, #1]
		PIDO_INFO[2]=DC_CURRENT&(0x00FF);
 8000a9a:	2320      	movs	r3, #32
 8000a9c:	70bb      	strb	r3, [r7, #2]
 8000a9e:	e04a      	b.n	8000b36 <ask_for_info+0x106>
	}
	else if (contador==4)	//Motor Temperature
 8000aa0:	4b40      	ldr	r3, [pc, #256]	; (8000ba4 <ask_for_info+0x174>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b04      	cmp	r3, #4
 8000aa6:	d104      	bne.n	8000ab2 <ask_for_info+0x82>
	{
		PIDO_INFO[1]=(MOTOR_TEMP&(0xFF00))>>8;
 8000aa8:	2325      	movs	r3, #37	; 0x25
 8000aaa:	707b      	strb	r3, [r7, #1]
		PIDO_INFO[2]=MOTOR_TEMP&(0x00FF);
 8000aac:	2320      	movs	r3, #32
 8000aae:	70bb      	strb	r3, [r7, #2]
 8000ab0:	e041      	b.n	8000b36 <ask_for_info+0x106>
	}
	else if (contador==5)	//Motor current actual value
 8000ab2:	4b3c      	ldr	r3, [pc, #240]	; (8000ba4 <ask_for_info+0x174>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b05      	cmp	r3, #5
 8000ab8:	d106      	bne.n	8000ac8 <ask_for_info+0x98>
	{
		PIDO_INFO[1]=(MOTOR_CRR&(0xFF00))>>8;
 8000aba:	2378      	movs	r3, #120	; 0x78
 8000abc:	707b      	strb	r3, [r7, #1]
		PIDO_INFO[2]=MOTOR_CRR&(0x00FF);
 8000abe:	2360      	movs	r3, #96	; 0x60
 8000ac0:	70bb      	strb	r3, [r7, #2]
		PIDO_INFO[3]=MOTOR_CRR_SUB;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	70fb      	strb	r3, [r7, #3]
 8000ac6:	e036      	b.n	8000b36 <ask_for_info+0x106>

	}
	else if (contador==6)	//Torque Actual Value
 8000ac8:	4b36      	ldr	r3, [pc, #216]	; (8000ba4 <ask_for_info+0x174>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b06      	cmp	r3, #6
 8000ace:	d104      	bne.n	8000ada <ask_for_info+0xaa>
	{
		PIDO_INFO[1]=(TORQUE&(0xFF00))>>8;
 8000ad0:	2377      	movs	r3, #119	; 0x77
 8000ad2:	707b      	strb	r3, [r7, #1]
		PIDO_INFO[2]=TORQUE&(0x00FF);
 8000ad4:	2360      	movs	r3, #96	; 0x60
 8000ad6:	70bb      	strb	r3, [r7, #2]
 8000ad8:	e02d      	b.n	8000b36 <ask_for_info+0x106>
	}
	else if (contador==7)	//velocity AVG
 8000ada:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <ask_for_info+0x174>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b07      	cmp	r3, #7
 8000ae0:	d104      	bne.n	8000aec <ask_for_info+0xbc>
	{
		PIDO_INFO[1]=(VELOCITY_AVG&(0xFF00))>>8;
 8000ae2:	2386      	movs	r3, #134	; 0x86
 8000ae4:	707b      	strb	r3, [r7, #1]
		PIDO_INFO[2]=VELOCITY_AVG&(0x00FF);
 8000ae6:	2320      	movs	r3, #32
 8000ae8:	70bb      	strb	r3, [r7, #2]
 8000aea:	e024      	b.n	8000b36 <ask_for_info+0x106>
	}
	else if (contador==8)	//Controller TEMP
 8000aec:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <ask_for_info+0x174>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b08      	cmp	r3, #8
 8000af2:	d106      	bne.n	8000b02 <ask_for_info+0xd2>
	{
		PIDO_INFO[1]=(CONTROLLER_TEMP&(0xFF00))>>8;
 8000af4:	2326      	movs	r3, #38	; 0x26
 8000af6:	707b      	strb	r3, [r7, #1]
		PIDO_INFO[2]=CONTROLLER_TEMP&(0x00FF);
 8000af8:	2320      	movs	r3, #32
 8000afa:	70bb      	strb	r3, [r7, #2]
		PIDO_INFO[3]=CONTROLLER_TEMP_SUB;
 8000afc:	2301      	movs	r3, #1
 8000afe:	70fb      	strb	r3, [r7, #3]
 8000b00:	e019      	b.n	8000b36 <ask_for_info+0x106>
	}
	else if (contador==9)	//controller temperature
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <ask_for_info+0x174>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b09      	cmp	r3, #9
 8000b08:	d104      	bne.n	8000b14 <ask_for_info+0xe4>
	{
		PIDO_INFO[1]=(PHASE_A_CRR&(0xFF00))>>8;
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	707b      	strb	r3, [r7, #1]
		PIDO_INFO[2]=PHASE_A_CRR&(0x00FF);
 8000b0e:	2320      	movs	r3, #32
 8000b10:	70bb      	strb	r3, [r7, #2]
 8000b12:	e010      	b.n	8000b36 <ask_for_info+0x106>

	}
	else if (contador==10)	//corriente en fase b
 8000b14:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <ask_for_info+0x174>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b0a      	cmp	r3, #10
 8000b1a:	d104      	bne.n	8000b26 <ask_for_info+0xf6>
	{
		PIDO_INFO[1]=(PHASE_B_CRR&(0xFF00))>>8;
 8000b1c:	2310      	movs	r3, #16
 8000b1e:	707b      	strb	r3, [r7, #1]
		PIDO_INFO[2]=PHASE_B_CRR&(0x00FF);
 8000b20:	2320      	movs	r3, #32
 8000b22:	70bb      	strb	r3, [r7, #2]
 8000b24:	e007      	b.n	8000b36 <ask_for_info+0x106>
	}
	else if (contador==11)	//corriente en fase b
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <ask_for_info+0x174>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b0b      	cmp	r3, #11
 8000b2c:	d103      	bne.n	8000b36 <ask_for_info+0x106>
	{
		PIDO_INFO[1]=(WARNINGS&(0xFF00))>>8;
 8000b2e:	2327      	movs	r3, #39	; 0x27
 8000b30:	707b      	strb	r3, [r7, #1]
		PIDO_INFO[2]=WARNINGS&(0x00FF);
 8000b32:	2320      	movs	r3, #32
 8000b34:	70bb      	strb	r3, [r7, #2]
	}


	if(can1_Tx(0x600+node,PIDO_INFO,8)==HAL_OK)
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <ask_for_info+0x178>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	4639      	mov	r1, r7
 8000b44:	2208      	movs	r2, #8
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fcf6 	bl	8000538 <can1_Tx>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d11f      	bne.n	8000b92 <ask_for_info+0x162>
			{
				last=now;
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <ask_for_info+0x16c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <ask_for_info+0x170>)
 8000b58:	6013      	str	r3, [r2, #0]
				node++;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <ask_for_info+0x178>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <ask_for_info+0x178>)
 8000b64:	701a      	strb	r2, [r3, #0]
				if(node==3)
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <ask_for_info+0x178>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d10f      	bne.n	8000b8e <ask_for_info+0x15e>
				{
					node=1;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <ask_for_info+0x178>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
					contador++;
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <ask_for_info+0x174>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <ask_for_info+0x174>)
 8000b7e:	701a      	strb	r2, [r3, #0]
					if(contador>11)
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <ask_for_info+0x174>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b0b      	cmp	r3, #11
 8000b86:	d902      	bls.n	8000b8e <ask_for_info+0x15e>
						contador=1;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <ask_for_info+0x174>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
				}
				return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e7ff      	b.n	8000b92 <ask_for_info+0x162>
			}
	}

}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000038 	.word	0x20000038
 8000ba0:	2000003c 	.word	0x2000003c
 8000ba4:	20000004 	.word	0x20000004
 8000ba8:	20000005 	.word	0x20000005

08000bac <send_NMT>:

char send_NMT(uint8_t command)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
	/*Envio mensaje NMT para pasar a OPERACIONAL-PREOPERACIONAL*/
	uint8_t NMT[2];
	NMT[1]=0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	737b      	strb	r3, [r7, #13]
	if(command==START)
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d102      	bne.n	8000bc6 <send_NMT+0x1a>
		NMT[0]=0x01;		        //START
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	733b      	strb	r3, [r7, #12]
 8000bc4:	e00a      	b.n	8000bdc <send_NMT+0x30>
	else if(command==RESTART)
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d102      	bne.n	8000bd2 <send_NMT+0x26>
		NMT[0]=0X81;
 8000bcc:	2381      	movs	r3, #129	; 0x81
 8000bce:	733b      	strb	r3, [r7, #12]
 8000bd0:	e004      	b.n	8000bdc <send_NMT+0x30>
	else if(command==PREOPERATIONAL)
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b03      	cmp	r3, #3
 8000bd6:	d101      	bne.n	8000bdc <send_NMT+0x30>
		NMT[0]=0X80;
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	733b      	strb	r3, [r7, #12]
	can1_Tx(0x000,NMT,2);
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	2202      	movs	r2, #2
 8000be2:	4619      	mov	r1, r3
 8000be4:	2000      	movs	r0, #0
 8000be6:	f7ff fca7 	bl	8000538 <can1_Tx>

	HAL_Delay(20);			//DELAY BLOQUEANTE
 8000bea:	2014      	movs	r0, #20
 8000bec:	f000 f8a0 	bl	8000d30 <HAL_Delay>

	return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <change_state>:

char change_state(uint8_t nodo,uint8_t state, uint8_t status)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	71fb      	strb	r3, [r7, #7]
 8000c04:	460b      	mov	r3, r1
 8000c06:	71bb      	strb	r3, [r7, #6]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	717b      	strb	r3, [r7, #5]
		HAL_Delay(100);
 8000c0c:	2064      	movs	r0, #100	; 0x64
 8000c0e:	f000 f88f 	bl	8000d30 <HAL_Delay>
		if(send_ctrlwrd_1(nodo)== HAL_OK)
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fda0 	bl	800075c <send_ctrlwrd_1>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d102      	bne.n	8000c28 <change_state+0x2e>
			//control_nodos[nodo-1]=SEMI_SEND;

		HAL_Delay(100);			//DELAY BLOQUEANTE
 8000c22:	2064      	movs	r0, #100	; 0x64
 8000c24:	f000 f884 	bl	8000d30 <HAL_Delay>

		if(send_ctrlword_2(nodo)==HAL_OK)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fdc0 	bl	80007b2 <send_ctrlword_2>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <change_state+0x44>
			//control_nodos[nodo-1]=SEND;

		HAL_Delay(100);			//DELAY BLOQUEANTE
 8000c38:	2064      	movs	r0, #100	; 0x64
 8000c3a:	f000 f879 	bl	8000d30 <HAL_Delay>
		return SEND;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <Pc_Communication>:

#include "UART_COM.h"
extern UART_HandleTypeDef huart3;

int Pc_Communication(uint16_t Data[])
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	//uint16_t  size = sizeof(Data) / sizeof(Data[0]);
	// esto puede explotar, ver que concuerden los tamaños a analizar.
		//hago un casteo a info_motores. EL DMA transmite 8-16 bits
	if(HAL_UART_Transmit_DMA(&huart3, Data, UART_SIZE) != HAL_OK)
 8000c50:	220c      	movs	r2, #12
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	4806      	ldr	r0, [pc, #24]	; (8000c70 <Pc_Communication+0x28>)
 8000c56:	f004 f891 	bl	8004d7c <HAL_UART_Transmit_DMA>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <Pc_Communication+0x1c>
	{
		return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e000      	b.n	8000c66 <Pc_Communication+0x1e>
	}
		return HAL_OK;
 8000c64:	2300      	movs	r3, #0

}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000f0 	.word	0x200000f0

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f001 fd4d 	bl	8002718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f000 f806 	bl	8000c90 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c84:	f005 fcc4 	bl	8006610 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_InitTick+0x54>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_InitTick+0x58>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 fd67 	bl	8002782 <HAL_SYSTICK_Config>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00e      	b.n	8000cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d80a      	bhi.n	8000cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f001 fd2f 	bl	800272e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd0:	4a06      	ldr	r2, [pc, #24]	; (8000cec <HAL_InitTick+0x5c>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e000      	b.n	8000cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000010 	.word	0x20000010
 8000ce8:	2000000c 	.word	0x2000000c
 8000cec:	20000008 	.word	0x20000008

08000cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	2000000c 	.word	0x2000000c
 8000d14:	2000005c 	.word	0x2000005c

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	2000005c 	.word	0x2000005c

08000d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d38:	f7ff ffee 	bl	8000d18 <HAL_GetTick>
 8000d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d48:	d005      	beq.n	8000d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_Delay+0x40>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d56:	bf00      	nop
 8000d58:	f7ff ffde 	bl	8000d18 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d8f7      	bhi.n	8000d58 <HAL_Delay+0x28>
  {
  }
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2000000c 	.word	0x2000000c

08000d74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e031      	b.n	8000dee <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d109      	bne.n	8000da6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f005 fc60 	bl	8006658 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f003 0310 	and.w	r3, r3, #16
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d116      	bne.n	8000de0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <HAL_ADC_Init+0x84>)
 8000db8:	4013      	ands	r3, r2
 8000dba:	f043 0202 	orr.w	r2, r3, #2
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 fbbc 	bl	8001540 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f023 0303 	bic.w	r3, r3, #3
 8000dd6:	f043 0201 	orr.w	r2, r3, #1
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	641a      	str	r2, [r3, #64]	; 0x40
 8000dde:	e001      	b.n	8000de4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	ffffeefd 	.word	0xffffeefd

08000dfc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	bf0c      	ite	eq
 8000e1a:	2301      	moveq	r3, #1
 8000e1c:	2300      	movne	r3, #0
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0320 	and.w	r3, r3, #32
 8000e2c:	2b20      	cmp	r3, #32
 8000e2e:	bf0c      	ite	eq
 8000e30:	2301      	moveq	r3, #1
 8000e32:	2300      	movne	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d049      	beq.n	8000ed2 <HAL_ADC_IRQHandler+0xd6>
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d046      	beq.n	8000ed2 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	f003 0310 	and.w	r3, r3, #16
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d105      	bne.n	8000e5c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d12b      	bne.n	8000ec2 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d127      	bne.n	8000ec2 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e78:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d006      	beq.n	8000e8e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d119      	bne.n	8000ec2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 0220 	bic.w	r2, r2, #32
 8000e9c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d105      	bne.n	8000ec2 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f043 0201 	orr.w	r2, r3, #1
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f000 f9ca 	bl	800125c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f06f 0212 	mvn.w	r2, #18
 8000ed0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	2b04      	cmp	r3, #4
 8000ede:	bf0c      	ite	eq
 8000ee0:	2301      	moveq	r3, #1
 8000ee2:	2300      	movne	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef2:	2b80      	cmp	r3, #128	; 0x80
 8000ef4:	bf0c      	ite	eq
 8000ef6:	2301      	moveq	r3, #1
 8000ef8:	2300      	movne	r3, #0
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d057      	beq.n	8000fb4 <HAL_ADC_IRQHandler+0x1b8>
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d054      	beq.n	8000fb4 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d105      	bne.n	8000f22 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d139      	bne.n	8000fa4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f36:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d006      	beq.n	8000f4c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d12b      	bne.n	8000fa4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d124      	bne.n	8000fa4 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d11d      	bne.n	8000fa4 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d119      	bne.n	8000fa4 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f7e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d105      	bne.n	8000fa4 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	f043 0201 	orr.w	r2, r3, #1
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 fc47 	bl	8001838 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f06f 020c 	mvn.w	r2, #12
 8000fb2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	bf0c      	ite	eq
 8000fc2:	2301      	moveq	r3, #1
 8000fc4:	2300      	movne	r3, #0
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd4:	2b40      	cmp	r3, #64	; 0x40
 8000fd6:	bf0c      	ite	eq
 8000fd8:	2301      	moveq	r3, #1
 8000fda:	2300      	movne	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d017      	beq.n	8001016 <HAL_ADC_IRQHandler+0x21a>
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d014      	beq.n	8001016 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d10d      	bne.n	8001016 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 f93c 	bl	8001284 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f06f 0201 	mvn.w	r2, #1
 8001014:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0320 	and.w	r3, r3, #32
 8001020:	2b20      	cmp	r3, #32
 8001022:	bf0c      	ite	eq
 8001024:	2301      	moveq	r3, #1
 8001026:	2300      	movne	r3, #0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001036:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800103a:	bf0c      	ite	eq
 800103c:	2301      	moveq	r3, #1
 800103e:	2300      	movne	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d015      	beq.n	8001076 <HAL_ADC_IRQHandler+0x27a>
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d012      	beq.n	8001076 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001054:	f043 0202 	orr.w	r2, r3, #2
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f06f 0220 	mvn.w	r2, #32
 8001064:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f916 	bl	8001298 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f06f 0220 	mvn.w	r2, #32
 8001074:	601a      	str	r2, [r3, #0]
  }
}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001096:	2b01      	cmp	r3, #1
 8001098:	d101      	bne.n	800109e <HAL_ADC_Start_DMA+0x1e>
 800109a:	2302      	movs	r3, #2
 800109c:	e0c7      	b.n	800122e <HAL_ADC_Start_DMA+0x1ae>
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2201      	movs	r2, #1
 80010a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d018      	beq.n	80010e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f042 0201 	orr.w	r2, r2, #1
 80010c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80010c4:	4b5c      	ldr	r3, [pc, #368]	; (8001238 <HAL_ADC_Start_DMA+0x1b8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a5c      	ldr	r2, [pc, #368]	; (800123c <HAL_ADC_Start_DMA+0x1bc>)
 80010ca:	fba2 2303 	umull	r2, r3, r2, r3
 80010ce:	0c9a      	lsrs	r2, r3, #18
 80010d0:	4613      	mov	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80010d8:	e002      	b.n	80010e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3b01      	subs	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f9      	bne.n	80010da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	f040 809b 	bne.w	800122c <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010fa:	4b51      	ldr	r3, [pc, #324]	; (8001240 <HAL_ADC_Start_DMA+0x1c0>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001110:	2b00      	cmp	r3, #0
 8001112:	d007      	beq.n	8001124 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800111c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800112c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001130:	d106      	bne.n	8001140 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f023 0206 	bic.w	r2, r3, #6
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	645a      	str	r2, [r3, #68]	; 0x44
 800113e:	e002      	b.n	8001146 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2200      	movs	r2, #0
 8001144:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001152:	4a3c      	ldr	r2, [pc, #240]	; (8001244 <HAL_ADC_Start_DMA+0x1c4>)
 8001154:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115a:	4a3b      	ldr	r2, [pc, #236]	; (8001248 <HAL_ADC_Start_DMA+0x1c8>)
 800115c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001162:	4a3a      	ldr	r2, [pc, #232]	; (800124c <HAL_ADC_Start_DMA+0x1cc>)
 8001164:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800116e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800117e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800118e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	334c      	adds	r3, #76	; 0x4c
 800119a:	4619      	mov	r1, r3
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f001 fbaa 	bl	80028f8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80011a4:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <HAL_ADC_Start_DMA+0x1d0>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 031f 	and.w	r3, r3, #31
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10f      	bne.n	80011d0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d136      	bne.n	800122c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	e02d      	b.n	800122c <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a1f      	ldr	r2, [pc, #124]	; (8001254 <HAL_ADC_Start_DMA+0x1d4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d10e      	bne.n	80011f8 <HAL_ADC_Start_DMA+0x178>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d107      	bne.n	80011f8 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011f6:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_ADC_Start_DMA+0x1d0>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	2b00      	cmp	r3, #0
 8001202:	d113      	bne.n	800122c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a13      	ldr	r2, [pc, #76]	; (8001258 <HAL_ADC_Start_DMA+0x1d8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10e      	bne.n	800122c <HAL_ADC_Start_DMA+0x1ac>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d107      	bne.n	800122c <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800122a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000010 	.word	0x20000010
 800123c:	431bde83 	.word	0x431bde83
 8001240:	fffff8fe 	.word	0xfffff8fe
 8001244:	08001735 	.word	0x08001735
 8001248:	080017ef 	.word	0x080017ef
 800124c:	0800180b 	.word	0x0800180b
 8001250:	40012300 	.word	0x40012300
 8001254:	40012000 	.word	0x40012000
 8001258:	40012200 	.word	0x40012200

0800125c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x1c>
 80012c4:	2302      	movs	r3, #2
 80012c6:	e12a      	b.n	800151e <HAL_ADC_ConfigChannel+0x272>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b09      	cmp	r3, #9
 80012d6:	d93a      	bls.n	800134e <HAL_ADC_ConfigChannel+0xa2>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012e0:	d035      	beq.n	800134e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68d9      	ldr	r1, [r3, #12]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	461a      	mov	r2, r3
 80012f0:	4613      	mov	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4413      	add	r3, r2
 80012f6:	3b1e      	subs	r3, #30
 80012f8:	2207      	movs	r2, #7
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	400a      	ands	r2, r1
 8001306:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a87      	ldr	r2, [pc, #540]	; (800152c <HAL_ADC_ConfigChannel+0x280>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d10a      	bne.n	8001328 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68d9      	ldr	r1, [r3, #12]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	061a      	lsls	r2, r3, #24
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001326:	e035      	b.n	8001394 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68d9      	ldr	r1, [r3, #12]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	b29b      	uxth	r3, r3
 8001338:	4618      	mov	r0, r3
 800133a:	4603      	mov	r3, r0
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	4403      	add	r3, r0
 8001340:	3b1e      	subs	r3, #30
 8001342:	409a      	lsls	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800134c:	e022      	b.n	8001394 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6919      	ldr	r1, [r3, #16]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	b29b      	uxth	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	2207      	movs	r2, #7
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43da      	mvns	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	400a      	ands	r2, r1
 8001370:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6919      	ldr	r1, [r3, #16]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	b29b      	uxth	r3, r3
 8001382:	4618      	mov	r0, r3
 8001384:	4603      	mov	r3, r0
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4403      	add	r3, r0
 800138a:	409a      	lsls	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b06      	cmp	r3, #6
 800139a:	d824      	bhi.n	80013e6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	3b05      	subs	r3, #5
 80013ae:	221f      	movs	r2, #31
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43da      	mvns	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	400a      	ands	r2, r1
 80013bc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	3b05      	subs	r3, #5
 80013d8:	fa00 f203 	lsl.w	r2, r0, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	635a      	str	r2, [r3, #52]	; 0x34
 80013e4:	e04c      	b.n	8001480 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b0c      	cmp	r3, #12
 80013ec:	d824      	bhi.n	8001438 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	3b23      	subs	r3, #35	; 0x23
 8001400:	221f      	movs	r2, #31
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	400a      	ands	r2, r1
 800140e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	4618      	mov	r0, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	3b23      	subs	r3, #35	; 0x23
 800142a:	fa00 f203 	lsl.w	r2, r0, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	631a      	str	r2, [r3, #48]	; 0x30
 8001436:	e023      	b.n	8001480 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3b41      	subs	r3, #65	; 0x41
 800144a:	221f      	movs	r2, #31
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43da      	mvns	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	400a      	ands	r2, r1
 8001458:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	b29b      	uxth	r3, r3
 8001466:	4618      	mov	r0, r3
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	3b41      	subs	r3, #65	; 0x41
 8001474:	fa00 f203 	lsl.w	r2, r0, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a2a      	ldr	r2, [pc, #168]	; (8001530 <HAL_ADC_ConfigChannel+0x284>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d10a      	bne.n	80014a0 <HAL_ADC_ConfigChannel+0x1f4>
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001492:	d105      	bne.n	80014a0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <HAL_ADC_ConfigChannel+0x288>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4a26      	ldr	r2, [pc, #152]	; (8001534 <HAL_ADC_ConfigChannel+0x288>)
 800149a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800149e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a22      	ldr	r2, [pc, #136]	; (8001530 <HAL_ADC_ConfigChannel+0x284>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d109      	bne.n	80014be <HAL_ADC_ConfigChannel+0x212>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b12      	cmp	r3, #18
 80014b0:	d105      	bne.n	80014be <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HAL_ADC_ConfigChannel+0x288>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4a1f      	ldr	r2, [pc, #124]	; (8001534 <HAL_ADC_ConfigChannel+0x288>)
 80014b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014bc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a1b      	ldr	r2, [pc, #108]	; (8001530 <HAL_ADC_ConfigChannel+0x284>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d125      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x268>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a17      	ldr	r2, [pc, #92]	; (800152c <HAL_ADC_ConfigChannel+0x280>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d003      	beq.n	80014da <HAL_ADC_ConfigChannel+0x22e>
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b11      	cmp	r3, #17
 80014d8:	d11c      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_ADC_ConfigChannel+0x288>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4a15      	ldr	r2, [pc, #84]	; (8001534 <HAL_ADC_ConfigChannel+0x288>)
 80014e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014e4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a10      	ldr	r2, [pc, #64]	; (800152c <HAL_ADC_ConfigChannel+0x280>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d111      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_ADC_ConfigChannel+0x28c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a11      	ldr	r2, [pc, #68]	; (800153c <HAL_ADC_ConfigChannel+0x290>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	0c9a      	lsrs	r2, r3, #18
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001506:	e002      	b.n	800150e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	3b01      	subs	r3, #1
 800150c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f9      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	10000012 	.word	0x10000012
 8001530:	40012000 	.word	0x40012000
 8001534:	40012300 	.word	0x40012300
 8001538:	20000010 	.word	0x20000010
 800153c:	431bde83 	.word	0x431bde83

08001540 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001548:	4b78      	ldr	r3, [pc, #480]	; (800172c <ADC_Init+0x1ec>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	4a77      	ldr	r2, [pc, #476]	; (800172c <ADC_Init+0x1ec>)
 800154e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001552:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001554:	4b75      	ldr	r3, [pc, #468]	; (800172c <ADC_Init+0x1ec>)
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	4973      	ldr	r1, [pc, #460]	; (800172c <ADC_Init+0x1ec>)
 800155e:	4313      	orrs	r3, r2
 8001560:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001570:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	021a      	lsls	r2, r3, #8
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001594:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6859      	ldr	r1, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6899      	ldr	r1, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	4a58      	ldr	r2, [pc, #352]	; (8001730 <ADC_Init+0x1f0>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d022      	beq.n	800161a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6899      	ldr	r1, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001604:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6899      	ldr	r1, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	e00f      	b.n	800163a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001628:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001638:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0202 	bic.w	r2, r2, #2
 8001648:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6899      	ldr	r1, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	005a      	lsls	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d01b      	beq.n	80016a0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001676:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001686:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6859      	ldr	r1, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	3b01      	subs	r3, #1
 8001694:	035a      	lsls	r2, r3, #13
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	e007      	b.n	80016b0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	051a      	lsls	r2, r3, #20
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6899      	ldr	r1, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016f2:	025a      	lsls	r2, r3, #9
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800170a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6899      	ldr	r1, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	029a      	lsls	r2, r3, #10
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	609a      	str	r2, [r3, #8]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40012300 	.word	0x40012300
 8001730:	0f000001 	.word	0x0f000001

08001734 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001740:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800174a:	2b00      	cmp	r3, #0
 800174c:	d13c      	bne.n	80017c8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d12b      	bne.n	80017c0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800176c:	2b00      	cmp	r3, #0
 800176e:	d127      	bne.n	80017c0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001776:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800177a:	2b00      	cmp	r3, #0
 800177c:	d006      	beq.n	800178c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001788:	2b00      	cmp	r3, #0
 800178a:	d119      	bne.n	80017c0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0220 	bic.w	r2, r2, #32
 800179a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d105      	bne.n	80017c0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f043 0201 	orr.w	r2, r3, #1
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f7ff fd4b 	bl	800125c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017c6:	e00e      	b.n	80017e6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f7ff fd5f 	bl	8001298 <HAL_ADC_ErrorCallback>
}
 80017da:	e004      	b.n	80017e6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	4798      	blx	r3
}
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f7ff fd37 	bl	8001270 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b084      	sub	sp, #16
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001816:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2240      	movs	r2, #64	; 0x40
 800181c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	f043 0204 	orr.w	r2, r3, #4
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f7ff fd34 	bl	8001298 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e0ed      	b.n	8001a3a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f004 ff8a 	bl	8006784 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0202 	bic.w	r2, r2, #2
 800187e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001880:	f7ff fa4a 	bl	8000d18 <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001886:	e012      	b.n	80018ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001888:	f7ff fa46 	bl	8000d18 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b0a      	cmp	r3, #10
 8001894:	d90b      	bls.n	80018ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2205      	movs	r2, #5
 80018a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0c5      	b.n	8001a3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1e5      	bne.n	8001888 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018cc:	f7ff fa24 	bl	8000d18 <HAL_GetTick>
 80018d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018d2:	e012      	b.n	80018fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018d4:	f7ff fa20 	bl	8000d18 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b0a      	cmp	r3, #10
 80018e0:	d90b      	bls.n	80018fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2205      	movs	r2, #5
 80018f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e09f      	b.n	8001a3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0e5      	beq.n	80018d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7e1b      	ldrb	r3, [r3, #24]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d108      	bne.n	8001922 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e007      	b.n	8001932 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	7e5b      	ldrb	r3, [r3, #25]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d108      	bne.n	800194c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	e007      	b.n	800195c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800195a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7e9b      	ldrb	r3, [r3, #26]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d108      	bne.n	8001976 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0220 	orr.w	r2, r2, #32
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	e007      	b.n	8001986 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0220 	bic.w	r2, r2, #32
 8001984:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7edb      	ldrb	r3, [r3, #27]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d108      	bne.n	80019a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0210 	bic.w	r2, r2, #16
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	e007      	b.n	80019b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0210 	orr.w	r2, r2, #16
 80019ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7f1b      	ldrb	r3, [r3, #28]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d108      	bne.n	80019ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0208 	orr.w	r2, r2, #8
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e007      	b.n	80019da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0208 	bic.w	r2, r2, #8
 80019d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7f5b      	ldrb	r3, [r3, #29]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d108      	bne.n	80019f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 0204 	orr.w	r2, r2, #4
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	e007      	b.n	8001a04 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0204 	bic.w	r2, r2, #4
 8001a02:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	ea42 0103 	orr.w	r1, r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	1e5a      	subs	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a5c:	7cfb      	ldrb	r3, [r7, #19]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d003      	beq.n	8001a6a <HAL_CAN_ConfigFilter+0x26>
 8001a62:	7cfb      	ldrb	r3, [r7, #19]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	f040 80c7 	bne.w	8001bf8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a69      	ldr	r2, [pc, #420]	; (8001c14 <HAL_CAN_ConfigFilter+0x1d0>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d001      	beq.n	8001a78 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001a74:	4b68      	ldr	r3, [pc, #416]	; (8001c18 <HAL_CAN_ConfigFilter+0x1d4>)
 8001a76:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a7e:	f043 0201 	orr.w	r2, r3, #1
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	4a63      	ldr	r2, [pc, #396]	; (8001c18 <HAL_CAN_ConfigFilter+0x1d4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d111      	bne.n	8001ab4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a96:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	431a      	orrs	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	f003 031f 	and.w	r3, r3, #31
 8001abc:	2201      	movs	r2, #1
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d123      	bne.n	8001b26 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	401a      	ands	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3248      	adds	r2, #72	; 0x48
 8001b06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b1c:	6979      	ldr	r1, [r7, #20]
 8001b1e:	3348      	adds	r3, #72	; 0x48
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	440b      	add	r3, r1
 8001b24:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d122      	bne.n	8001b74 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	431a      	orrs	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3248      	adds	r2, #72	; 0x48
 8001b54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b6a:	6979      	ldr	r1, [r7, #20]
 8001b6c:	3348      	adds	r3, #72	; 0x48
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d109      	bne.n	8001b90 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b8e:	e007      	b.n	8001ba0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d109      	bne.n	8001bbc <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001bba:	e007      	b.n	8001bcc <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d107      	bne.n	8001be4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bea:	f023 0201 	bic.w	r2, r3, #1
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e006      	b.n	8001c06 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
  }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40003400 	.word	0x40003400
 8001c18:	40006400 	.word	0x40006400

08001c1c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d12e      	bne.n	8001c8e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c48:	f7ff f866 	bl	8000d18 <HAL_GetTick>
 8001c4c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c4e:	e012      	b.n	8001c76 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c50:	f7ff f862 	bl	8000d18 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b0a      	cmp	r3, #10
 8001c5c:	d90b      	bls.n	8001c76 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2205      	movs	r2, #5
 8001c6e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e012      	b.n	8001c9c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1e5      	bne.n	8001c50 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e006      	b.n	8001c9c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
  }
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cc2:	7ffb      	ldrb	r3, [r7, #31]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d003      	beq.n	8001cd0 <HAL_CAN_AddTxMessage+0x2c>
 8001cc8:	7ffb      	ldrb	r3, [r7, #31]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	f040 80b8 	bne.w	8001e40 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10a      	bne.n	8001cf0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d105      	bne.n	8001cf0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80a0 	beq.w	8001e30 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	0e1b      	lsrs	r3, r3, #24
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d907      	bls.n	8001d10 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e09e      	b.n	8001e4e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d10:	2201      	movs	r2, #1
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	409a      	lsls	r2, r3
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10d      	bne.n	8001d3e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d2c:	68f9      	ldr	r1, [r7, #12]
 8001d2e:	6809      	ldr	r1, [r1, #0]
 8001d30:	431a      	orrs	r2, r3
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3318      	adds	r3, #24
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	440b      	add	r3, r1
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	e00f      	b.n	8001d5e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d48:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d4e:	68f9      	ldr	r1, [r7, #12]
 8001d50:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d52:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	3318      	adds	r3, #24
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	440b      	add	r3, r1
 8001d5c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6819      	ldr	r1, [r3, #0]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	691a      	ldr	r2, [r3, #16]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3318      	adds	r3, #24
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	440b      	add	r3, r1
 8001d6e:	3304      	adds	r3, #4
 8001d70:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	7d1b      	ldrb	r3, [r3, #20]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d111      	bne.n	8001d9e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3318      	adds	r3, #24
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	4413      	add	r3, r2
 8001d86:	3304      	adds	r3, #4
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	6811      	ldr	r1, [r2, #0]
 8001d8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	3318      	adds	r3, #24
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	440b      	add	r3, r1
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3307      	adds	r3, #7
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	061a      	lsls	r2, r3, #24
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3306      	adds	r3, #6
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	041b      	lsls	r3, r3, #16
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3305      	adds	r3, #5
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	4313      	orrs	r3, r2
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	3204      	adds	r2, #4
 8001dbe:	7812      	ldrb	r2, [r2, #0]
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	6811      	ldr	r1, [r2, #0]
 8001dc6:	ea43 0200 	orr.w	r2, r3, r0
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	440b      	add	r3, r1
 8001dd0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001dd4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3303      	adds	r3, #3
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	061a      	lsls	r2, r3, #24
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3302      	adds	r3, #2
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	041b      	lsls	r3, r3, #16
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3301      	adds	r3, #1
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	4313      	orrs	r3, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	7812      	ldrb	r2, [r2, #0]
 8001df6:	4610      	mov	r0, r2
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	6811      	ldr	r1, [r2, #0]
 8001dfc:	ea43 0200 	orr.w	r2, r3, r0
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	440b      	add	r3, r1
 8001e06:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001e0a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	3318      	adds	r3, #24
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	4413      	add	r3, r2
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	6811      	ldr	r1, [r2, #0]
 8001e1e:	f043 0201 	orr.w	r2, r3, #1
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3318      	adds	r3, #24
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	440b      	add	r3, r1
 8001e2a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	e00e      	b.n	8001e4e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e006      	b.n	8001e4e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
  }
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	; 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b085      	sub	sp, #20
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e6e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e70:	7afb      	ldrb	r3, [r7, #11]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d002      	beq.n	8001e7c <HAL_CAN_IsTxMessagePending+0x22>
 8001e76:	7afb      	ldrb	r3, [r7, #11]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d10b      	bne.n	8001e94 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	069b      	lsls	r3, r3, #26
 8001e86:	401a      	ands	r2, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	069b      	lsls	r3, r3, #26
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001e90:	2301      	movs	r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001e94:	68fb      	ldr	r3, [r7, #12]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b087      	sub	sp, #28
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eb8:	7dfb      	ldrb	r3, [r7, #23]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d003      	beq.n	8001ec6 <HAL_CAN_GetRxMessage+0x24>
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	f040 80f3 	bne.w	80020ac <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10e      	bne.n	8001eea <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d116      	bne.n	8001f08 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e0e7      	b.n	80020ba <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d107      	bne.n	8001f08 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0d8      	b.n	80020ba <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	331b      	adds	r3, #27
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	4413      	add	r3, r2
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0204 	and.w	r2, r3, #4
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10c      	bne.n	8001f40 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	331b      	adds	r3, #27
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	4413      	add	r3, r2
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0d5b      	lsrs	r3, r3, #21
 8001f36:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	e00b      	b.n	8001f58 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	331b      	adds	r3, #27
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	4413      	add	r3, r2
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	08db      	lsrs	r3, r3, #3
 8001f50:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	331b      	adds	r3, #27
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	4413      	add	r3, r2
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0202 	and.w	r2, r3, #2
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	331b      	adds	r3, #27
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	4413      	add	r3, r2
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 020f 	and.w	r2, r3, #15
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	331b      	adds	r3, #27
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	4413      	add	r3, r2
 8001f92:	3304      	adds	r3, #4
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	331b      	adds	r3, #27
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	4413      	add	r3, r2
 8001faa:	3304      	adds	r3, #4
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0c1b      	lsrs	r3, r3, #16
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0a1a      	lsrs	r2, r3, #8
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	0c1a      	lsrs	r2, r3, #16
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	4413      	add	r3, r2
 800200a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0e1a      	lsrs	r2, r3, #24
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	3303      	adds	r3, #3
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	4413      	add	r3, r2
 8002024:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	3304      	adds	r3, #4
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	4413      	add	r3, r2
 800203c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	0a1a      	lsrs	r2, r3, #8
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	3305      	adds	r3, #5
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	4413      	add	r3, r2
 8002056:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	0c1a      	lsrs	r2, r3, #16
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	3306      	adds	r3, #6
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	4413      	add	r3, r2
 8002070:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	0e1a      	lsrs	r2, r3, #24
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	3307      	adds	r3, #7
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d108      	bne.n	8002098 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f042 0220 	orr.w	r2, r2, #32
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	e007      	b.n	80020a8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0220 	orr.w	r2, r2, #32
 80020a6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e006      	b.n	80020ba <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
  }
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	371c      	adds	r7, #28
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b085      	sub	sp, #20
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d002      	beq.n	80020e4 <HAL_CAN_ActivateNotification+0x1e>
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d109      	bne.n	80020f8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6959      	ldr	r1, [r3, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	e006      	b.n	8002106 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
  }
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b08a      	sub	sp, #40	; 0x28
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d07c      	beq.n	8002252 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d023      	beq.n	80021aa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2201      	movs	r2, #1
 8002168:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f97d 	bl	8002474 <HAL_CAN_TxMailbox0CompleteCallback>
 800217a:	e016      	b.n	80021aa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	d004      	beq.n	8002190 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
 800218e:	e00c      	b.n	80021aa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d004      	beq.n	80021a4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
 80021a2:	e002      	b.n	80021aa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f983 	bl	80024b0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d024      	beq.n	80021fe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f95d 	bl	8002488 <HAL_CAN_TxMailbox1CompleteCallback>
 80021ce:	e016      	b.n	80021fe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d004      	beq.n	80021e4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
 80021e2:	e00c      	b.n	80021fe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d004      	beq.n	80021f8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
 80021f6:	e002      	b.n	80021fe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f963 	bl	80024c4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d024      	beq.n	8002252 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002210:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f93d 	bl	800249c <HAL_CAN_TxMailbox2CompleteCallback>
 8002222:	e016      	b.n	8002252 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d004      	beq.n	8002238 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
 8002236:	e00c      	b.n	8002252 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d004      	beq.n	800224c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
 800224a:	e002      	b.n	8002252 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f943 	bl	80024d8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00c      	beq.n	8002276 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b00      	cmp	r3, #0
 8002264:	d007      	beq.n	8002276 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800226c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2210      	movs	r2, #16
 8002274:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00b      	beq.n	8002298 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d006      	beq.n	8002298 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2208      	movs	r2, #8
 8002290:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f934 	bl	8002500 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f91b 	bl	80024ec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00c      	beq.n	80022da <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d007      	beq.n	80022da <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2210      	movs	r2, #16
 80022d8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00b      	beq.n	80022fc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d006      	beq.n	80022fc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2208      	movs	r2, #8
 80022f4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f916 	bl	8002528 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f8fd 	bl	8002514 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	d006      	beq.n	800233c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2210      	movs	r2, #16
 8002334:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f900 	bl	800253c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d006      	beq.n	800235e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2208      	movs	r2, #8
 8002356:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f8f9 	bl	8002550 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d075      	beq.n	8002454 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d06c      	beq.n	800244c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	f043 0304 	orr.w	r3, r3, #4
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d03d      	beq.n	800244c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d038      	beq.n	800244c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023e0:	2b30      	cmp	r3, #48	; 0x30
 80023e2:	d017      	beq.n	8002414 <HAL_CAN_IRQHandler+0x302>
 80023e4:	2b30      	cmp	r3, #48	; 0x30
 80023e6:	d804      	bhi.n	80023f2 <HAL_CAN_IRQHandler+0x2e0>
 80023e8:	2b10      	cmp	r3, #16
 80023ea:	d009      	beq.n	8002400 <HAL_CAN_IRQHandler+0x2ee>
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d00c      	beq.n	800240a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80023f0:	e024      	b.n	800243c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80023f2:	2b50      	cmp	r3, #80	; 0x50
 80023f4:	d018      	beq.n	8002428 <HAL_CAN_IRQHandler+0x316>
 80023f6:	2b60      	cmp	r3, #96	; 0x60
 80023f8:	d01b      	beq.n	8002432 <HAL_CAN_IRQHandler+0x320>
 80023fa:	2b40      	cmp	r3, #64	; 0x40
 80023fc:	d00f      	beq.n	800241e <HAL_CAN_IRQHandler+0x30c>
            break;
 80023fe:	e01d      	b.n	800243c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	f043 0308 	orr.w	r3, r3, #8
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002408:	e018      	b.n	800243c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	f043 0310 	orr.w	r3, r3, #16
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002412:	e013      	b.n	800243c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	f043 0320 	orr.w	r3, r3, #32
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800241c:	e00e      	b.n	800243c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002426:	e009      	b.n	800243c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002430:	e004      	b.n	800243c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800243a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800244a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2204      	movs	r2, #4
 8002452:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	2b00      	cmp	r3, #0
 8002458:	d008      	beq.n	800246c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f87c 	bl	8002564 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800246c:	bf00      	nop
 800246e:	3728      	adds	r7, #40	; 0x28
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <__NVIC_SetPriorityGrouping+0x40>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002594:	4013      	ands	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a6:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <__NVIC_SetPriorityGrouping+0x40>)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	60d3      	str	r3, [r2, #12]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00
 80025bc:	05fa0000 	.word	0x05fa0000

080025c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <__NVIC_GetPriorityGrouping+0x18>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	f003 0307 	and.w	r3, r3, #7
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	db0b      	blt.n	8002606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	4907      	ldr	r1, [pc, #28]	; (8002614 <__NVIC_EnableIRQ+0x38>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	2001      	movs	r0, #1
 80025fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	e000e100 	.word	0xe000e100

08002618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	6039      	str	r1, [r7, #0]
 8002622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	2b00      	cmp	r3, #0
 800262a:	db0a      	blt.n	8002642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	b2da      	uxtb	r2, r3
 8002630:	490c      	ldr	r1, [pc, #48]	; (8002664 <__NVIC_SetPriority+0x4c>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	0112      	lsls	r2, r2, #4
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	440b      	add	r3, r1
 800263c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002640:	e00a      	b.n	8002658 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4908      	ldr	r1, [pc, #32]	; (8002668 <__NVIC_SetPriority+0x50>)
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	3b04      	subs	r3, #4
 8002650:	0112      	lsls	r2, r2, #4
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	440b      	add	r3, r1
 8002656:	761a      	strb	r2, [r3, #24]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	e000e100 	.word	0xe000e100
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266c:	b480      	push	{r7}
 800266e:	b089      	sub	sp, #36	; 0x24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f1c3 0307 	rsb	r3, r3, #7
 8002686:	2b04      	cmp	r3, #4
 8002688:	bf28      	it	cs
 800268a:	2304      	movcs	r3, #4
 800268c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3304      	adds	r3, #4
 8002692:	2b06      	cmp	r3, #6
 8002694:	d902      	bls.n	800269c <NVIC_EncodePriority+0x30>
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3b03      	subs	r3, #3
 800269a:	e000      	b.n	800269e <NVIC_EncodePriority+0x32>
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	f04f 32ff 	mov.w	r2, #4294967295
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43da      	mvns	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	401a      	ands	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b4:	f04f 31ff 	mov.w	r1, #4294967295
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	fa01 f303 	lsl.w	r3, r1, r3
 80026be:	43d9      	mvns	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	4313      	orrs	r3, r2
         );
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3724      	adds	r7, #36	; 0x24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e4:	d301      	bcc.n	80026ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00f      	b.n	800270a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ea:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <SysTick_Config+0x40>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f2:	210f      	movs	r1, #15
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f7ff ff8e 	bl	8002618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <SysTick_Config+0x40>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <SysTick_Config+0x40>)
 8002704:	2207      	movs	r2, #7
 8002706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	e000e010 	.word	0xe000e010

08002718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ff29 	bl	8002578 <__NVIC_SetPriorityGrouping>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800272e:	b580      	push	{r7, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002740:	f7ff ff3e 	bl	80025c0 <__NVIC_GetPriorityGrouping>
 8002744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	6978      	ldr	r0, [r7, #20]
 800274c:	f7ff ff8e 	bl	800266c <NVIC_EncodePriority>
 8002750:	4602      	mov	r2, r0
 8002752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff5d 	bl	8002618 <__NVIC_SetPriority>
}
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff31 	bl	80025dc <__NVIC_EnableIRQ>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff ffa2 	bl	80026d4 <SysTick_Config>
 8002790:	4603      	mov	r3, r0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027a8:	f7fe fab6 	bl	8000d18 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e099      	b.n	80028ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d8:	e00f      	b.n	80027fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027da:	f7fe fa9d 	bl	8000d18 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d908      	bls.n	80027fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2220      	movs	r2, #32
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2203      	movs	r2, #3
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e078      	b.n	80028ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1e8      	bne.n	80027da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <HAL_DMA_Init+0x158>)
 8002814:	4013      	ands	r3, r2
 8002816:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002826:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800283e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	2b04      	cmp	r3, #4
 8002852:	d107      	bne.n	8002864 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	4313      	orrs	r3, r2
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f023 0307 	bic.w	r3, r3, #7
 800287a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	2b04      	cmp	r3, #4
 800288c:	d117      	bne.n	80028be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00e      	beq.n	80028be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fa99 	bl	8002dd8 <DMA_CheckFifoParam>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2240      	movs	r2, #64	; 0x40
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028ba:	2301      	movs	r3, #1
 80028bc:	e016      	b.n	80028ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fa50 	bl	8002d6c <DMA_CalcBaseAndBitshift>
 80028cc:	4603      	mov	r3, r0
 80028ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	223f      	movs	r2, #63	; 0x3f
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	e010803f 	.word	0xe010803f

080028f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_DMA_Start_IT+0x26>
 800291a:	2302      	movs	r3, #2
 800291c:	e048      	b.n	80029b0 <HAL_DMA_Start_IT+0xb8>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d137      	bne.n	80029a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2202      	movs	r2, #2
 8002936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f9e2 	bl	8002d10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002950:	223f      	movs	r2, #63	; 0x3f
 8002952:	409a      	lsls	r2, r3
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0216 	orr.w	r2, r2, #22
 8002966:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002976:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	2b00      	cmp	r3, #0
 800297e:	d007      	beq.n	8002990 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0208 	orr.w	r2, r2, #8
 800298e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	e005      	b.n	80029ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029aa:	2302      	movs	r3, #2
 80029ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d004      	beq.n	80029d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2280      	movs	r2, #128	; 0x80
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e00c      	b.n	80029f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2205      	movs	r2, #5
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002a08:	4b92      	ldr	r3, [pc, #584]	; (8002c54 <HAL_DMA_IRQHandler+0x258>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a92      	ldr	r2, [pc, #584]	; (8002c58 <HAL_DMA_IRQHandler+0x25c>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	0a9b      	lsrs	r3, r3, #10
 8002a14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a26:	2208      	movs	r2, #8
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d01a      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d013      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0204 	bic.w	r2, r2, #4
 8002a4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a54:	2208      	movs	r2, #8
 8002a56:	409a      	lsls	r2, r3
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d012      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00b      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a96:	f043 0202 	orr.w	r2, r3, #2
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d012      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00b      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002acc:	f043 0204 	orr.w	r2, r3, #4
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	2210      	movs	r2, #16
 8002ada:	409a      	lsls	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d043      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d03c      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af6:	2210      	movs	r2, #16
 8002af8:	409a      	lsls	r2, r3
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d018      	beq.n	8002b3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d108      	bne.n	8002b2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d024      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	4798      	blx	r3
 8002b2a:	e01f      	b.n	8002b6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01b      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	4798      	blx	r3
 8002b3c:	e016      	b.n	8002b6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d107      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0208 	bic.w	r2, r2, #8
 8002b5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b70:	2220      	movs	r2, #32
 8002b72:	409a      	lsls	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 808e 	beq.w	8002c9a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8086 	beq.w	8002c9a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b92:	2220      	movs	r2, #32
 8002b94:	409a      	lsls	r2, r3
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b05      	cmp	r3, #5
 8002ba4:	d136      	bne.n	8002c14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0216 	bic.w	r2, r2, #22
 8002bb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d103      	bne.n	8002bd6 <HAL_DMA_IRQHandler+0x1da>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d007      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0208 	bic.w	r2, r2, #8
 8002be4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	223f      	movs	r2, #63	; 0x3f
 8002bec:	409a      	lsls	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d07d      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	4798      	blx	r3
        }
        return;
 8002c12:	e078      	b.n	8002d06 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d01c      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d108      	bne.n	8002c42 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d030      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	4798      	blx	r3
 8002c40:	e02b      	b.n	8002c9a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d027      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	4798      	blx	r3
 8002c52:	e022      	b.n	8002c9a <HAL_DMA_IRQHandler+0x29e>
 8002c54:	20000010 	.word	0x20000010
 8002c58:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10f      	bne.n	8002c8a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0210 	bic.w	r2, r2, #16
 8002c78:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d032      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d022      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2205      	movs	r2, #5
 8002cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0201 	bic.w	r2, r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d307      	bcc.n	8002ce2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f2      	bne.n	8002cc6 <HAL_DMA_IRQHandler+0x2ca>
 8002ce0:	e000      	b.n	8002ce4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002ce2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	4798      	blx	r3
 8002d04:	e000      	b.n	8002d08 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d06:	bf00      	nop
    }
  }
}
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop

08002d10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	d108      	bne.n	8002d50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d4e:	e007      	b.n	8002d60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	60da      	str	r2, [r3, #12]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	3b10      	subs	r3, #16
 8002d7c:	4a13      	ldr	r2, [pc, #76]	; (8002dcc <DMA_CalcBaseAndBitshift+0x60>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	091b      	lsrs	r3, r3, #4
 8002d84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d86:	4a12      	ldr	r2, [pc, #72]	; (8002dd0 <DMA_CalcBaseAndBitshift+0x64>)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d908      	bls.n	8002dac <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <DMA_CalcBaseAndBitshift+0x68>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	1d1a      	adds	r2, r3, #4
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	659a      	str	r2, [r3, #88]	; 0x58
 8002daa:	e006      	b.n	8002dba <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <DMA_CalcBaseAndBitshift+0x68>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	aaaaaaab 	.word	0xaaaaaaab
 8002dd0:	08006c50 	.word	0x08006c50
 8002dd4:	fffffc00 	.word	0xfffffc00

08002dd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d11f      	bne.n	8002e32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d855      	bhi.n	8002ea4 <DMA_CheckFifoParam+0xcc>
 8002df8:	a201      	add	r2, pc, #4	; (adr r2, 8002e00 <DMA_CheckFifoParam+0x28>)
 8002dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfe:	bf00      	nop
 8002e00:	08002e11 	.word	0x08002e11
 8002e04:	08002e23 	.word	0x08002e23
 8002e08:	08002e11 	.word	0x08002e11
 8002e0c:	08002ea5 	.word	0x08002ea5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d045      	beq.n	8002ea8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e20:	e042      	b.n	8002ea8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e2a:	d13f      	bne.n	8002eac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e30:	e03c      	b.n	8002eac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e3a:	d121      	bne.n	8002e80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d836      	bhi.n	8002eb0 <DMA_CheckFifoParam+0xd8>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <DMA_CheckFifoParam+0x70>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e5f 	.word	0x08002e5f
 8002e50:	08002e59 	.word	0x08002e59
 8002e54:	08002e71 	.word	0x08002e71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e5c:	e02f      	b.n	8002ebe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d024      	beq.n	8002eb4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e6e:	e021      	b.n	8002eb4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e78:	d11e      	bne.n	8002eb8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e7e:	e01b      	b.n	8002eb8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d902      	bls.n	8002e8c <DMA_CheckFifoParam+0xb4>
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d003      	beq.n	8002e92 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e8a:	e018      	b.n	8002ebe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e90:	e015      	b.n	8002ebe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00e      	beq.n	8002ebc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea2:	e00b      	b.n	8002ebc <DMA_CheckFifoParam+0xe4>
      break;
 8002ea4:	bf00      	nop
 8002ea6:	e00a      	b.n	8002ebe <DMA_CheckFifoParam+0xe6>
      break;
 8002ea8:	bf00      	nop
 8002eaa:	e008      	b.n	8002ebe <DMA_CheckFifoParam+0xe6>
      break;
 8002eac:	bf00      	nop
 8002eae:	e006      	b.n	8002ebe <DMA_CheckFifoParam+0xe6>
      break;
 8002eb0:	bf00      	nop
 8002eb2:	e004      	b.n	8002ebe <DMA_CheckFifoParam+0xe6>
      break;
 8002eb4:	bf00      	nop
 8002eb6:	e002      	b.n	8002ebe <DMA_CheckFifoParam+0xe6>
      break;   
 8002eb8:	bf00      	nop
 8002eba:	e000      	b.n	8002ebe <DMA_CheckFifoParam+0xe6>
      break;
 8002ebc:	bf00      	nop
    }
  } 
  
  return status; 
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b089      	sub	sp, #36	; 0x24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	e175      	b.n	80031d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002eec:	2201      	movs	r2, #1
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	f040 8164 	bne.w	80031d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d00b      	beq.n	8002f2a <HAL_GPIO_Init+0x5e>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d007      	beq.n	8002f2a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f1e:	2b11      	cmp	r3, #17
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b12      	cmp	r3, #18
 8002f28:	d130      	bne.n	8002f8c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	2203      	movs	r2, #3
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f60:	2201      	movs	r2, #1
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 0201 	and.w	r2, r3, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	2203      	movs	r2, #3
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x100>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b12      	cmp	r3, #18
 8002fca:	d123      	bne.n	8003014 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	08da      	lsrs	r2, r3, #3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3208      	adds	r2, #8
 8002fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	220f      	movs	r2, #15
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	08da      	lsrs	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3208      	adds	r2, #8
 800300e:	69b9      	ldr	r1, [r7, #24]
 8003010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	2203      	movs	r2, #3
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0203 	and.w	r2, r3, #3
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80be 	beq.w	80031d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003056:	4b65      	ldr	r3, [pc, #404]	; (80031ec <HAL_GPIO_Init+0x320>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	4a64      	ldr	r2, [pc, #400]	; (80031ec <HAL_GPIO_Init+0x320>)
 800305c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003060:	6453      	str	r3, [r2, #68]	; 0x44
 8003062:	4b62      	ldr	r3, [pc, #392]	; (80031ec <HAL_GPIO_Init+0x320>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800306e:	4a60      	ldr	r2, [pc, #384]	; (80031f0 <HAL_GPIO_Init+0x324>)
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	089b      	lsrs	r3, r3, #2
 8003074:	3302      	adds	r3, #2
 8003076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	220f      	movs	r2, #15
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4013      	ands	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a57      	ldr	r2, [pc, #348]	; (80031f4 <HAL_GPIO_Init+0x328>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d037      	beq.n	800310a <HAL_GPIO_Init+0x23e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a56      	ldr	r2, [pc, #344]	; (80031f8 <HAL_GPIO_Init+0x32c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d031      	beq.n	8003106 <HAL_GPIO_Init+0x23a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a55      	ldr	r2, [pc, #340]	; (80031fc <HAL_GPIO_Init+0x330>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d02b      	beq.n	8003102 <HAL_GPIO_Init+0x236>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a54      	ldr	r2, [pc, #336]	; (8003200 <HAL_GPIO_Init+0x334>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d025      	beq.n	80030fe <HAL_GPIO_Init+0x232>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a53      	ldr	r2, [pc, #332]	; (8003204 <HAL_GPIO_Init+0x338>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d01f      	beq.n	80030fa <HAL_GPIO_Init+0x22e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a52      	ldr	r2, [pc, #328]	; (8003208 <HAL_GPIO_Init+0x33c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d019      	beq.n	80030f6 <HAL_GPIO_Init+0x22a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a51      	ldr	r2, [pc, #324]	; (800320c <HAL_GPIO_Init+0x340>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d013      	beq.n	80030f2 <HAL_GPIO_Init+0x226>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a50      	ldr	r2, [pc, #320]	; (8003210 <HAL_GPIO_Init+0x344>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00d      	beq.n	80030ee <HAL_GPIO_Init+0x222>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a4f      	ldr	r2, [pc, #316]	; (8003214 <HAL_GPIO_Init+0x348>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d007      	beq.n	80030ea <HAL_GPIO_Init+0x21e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a4e      	ldr	r2, [pc, #312]	; (8003218 <HAL_GPIO_Init+0x34c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d101      	bne.n	80030e6 <HAL_GPIO_Init+0x21a>
 80030e2:	2309      	movs	r3, #9
 80030e4:	e012      	b.n	800310c <HAL_GPIO_Init+0x240>
 80030e6:	230a      	movs	r3, #10
 80030e8:	e010      	b.n	800310c <HAL_GPIO_Init+0x240>
 80030ea:	2308      	movs	r3, #8
 80030ec:	e00e      	b.n	800310c <HAL_GPIO_Init+0x240>
 80030ee:	2307      	movs	r3, #7
 80030f0:	e00c      	b.n	800310c <HAL_GPIO_Init+0x240>
 80030f2:	2306      	movs	r3, #6
 80030f4:	e00a      	b.n	800310c <HAL_GPIO_Init+0x240>
 80030f6:	2305      	movs	r3, #5
 80030f8:	e008      	b.n	800310c <HAL_GPIO_Init+0x240>
 80030fa:	2304      	movs	r3, #4
 80030fc:	e006      	b.n	800310c <HAL_GPIO_Init+0x240>
 80030fe:	2303      	movs	r3, #3
 8003100:	e004      	b.n	800310c <HAL_GPIO_Init+0x240>
 8003102:	2302      	movs	r3, #2
 8003104:	e002      	b.n	800310c <HAL_GPIO_Init+0x240>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <HAL_GPIO_Init+0x240>
 800310a:	2300      	movs	r3, #0
 800310c:	69fa      	ldr	r2, [r7, #28]
 800310e:	f002 0203 	and.w	r2, r2, #3
 8003112:	0092      	lsls	r2, r2, #2
 8003114:	4093      	lsls	r3, r2
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800311c:	4934      	ldr	r1, [pc, #208]	; (80031f0 <HAL_GPIO_Init+0x324>)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	3302      	adds	r3, #2
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800312a:	4b3c      	ldr	r3, [pc, #240]	; (800321c <HAL_GPIO_Init+0x350>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800314e:	4a33      	ldr	r2, [pc, #204]	; (800321c <HAL_GPIO_Init+0x350>)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003154:	4b31      	ldr	r3, [pc, #196]	; (800321c <HAL_GPIO_Init+0x350>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003178:	4a28      	ldr	r2, [pc, #160]	; (800321c <HAL_GPIO_Init+0x350>)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800317e:	4b27      	ldr	r3, [pc, #156]	; (800321c <HAL_GPIO_Init+0x350>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031a2:	4a1e      	ldr	r2, [pc, #120]	; (800321c <HAL_GPIO_Init+0x350>)
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031a8:	4b1c      	ldr	r3, [pc, #112]	; (800321c <HAL_GPIO_Init+0x350>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031cc:	4a13      	ldr	r2, [pc, #76]	; (800321c <HAL_GPIO_Init+0x350>)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3301      	adds	r3, #1
 80031d6:	61fb      	str	r3, [r7, #28]
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	2b0f      	cmp	r3, #15
 80031dc:	f67f ae86 	bls.w	8002eec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031e0:	bf00      	nop
 80031e2:	3724      	adds	r7, #36	; 0x24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40013800 	.word	0x40013800
 80031f4:	40020000 	.word	0x40020000
 80031f8:	40020400 	.word	0x40020400
 80031fc:	40020800 	.word	0x40020800
 8003200:	40020c00 	.word	0x40020c00
 8003204:	40021000 	.word	0x40021000
 8003208:	40021400 	.word	0x40021400
 800320c:	40021800 	.word	0x40021800
 8003210:	40021c00 	.word	0x40021c00
 8003214:	40022000 	.word	0x40022000
 8003218:	40022400 	.word	0x40022400
 800321c:	40013c00 	.word	0x40013c00

08003220 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	887b      	ldrh	r3, [r7, #2]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003238:	2301      	movs	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
 800323c:	e001      	b.n	8003242 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003242:	7bfb      	ldrb	r3, [r7, #15]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	807b      	strh	r3, [r7, #2]
 800325c:	4613      	mov	r3, r2
 800325e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003260:	787b      	ldrb	r3, [r7, #1]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003266:	887a      	ldrh	r2, [r7, #2]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800326c:	e003      	b.n	8003276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800326e:	887b      	ldrh	r3, [r7, #2]
 8003270:	041a      	lsls	r2, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	619a      	str	r2, [r3, #24]
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	887b      	ldrh	r3, [r7, #2]
 8003294:	4013      	ands	r3, r2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d004      	beq.n	80032a4 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800329a:	887b      	ldrh	r3, [r7, #2]
 800329c:	041a      	lsls	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80032a2:	e002      	b.n	80032aa <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032a4:	887a      	ldrh	r2, [r7, #2]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	619a      	str	r2, [r3, #24]
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
	...

080032b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032c0:	2300      	movs	r3, #0
 80032c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e29b      	b.n	8003806 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 8087 	beq.w	80033ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032dc:	4b96      	ldr	r3, [pc, #600]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 030c 	and.w	r3, r3, #12
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d00c      	beq.n	8003302 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e8:	4b93      	ldr	r3, [pc, #588]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d112      	bne.n	800331a <HAL_RCC_OscConfig+0x62>
 80032f4:	4b90      	ldr	r3, [pc, #576]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003300:	d10b      	bne.n	800331a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003302:	4b8d      	ldr	r3, [pc, #564]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d06c      	beq.n	80033e8 <HAL_RCC_OscConfig+0x130>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d168      	bne.n	80033e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e275      	b.n	8003806 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003322:	d106      	bne.n	8003332 <HAL_RCC_OscConfig+0x7a>
 8003324:	4b84      	ldr	r3, [pc, #528]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a83      	ldr	r2, [pc, #524]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 800332a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	e02e      	b.n	8003390 <HAL_RCC_OscConfig+0xd8>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10c      	bne.n	8003354 <HAL_RCC_OscConfig+0x9c>
 800333a:	4b7f      	ldr	r3, [pc, #508]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a7e      	ldr	r2, [pc, #504]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4b7c      	ldr	r3, [pc, #496]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a7b      	ldr	r2, [pc, #492]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 800334c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e01d      	b.n	8003390 <HAL_RCC_OscConfig+0xd8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800335c:	d10c      	bne.n	8003378 <HAL_RCC_OscConfig+0xc0>
 800335e:	4b76      	ldr	r3, [pc, #472]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a75      	ldr	r2, [pc, #468]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	4b73      	ldr	r3, [pc, #460]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a72      	ldr	r2, [pc, #456]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e00b      	b.n	8003390 <HAL_RCC_OscConfig+0xd8>
 8003378:	4b6f      	ldr	r3, [pc, #444]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a6e      	ldr	r2, [pc, #440]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 800337e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	4b6c      	ldr	r3, [pc, #432]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a6b      	ldr	r2, [pc, #428]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 800338a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800338e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d013      	beq.n	80033c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fd fcbe 	bl	8000d18 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a0:	f7fd fcba 	bl	8000d18 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	; 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e229      	b.n	8003806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	4b61      	ldr	r3, [pc, #388]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0xe8>
 80033be:	e014      	b.n	80033ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fd fcaa 	bl	8000d18 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c8:	f7fd fca6 	bl	8000d18 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e215      	b.n	8003806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033da:	4b57      	ldr	r3, [pc, #348]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x110>
 80033e6:	e000      	b.n	80033ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d069      	beq.n	80034ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033f6:	4b50      	ldr	r3, [pc, #320]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00b      	beq.n	800341a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003402:	4b4d      	ldr	r3, [pc, #308]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b08      	cmp	r3, #8
 800340c:	d11c      	bne.n	8003448 <HAL_RCC_OscConfig+0x190>
 800340e:	4b4a      	ldr	r3, [pc, #296]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d116      	bne.n	8003448 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341a:	4b47      	ldr	r3, [pc, #284]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <HAL_RCC_OscConfig+0x17a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d001      	beq.n	8003432 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e1e9      	b.n	8003806 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003432:	4b41      	ldr	r3, [pc, #260]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	493d      	ldr	r1, [pc, #244]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003446:	e040      	b.n	80034ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d023      	beq.n	8003498 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003450:	4b39      	ldr	r3, [pc, #228]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a38      	ldr	r2, [pc, #224]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fd fc5c 	bl	8000d18 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003464:	f7fd fc58 	bl	8000d18 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e1c7      	b.n	8003806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003476:	4b30      	ldr	r3, [pc, #192]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003482:	4b2d      	ldr	r3, [pc, #180]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4929      	ldr	r1, [pc, #164]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003492:	4313      	orrs	r3, r2
 8003494:	600b      	str	r3, [r1, #0]
 8003496:	e018      	b.n	80034ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003498:	4b27      	ldr	r3, [pc, #156]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a26      	ldr	r2, [pc, #152]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fd fc38 	bl	8000d18 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ac:	f7fd fc34 	bl	8000d18 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e1a3      	b.n	8003806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034be:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d038      	beq.n	8003548 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d019      	beq.n	8003512 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034de:	4b16      	ldr	r3, [pc, #88]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 80034e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e2:	4a15      	ldr	r2, [pc, #84]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ea:	f7fd fc15 	bl	8000d18 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f2:	f7fd fc11 	bl	8000d18 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e180      	b.n	8003806 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003504:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x23a>
 8003510:	e01a      	b.n	8003548 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003512:	4b09      	ldr	r3, [pc, #36]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003516:	4a08      	ldr	r2, [pc, #32]	; (8003538 <HAL_RCC_OscConfig+0x280>)
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351e:	f7fd fbfb 	bl	8000d18 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003524:	e00a      	b.n	800353c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003526:	f7fd fbf7 	bl	8000d18 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d903      	bls.n	800353c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e166      	b.n	8003806 <HAL_RCC_OscConfig+0x54e>
 8003538:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800353c:	4b92      	ldr	r3, [pc, #584]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 800353e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1ee      	bne.n	8003526 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80a4 	beq.w	800369e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003556:	4b8c      	ldr	r3, [pc, #560]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10d      	bne.n	800357e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003562:	4b89      	ldr	r3, [pc, #548]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	4a88      	ldr	r2, [pc, #544]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 8003568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356c:	6413      	str	r3, [r2, #64]	; 0x40
 800356e:	4b86      	ldr	r3, [pc, #536]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800357a:	2301      	movs	r3, #1
 800357c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800357e:	4b83      	ldr	r3, [pc, #524]	; (800378c <HAL_RCC_OscConfig+0x4d4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003586:	2b00      	cmp	r3, #0
 8003588:	d118      	bne.n	80035bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800358a:	4b80      	ldr	r3, [pc, #512]	; (800378c <HAL_RCC_OscConfig+0x4d4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a7f      	ldr	r2, [pc, #508]	; (800378c <HAL_RCC_OscConfig+0x4d4>)
 8003590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003596:	f7fd fbbf 	bl	8000d18 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359e:	f7fd fbbb 	bl	8000d18 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b64      	cmp	r3, #100	; 0x64
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e12a      	b.n	8003806 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b0:	4b76      	ldr	r3, [pc, #472]	; (800378c <HAL_RCC_OscConfig+0x4d4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d106      	bne.n	80035d2 <HAL_RCC_OscConfig+0x31a>
 80035c4:	4b70      	ldr	r3, [pc, #448]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	4a6f      	ldr	r2, [pc, #444]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	6713      	str	r3, [r2, #112]	; 0x70
 80035d0:	e02d      	b.n	800362e <HAL_RCC_OscConfig+0x376>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x33c>
 80035da:	4b6b      	ldr	r3, [pc, #428]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035de:	4a6a      	ldr	r2, [pc, #424]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	6713      	str	r3, [r2, #112]	; 0x70
 80035e6:	4b68      	ldr	r3, [pc, #416]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	4a67      	ldr	r2, [pc, #412]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 80035ec:	f023 0304 	bic.w	r3, r3, #4
 80035f0:	6713      	str	r3, [r2, #112]	; 0x70
 80035f2:	e01c      	b.n	800362e <HAL_RCC_OscConfig+0x376>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b05      	cmp	r3, #5
 80035fa:	d10c      	bne.n	8003616 <HAL_RCC_OscConfig+0x35e>
 80035fc:	4b62      	ldr	r3, [pc, #392]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	4a61      	ldr	r2, [pc, #388]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 8003602:	f043 0304 	orr.w	r3, r3, #4
 8003606:	6713      	str	r3, [r2, #112]	; 0x70
 8003608:	4b5f      	ldr	r3, [pc, #380]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	4a5e      	ldr	r2, [pc, #376]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	6713      	str	r3, [r2, #112]	; 0x70
 8003614:	e00b      	b.n	800362e <HAL_RCC_OscConfig+0x376>
 8003616:	4b5c      	ldr	r3, [pc, #368]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	4a5b      	ldr	r2, [pc, #364]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	6713      	str	r3, [r2, #112]	; 0x70
 8003622:	4b59      	ldr	r3, [pc, #356]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	4a58      	ldr	r2, [pc, #352]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 8003628:	f023 0304 	bic.w	r3, r3, #4
 800362c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d015      	beq.n	8003662 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003636:	f7fd fb6f 	bl	8000d18 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363c:	e00a      	b.n	8003654 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363e:	f7fd fb6b 	bl	8000d18 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	f241 3288 	movw	r2, #5000	; 0x1388
 800364c:	4293      	cmp	r3, r2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e0d8      	b.n	8003806 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003654:	4b4c      	ldr	r3, [pc, #304]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 8003656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0ee      	beq.n	800363e <HAL_RCC_OscConfig+0x386>
 8003660:	e014      	b.n	800368c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003662:	f7fd fb59 	bl	8000d18 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003668:	e00a      	b.n	8003680 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366a:	f7fd fb55 	bl	8000d18 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	f241 3288 	movw	r2, #5000	; 0x1388
 8003678:	4293      	cmp	r3, r2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e0c2      	b.n	8003806 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003680:	4b41      	ldr	r3, [pc, #260]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1ee      	bne.n	800366a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800368c:	7dfb      	ldrb	r3, [r7, #23]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d105      	bne.n	800369e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003692:	4b3d      	ldr	r3, [pc, #244]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	4a3c      	ldr	r2, [pc, #240]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 8003698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 80ae 	beq.w	8003804 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036a8:	4b37      	ldr	r3, [pc, #220]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 030c 	and.w	r3, r3, #12
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d06d      	beq.n	8003790 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d14b      	bne.n	8003754 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036bc:	4b32      	ldr	r3, [pc, #200]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a31      	ldr	r2, [pc, #196]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 80036c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fd fb26 	bl	8000d18 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d0:	f7fd fb22 	bl	8000d18 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e091      	b.n	8003806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	4b29      	ldr	r3, [pc, #164]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69da      	ldr	r2, [r3, #28]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	019b      	lsls	r3, r3, #6
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	085b      	lsrs	r3, r3, #1
 8003706:	3b01      	subs	r3, #1
 8003708:	041b      	lsls	r3, r3, #16
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	061b      	lsls	r3, r3, #24
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	071b      	lsls	r3, r3, #28
 800371a:	491b      	ldr	r1, [pc, #108]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003720:	4b19      	ldr	r3, [pc, #100]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a18      	ldr	r2, [pc, #96]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 8003726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800372a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7fd faf4 	bl	8000d18 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003734:	f7fd faf0 	bl	8000d18 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e05f      	b.n	8003806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003746:	4b10      	ldr	r3, [pc, #64]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x47c>
 8003752:	e057      	b.n	8003804 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a0b      	ldr	r2, [pc, #44]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 800375a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800375e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fd fada 	bl	8000d18 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003768:	f7fd fad6 	bl	8000d18 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e045      	b.n	8003806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377a:	4b03      	ldr	r3, [pc, #12]	; (8003788 <HAL_RCC_OscConfig+0x4d0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x4b0>
 8003786:	e03d      	b.n	8003804 <HAL_RCC_OscConfig+0x54c>
 8003788:	40023800 	.word	0x40023800
 800378c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003790:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <HAL_RCC_OscConfig+0x558>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d030      	beq.n	8003800 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d129      	bne.n	8003800 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d122      	bne.n	8003800 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037c0:	4013      	ands	r3, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d119      	bne.n	8003800 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	085b      	lsrs	r3, r3, #1
 80037d8:	3b01      	subs	r3, #1
 80037da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037dc:	429a      	cmp	r2, r3
 80037de:	d10f      	bne.n	8003800 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d107      	bne.n	8003800 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40023800 	.word	0x40023800

08003814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0d0      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800382c:	4b6a      	ldr	r3, [pc, #424]	; (80039d8 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 030f 	and.w	r3, r3, #15
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d910      	bls.n	800385c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383a:	4b67      	ldr	r3, [pc, #412]	; (80039d8 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 020f 	bic.w	r2, r3, #15
 8003842:	4965      	ldr	r1, [pc, #404]	; (80039d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b63      	ldr	r3, [pc, #396]	; (80039d8 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0b8      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d020      	beq.n	80038aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003874:	4b59      	ldr	r3, [pc, #356]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	4a58      	ldr	r2, [pc, #352]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 800387a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800387e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800388c:	4b53      	ldr	r3, [pc, #332]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	4a52      	ldr	r2, [pc, #328]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 8003892:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003896:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003898:	4b50      	ldr	r3, [pc, #320]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	494d      	ldr	r1, [pc, #308]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d040      	beq.n	8003938 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d107      	bne.n	80038ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038be:	4b47      	ldr	r3, [pc, #284]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d115      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e07f      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d107      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d6:	4b41      	ldr	r3, [pc, #260]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e073      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e6:	4b3d      	ldr	r3, [pc, #244]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e06b      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038f6:	4b39      	ldr	r3, [pc, #228]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f023 0203 	bic.w	r2, r3, #3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	4936      	ldr	r1, [pc, #216]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 8003904:	4313      	orrs	r3, r2
 8003906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003908:	f7fd fa06 	bl	8000d18 <HAL_GetTick>
 800390c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390e:	e00a      	b.n	8003926 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003910:	f7fd fa02 	bl	8000d18 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	f241 3288 	movw	r2, #5000	; 0x1388
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e053      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003926:	4b2d      	ldr	r3, [pc, #180]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 020c 	and.w	r2, r3, #12
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	429a      	cmp	r2, r3
 8003936:	d1eb      	bne.n	8003910 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003938:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <HAL_RCC_ClockConfig+0x1c4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d210      	bcs.n	8003968 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003946:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 020f 	bic.w	r2, r3, #15
 800394e:	4922      	ldr	r1, [pc, #136]	; (80039d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	4313      	orrs	r3, r2
 8003954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003956:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e032      	b.n	80039ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003974:	4b19      	ldr	r3, [pc, #100]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	4916      	ldr	r1, [pc, #88]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 8003982:	4313      	orrs	r3, r2
 8003984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d009      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003992:	4b12      	ldr	r3, [pc, #72]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	490e      	ldr	r1, [pc, #56]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039a6:	f000 f821 	bl	80039ec <HAL_RCC_GetSysClockFreq>
 80039aa:	4601      	mov	r1, r0
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <HAL_RCC_ClockConfig+0x1cc>)
 80039b8:	5cd3      	ldrb	r3, [r2, r3]
 80039ba:	fa21 f303 	lsr.w	r3, r1, r3
 80039be:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <HAL_RCC_ClockConfig+0x1d0>)
 80039c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039c2:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <HAL_RCC_ClockConfig+0x1d4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fd f962 	bl	8000c90 <HAL_InitTick>

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023c00 	.word	0x40023c00
 80039dc:	40023800 	.word	0x40023800
 80039e0:	08006c58 	.word	0x08006c58
 80039e4:	20000010 	.word	0x20000010
 80039e8:	20000008 	.word	0x20000008

080039ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80039f2:	2300      	movs	r3, #0
 80039f4:	607b      	str	r3, [r7, #4]
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	2300      	movs	r3, #0
 80039fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a02:	4b63      	ldr	r3, [pc, #396]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d007      	beq.n	8003a1e <HAL_RCC_GetSysClockFreq+0x32>
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d008      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x38>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f040 80b4 	bne.w	8003b80 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a18:	4b5e      	ldr	r3, [pc, #376]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a1a:	60bb      	str	r3, [r7, #8]
      break;
 8003a1c:	e0b3      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a1e:	4b5e      	ldr	r3, [pc, #376]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003a20:	60bb      	str	r3, [r7, #8]
      break;
 8003a22:	e0b0      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a24:	4b5a      	ldr	r3, [pc, #360]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a2c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a2e:	4b58      	ldr	r3, [pc, #352]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d04a      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a3a:	4b55      	ldr	r3, [pc, #340]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	099b      	lsrs	r3, r3, #6
 8003a40:	f04f 0400 	mov.w	r4, #0
 8003a44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	ea03 0501 	and.w	r5, r3, r1
 8003a50:	ea04 0602 	and.w	r6, r4, r2
 8003a54:	4629      	mov	r1, r5
 8003a56:	4632      	mov	r2, r6
 8003a58:	f04f 0300 	mov.w	r3, #0
 8003a5c:	f04f 0400 	mov.w	r4, #0
 8003a60:	0154      	lsls	r4, r2, #5
 8003a62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a66:	014b      	lsls	r3, r1, #5
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4622      	mov	r2, r4
 8003a6c:	1b49      	subs	r1, r1, r5
 8003a6e:	eb62 0206 	sbc.w	r2, r2, r6
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	f04f 0400 	mov.w	r4, #0
 8003a7a:	0194      	lsls	r4, r2, #6
 8003a7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a80:	018b      	lsls	r3, r1, #6
 8003a82:	1a5b      	subs	r3, r3, r1
 8003a84:	eb64 0402 	sbc.w	r4, r4, r2
 8003a88:	f04f 0100 	mov.w	r1, #0
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	00e2      	lsls	r2, r4, #3
 8003a92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a96:	00d9      	lsls	r1, r3, #3
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4614      	mov	r4, r2
 8003a9c:	195b      	adds	r3, r3, r5
 8003a9e:	eb44 0406 	adc.w	r4, r4, r6
 8003aa2:	f04f 0100 	mov.w	r1, #0
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	0262      	lsls	r2, r4, #9
 8003aac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003ab0:	0259      	lsls	r1, r3, #9
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4614      	mov	r4, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	4621      	mov	r1, r4
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f04f 0400 	mov.w	r4, #0
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4623      	mov	r3, r4
 8003ac4:	f7fc fbb8 	bl	8000238 <__aeabi_uldivmod>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	460c      	mov	r4, r1
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	e049      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad0:	4b2f      	ldr	r3, [pc, #188]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	099b      	lsrs	r3, r3, #6
 8003ad6:	f04f 0400 	mov.w	r4, #0
 8003ada:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	ea03 0501 	and.w	r5, r3, r1
 8003ae6:	ea04 0602 	and.w	r6, r4, r2
 8003aea:	4629      	mov	r1, r5
 8003aec:	4632      	mov	r2, r6
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	f04f 0400 	mov.w	r4, #0
 8003af6:	0154      	lsls	r4, r2, #5
 8003af8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003afc:	014b      	lsls	r3, r1, #5
 8003afe:	4619      	mov	r1, r3
 8003b00:	4622      	mov	r2, r4
 8003b02:	1b49      	subs	r1, r1, r5
 8003b04:	eb62 0206 	sbc.w	r2, r2, r6
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	f04f 0400 	mov.w	r4, #0
 8003b10:	0194      	lsls	r4, r2, #6
 8003b12:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b16:	018b      	lsls	r3, r1, #6
 8003b18:	1a5b      	subs	r3, r3, r1
 8003b1a:	eb64 0402 	sbc.w	r4, r4, r2
 8003b1e:	f04f 0100 	mov.w	r1, #0
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	00e2      	lsls	r2, r4, #3
 8003b28:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b2c:	00d9      	lsls	r1, r3, #3
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4614      	mov	r4, r2
 8003b32:	195b      	adds	r3, r3, r5
 8003b34:	eb44 0406 	adc.w	r4, r4, r6
 8003b38:	f04f 0100 	mov.w	r1, #0
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	02a2      	lsls	r2, r4, #10
 8003b42:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b46:	0299      	lsls	r1, r3, #10
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4614      	mov	r4, r2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	4621      	mov	r1, r4
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f04f 0400 	mov.w	r4, #0
 8003b56:	461a      	mov	r2, r3
 8003b58:	4623      	mov	r3, r4
 8003b5a:	f7fc fb6d 	bl	8000238 <__aeabi_uldivmod>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	460c      	mov	r4, r1
 8003b62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b64:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	0c1b      	lsrs	r3, r3, #16
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	3301      	adds	r3, #1
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7c:	60bb      	str	r3, [r7, #8]
      break;
 8003b7e:	e002      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b80:	4b04      	ldr	r3, [pc, #16]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b82:	60bb      	str	r3, [r7, #8]
      break;
 8003b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b86:	68bb      	ldr	r3, [r7, #8]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b90:	40023800 	.word	0x40023800
 8003b94:	00f42400 	.word	0x00f42400
 8003b98:	007a1200 	.word	0x007a1200

08003b9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	20000010 	.word	0x20000010

08003bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bb8:	f7ff fff0 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003bbc:	4601      	mov	r1, r0
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	0a9b      	lsrs	r3, r3, #10
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4a03      	ldr	r2, [pc, #12]	; (8003bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bca:	5cd3      	ldrb	r3, [r2, r3]
 8003bcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	08006c68 	.word	0x08006c68

08003bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003be0:	f7ff ffdc 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003be4:	4601      	mov	r1, r0
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	0b5b      	lsrs	r3, r3, #13
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	4a03      	ldr	r2, [pc, #12]	; (8003c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bf2:	5cd3      	ldrb	r3, [r2, r3]
 8003bf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	08006c68 	.word	0x08006c68

08003c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d012      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c2c:	4b69      	ldr	r3, [pc, #420]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	4a68      	ldr	r2, [pc, #416]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c36:	6093      	str	r3, [r2, #8]
 8003c38:	4b66      	ldr	r3, [pc, #408]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c40:	4964      	ldr	r1, [pc, #400]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d017      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c5e:	4b5d      	ldr	r3, [pc, #372]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6c:	4959      	ldr	r1, [pc, #356]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d017      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c9a:	4b4e      	ldr	r3, [pc, #312]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ca0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	494a      	ldr	r1, [pc, #296]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cb8:	d101      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 808b 	beq.w	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ce8:	4b3a      	ldr	r3, [pc, #232]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	4a39      	ldr	r2, [pc, #228]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf4:	4b37      	ldr	r3, [pc, #220]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d00:	4b35      	ldr	r3, [pc, #212]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a34      	ldr	r2, [pc, #208]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0c:	f7fd f804 	bl	8000d18 <HAL_GetTick>
 8003d10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d14:	f7fd f800 	bl	8000d18 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e38d      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d26:	4b2c      	ldr	r3, [pc, #176]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d32:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d035      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d02e      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d50:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	4a1d      	ldr	r2, [pc, #116]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d64:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d66:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6a:	4a1a      	ldr	r2, [pc, #104]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d72:	4a18      	ldr	r2, [pc, #96]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d78:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d114      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fc ffc8 	bl	8000d18 <HAL_GetTick>
 8003d88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d8c:	f7fc ffc4 	bl	8000d18 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e34f      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da2:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0ee      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dba:	d111      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dca:	400b      	ands	r3, r1
 8003dcc:	4901      	ldr	r1, [pc, #4]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	608b      	str	r3, [r1, #8]
 8003dd2:	e00b      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	40007000 	.word	0x40007000
 8003ddc:	0ffffcff 	.word	0x0ffffcff
 8003de0:	4bb3      	ldr	r3, [pc, #716]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	4ab2      	ldr	r2, [pc, #712]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003de6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003dea:	6093      	str	r3, [r2, #8]
 8003dec:	4bb0      	ldr	r3, [pc, #704]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df8:	49ad      	ldr	r1, [pc, #692]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d010      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e0a:	4ba9      	ldr	r3, [pc, #676]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e10:	4aa7      	ldr	r2, [pc, #668]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e1a:	4ba5      	ldr	r3, [pc, #660]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	49a2      	ldr	r1, [pc, #648]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e38:	4b9d      	ldr	r3, [pc, #628]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e46:	499a      	ldr	r1, [pc, #616]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e5a:	4b95      	ldr	r3, [pc, #596]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e68:	4991      	ldr	r1, [pc, #580]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e7c:	4b8c      	ldr	r3, [pc, #560]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e8a:	4989      	ldr	r1, [pc, #548]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e9e:	4b84      	ldr	r3, [pc, #528]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	4980      	ldr	r1, [pc, #512]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ec0:	4b7b      	ldr	r3, [pc, #492]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	f023 0203 	bic.w	r2, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	4978      	ldr	r1, [pc, #480]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ee2:	4b73      	ldr	r3, [pc, #460]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee8:	f023 020c 	bic.w	r2, r3, #12
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef0:	496f      	ldr	r1, [pc, #444]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f04:	4b6a      	ldr	r3, [pc, #424]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f12:	4967      	ldr	r1, [pc, #412]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f26:	4b62      	ldr	r3, [pc, #392]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f34:	495e      	ldr	r1, [pc, #376]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f48:	4b59      	ldr	r3, [pc, #356]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f56:	4956      	ldr	r1, [pc, #344]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f6a:	4b51      	ldr	r3, [pc, #324]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f78:	494d      	ldr	r1, [pc, #308]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f8c:	4b48      	ldr	r3, [pc, #288]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9a:	4945      	ldr	r1, [pc, #276]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003fae:	4b40      	ldr	r3, [pc, #256]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fbc:	493c      	ldr	r1, [pc, #240]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fd0:	4b37      	ldr	r3, [pc, #220]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fde:	4934      	ldr	r1, [pc, #208]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d011      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ff2:	4b2f      	ldr	r3, [pc, #188]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004000:	492b      	ldr	r1, [pc, #172]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800400c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004010:	d101      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004012:	2301      	movs	r3, #1
 8004014:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004022:	2301      	movs	r3, #1
 8004024:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004032:	4b1f      	ldr	r3, [pc, #124]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004038:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004040:	491b      	ldr	r1, [pc, #108]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00b      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004054:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004064:	4912      	ldr	r1, [pc, #72]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00b      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004078:	4b0d      	ldr	r3, [pc, #52]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004088:	4909      	ldr	r1, [pc, #36]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00f      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800409c:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800409e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ac:	e002      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80040ae:	bf00      	nop
 80040b0:	40023800 	.word	0x40023800
 80040b4:	4985      	ldr	r1, [pc, #532]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00b      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040c8:	4b80      	ldr	r3, [pc, #512]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d8:	497c      	ldr	r1, [pc, #496]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d005      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040ee:	f040 80d6 	bne.w	800429e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040f2:	4b76      	ldr	r3, [pc, #472]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a75      	ldr	r2, [pc, #468]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040fe:	f7fc fe0b 	bl	8000d18 <HAL_GetTick>
 8004102:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004104:	e008      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004106:	f7fc fe07 	bl	8000d18 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b64      	cmp	r3, #100	; 0x64
 8004112:	d901      	bls.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e194      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004118:	4b6c      	ldr	r3, [pc, #432]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f0      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d021      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004134:	2b00      	cmp	r3, #0
 8004136:	d11d      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004138:	4b64      	ldr	r3, [pc, #400]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800413a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800413e:	0c1b      	lsrs	r3, r3, #16
 8004140:	f003 0303 	and.w	r3, r3, #3
 8004144:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004146:	4b61      	ldr	r3, [pc, #388]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414c:	0e1b      	lsrs	r3, r3, #24
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	019a      	lsls	r2, r3, #6
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	041b      	lsls	r3, r3, #16
 800415e:	431a      	orrs	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	061b      	lsls	r3, r3, #24
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	071b      	lsls	r3, r3, #28
 800416c:	4957      	ldr	r1, [pc, #348]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d004      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004184:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004188:	d00a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004192:	2b00      	cmp	r3, #0
 8004194:	d02e      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800419e:	d129      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041a0:	4b4a      	ldr	r3, [pc, #296]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a6:	0c1b      	lsrs	r3, r3, #16
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041ae:	4b47      	ldr	r3, [pc, #284]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b4:	0f1b      	lsrs	r3, r3, #28
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	019a      	lsls	r2, r3, #6
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	041b      	lsls	r3, r3, #16
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	061b      	lsls	r3, r3, #24
 80041ce:	431a      	orrs	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	071b      	lsls	r3, r3, #28
 80041d4:	493d      	ldr	r1, [pc, #244]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041dc:	4b3b      	ldr	r3, [pc, #236]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041e2:	f023 021f 	bic.w	r2, r3, #31
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	3b01      	subs	r3, #1
 80041ec:	4937      	ldr	r1, [pc, #220]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01d      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004200:	4b32      	ldr	r3, [pc, #200]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004206:	0e1b      	lsrs	r3, r3, #24
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800420e:	4b2f      	ldr	r3, [pc, #188]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004214:	0f1b      	lsrs	r3, r3, #28
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	019a      	lsls	r2, r3, #6
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	041b      	lsls	r3, r3, #16
 8004228:	431a      	orrs	r2, r3
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	061b      	lsls	r3, r3, #24
 800422e:	431a      	orrs	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	071b      	lsls	r3, r3, #28
 8004234:	4925      	ldr	r1, [pc, #148]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d011      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	019a      	lsls	r2, r3, #6
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	041b      	lsls	r3, r3, #16
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	061b      	lsls	r3, r3, #24
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	071b      	lsls	r3, r3, #28
 8004264:	4919      	ldr	r1, [pc, #100]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800426c:	4b17      	ldr	r3, [pc, #92]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a16      	ldr	r2, [pc, #88]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004272:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004276:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004278:	f7fc fd4e 	bl	8000d18 <HAL_GetTick>
 800427c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004280:	f7fc fd4a 	bl	8000d18 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b64      	cmp	r3, #100	; 0x64
 800428c:	d901      	bls.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e0d7      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004292:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	f040 80cd 	bne.w	8004440 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042a6:	4b09      	ldr	r3, [pc, #36]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a08      	ldr	r2, [pc, #32]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80042ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b2:	f7fc fd31 	bl	8000d18 <HAL_GetTick>
 80042b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042b8:	e00a      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042ba:	f7fc fd2d 	bl	8000d18 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b64      	cmp	r3, #100	; 0x64
 80042c6:	d903      	bls.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e0ba      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80042cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042d0:	4b5e      	ldr	r3, [pc, #376]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042dc:	d0ed      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d02e      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	d12a      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004306:	4b51      	ldr	r3, [pc, #324]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430c:	0c1b      	lsrs	r3, r3, #16
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004314:	4b4d      	ldr	r3, [pc, #308]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431a:	0f1b      	lsrs	r3, r3, #28
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	019a      	lsls	r2, r3, #6
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	041b      	lsls	r3, r3, #16
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	061b      	lsls	r3, r3, #24
 8004334:	431a      	orrs	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	071b      	lsls	r3, r3, #28
 800433a:	4944      	ldr	r1, [pc, #272]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004342:	4b42      	ldr	r3, [pc, #264]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004348:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	3b01      	subs	r3, #1
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	493d      	ldr	r1, [pc, #244]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d022      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800436c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004370:	d11d      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004372:	4b36      	ldr	r3, [pc, #216]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004378:	0e1b      	lsrs	r3, r3, #24
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004380:	4b32      	ldr	r3, [pc, #200]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	0f1b      	lsrs	r3, r3, #28
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	019a      	lsls	r2, r3, #6
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	041b      	lsls	r3, r3, #16
 800439a:	431a      	orrs	r2, r3
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	061b      	lsls	r3, r3, #24
 80043a0:	431a      	orrs	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	071b      	lsls	r3, r3, #28
 80043a6:	4929      	ldr	r1, [pc, #164]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d028      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043ba:	4b24      	ldr	r3, [pc, #144]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	0e1b      	lsrs	r3, r3, #24
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043c8:	4b20      	ldr	r3, [pc, #128]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	0c1b      	lsrs	r3, r3, #16
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	019a      	lsls	r2, r3, #6
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	041b      	lsls	r3, r3, #16
 80043e0:	431a      	orrs	r2, r3
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	061b      	lsls	r3, r3, #24
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	071b      	lsls	r3, r3, #28
 80043ee:	4917      	ldr	r1, [pc, #92]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80043f6:	4b15      	ldr	r3, [pc, #84]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	4911      	ldr	r1, [pc, #68]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800440c:	4b0f      	ldr	r3, [pc, #60]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a0e      	ldr	r2, [pc, #56]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004416:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004418:	f7fc fc7e 	bl	8000d18 <HAL_GetTick>
 800441c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004420:	f7fc fc7a 	bl	8000d18 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b64      	cmp	r3, #100	; 0x64
 800442c:	d901      	bls.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e007      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800443a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800443e:	d1ef      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800

08004450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e01d      	b.n	800449e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f002 f9d0 	bl	800681c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3304      	adds	r3, #4
 800448c:	4619      	mov	r1, r3
 800448e:	4610      	mov	r0, r2
 8004490:	f000 fa40 	bl	8004914 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <HAL_TIM_Base_Start_IT+0x50>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b06      	cmp	r3, #6
 80044d0:	d00b      	beq.n	80044ea <HAL_TIM_Base_Start_IT+0x42>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d8:	d007      	beq.n	80044ea <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 0201 	orr.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	00010007 	.word	0x00010007

080044fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b02      	cmp	r3, #2
 8004510:	d122      	bne.n	8004558 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b02      	cmp	r3, #2
 800451e:	d11b      	bne.n	8004558 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0202 	mvn.w	r2, #2
 8004528:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f9ca 	bl	80048d8 <HAL_TIM_IC_CaptureCallback>
 8004544:	e005      	b.n	8004552 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f9bc 	bl	80048c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f9cd 	bl	80048ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b04      	cmp	r3, #4
 8004564:	d122      	bne.n	80045ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b04      	cmp	r3, #4
 8004572:	d11b      	bne.n	80045ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f06f 0204 	mvn.w	r2, #4
 800457c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2202      	movs	r2, #2
 8004582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f9a0 	bl	80048d8 <HAL_TIM_IC_CaptureCallback>
 8004598:	e005      	b.n	80045a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f992 	bl	80048c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f9a3 	bl	80048ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d122      	bne.n	8004600 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d11b      	bne.n	8004600 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f06f 0208 	mvn.w	r2, #8
 80045d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2204      	movs	r2, #4
 80045d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f976 	bl	80048d8 <HAL_TIM_IC_CaptureCallback>
 80045ec:	e005      	b.n	80045fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f968 	bl	80048c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f979 	bl	80048ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f003 0310 	and.w	r3, r3, #16
 800460a:	2b10      	cmp	r3, #16
 800460c:	d122      	bne.n	8004654 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b10      	cmp	r3, #16
 800461a:	d11b      	bne.n	8004654 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f06f 0210 	mvn.w	r2, #16
 8004624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2208      	movs	r2, #8
 800462a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f94c 	bl	80048d8 <HAL_TIM_IC_CaptureCallback>
 8004640:	e005      	b.n	800464e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f93e 	bl	80048c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f94f 	bl	80048ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b01      	cmp	r3, #1
 8004660:	d10e      	bne.n	8004680 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b01      	cmp	r3, #1
 800466e:	d107      	bne.n	8004680 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0201 	mvn.w	r2, #1
 8004678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f918 	bl	80048b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468a:	2b80      	cmp	r3, #128	; 0x80
 800468c:	d10e      	bne.n	80046ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004698:	2b80      	cmp	r3, #128	; 0x80
 800469a:	d107      	bne.n	80046ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fb06 	bl	8004cb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ba:	d10e      	bne.n	80046da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c6:	2b80      	cmp	r3, #128	; 0x80
 80046c8:	d107      	bne.n	80046da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 faf9 	bl	8004ccc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e4:	2b40      	cmp	r3, #64	; 0x40
 80046e6:	d10e      	bne.n	8004706 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f2:	2b40      	cmp	r3, #64	; 0x40
 80046f4:	d107      	bne.n	8004706 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f8fd 	bl	8004900 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	f003 0320 	and.w	r3, r3, #32
 8004710:	2b20      	cmp	r3, #32
 8004712:	d10e      	bne.n	8004732 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b20      	cmp	r3, #32
 8004720:	d107      	bne.n	8004732 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f06f 0220 	mvn.w	r2, #32
 800472a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fab9 	bl	8004ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004732:	bf00      	nop
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_TIM_ConfigClockSource+0x18>
 8004750:	2302      	movs	r3, #2
 8004752:	e0a6      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x166>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4b4f      	ldr	r3, [pc, #316]	; (80048ac <HAL_TIM_ConfigClockSource+0x170>)
 8004770:	4013      	ands	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800477a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b40      	cmp	r3, #64	; 0x40
 800478a:	d067      	beq.n	800485c <HAL_TIM_ConfigClockSource+0x120>
 800478c:	2b40      	cmp	r3, #64	; 0x40
 800478e:	d80b      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x6c>
 8004790:	2b10      	cmp	r3, #16
 8004792:	d073      	beq.n	800487c <HAL_TIM_ConfigClockSource+0x140>
 8004794:	2b10      	cmp	r3, #16
 8004796:	d802      	bhi.n	800479e <HAL_TIM_ConfigClockSource+0x62>
 8004798:	2b00      	cmp	r3, #0
 800479a:	d06f      	beq.n	800487c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800479c:	e078      	b.n	8004890 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d06c      	beq.n	800487c <HAL_TIM_ConfigClockSource+0x140>
 80047a2:	2b30      	cmp	r3, #48	; 0x30
 80047a4:	d06a      	beq.n	800487c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80047a6:	e073      	b.n	8004890 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047a8:	2b70      	cmp	r3, #112	; 0x70
 80047aa:	d00d      	beq.n	80047c8 <HAL_TIM_ConfigClockSource+0x8c>
 80047ac:	2b70      	cmp	r3, #112	; 0x70
 80047ae:	d804      	bhi.n	80047ba <HAL_TIM_ConfigClockSource+0x7e>
 80047b0:	2b50      	cmp	r3, #80	; 0x50
 80047b2:	d033      	beq.n	800481c <HAL_TIM_ConfigClockSource+0xe0>
 80047b4:	2b60      	cmp	r3, #96	; 0x60
 80047b6:	d041      	beq.n	800483c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80047b8:	e06a      	b.n	8004890 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047be:	d066      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x152>
 80047c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c4:	d017      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80047c6:	e063      	b.n	8004890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6899      	ldr	r1, [r3, #8]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f000 f9b6 	bl	8004b48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	609a      	str	r2, [r3, #8]
      break;
 80047f4:	e04c      	b.n	8004890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6899      	ldr	r1, [r3, #8]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f000 f99f 	bl	8004b48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004818:	609a      	str	r2, [r3, #8]
      break;
 800481a:	e039      	b.n	8004890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	6859      	ldr	r1, [r3, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	461a      	mov	r2, r3
 800482a:	f000 f913 	bl	8004a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2150      	movs	r1, #80	; 0x50
 8004834:	4618      	mov	r0, r3
 8004836:	f000 f96c 	bl	8004b12 <TIM_ITRx_SetConfig>
      break;
 800483a:	e029      	b.n	8004890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	6859      	ldr	r1, [r3, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	461a      	mov	r2, r3
 800484a:	f000 f932 	bl	8004ab2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2160      	movs	r1, #96	; 0x60
 8004854:	4618      	mov	r0, r3
 8004856:	f000 f95c 	bl	8004b12 <TIM_ITRx_SetConfig>
      break;
 800485a:	e019      	b.n	8004890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	6859      	ldr	r1, [r3, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	461a      	mov	r2, r3
 800486a:	f000 f8f3 	bl	8004a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2140      	movs	r1, #64	; 0x40
 8004874:	4618      	mov	r0, r3
 8004876:	f000 f94c 	bl	8004b12 <TIM_ITRx_SetConfig>
      break;
 800487a:	e009      	b.n	8004890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4619      	mov	r1, r3
 8004886:	4610      	mov	r0, r2
 8004888:	f000 f943 	bl	8004b12 <TIM_ITRx_SetConfig>
      break;
 800488c:	e000      	b.n	8004890 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800488e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	fffeff88 	.word	0xfffeff88

080048b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a40      	ldr	r2, [pc, #256]	; (8004a28 <TIM_Base_SetConfig+0x114>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d013      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004932:	d00f      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a3d      	ldr	r2, [pc, #244]	; (8004a2c <TIM_Base_SetConfig+0x118>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00b      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a3c      	ldr	r2, [pc, #240]	; (8004a30 <TIM_Base_SetConfig+0x11c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d007      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a3b      	ldr	r2, [pc, #236]	; (8004a34 <TIM_Base_SetConfig+0x120>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_Base_SetConfig+0x40>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a3a      	ldr	r2, [pc, #232]	; (8004a38 <TIM_Base_SetConfig+0x124>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d108      	bne.n	8004966 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a2f      	ldr	r2, [pc, #188]	; (8004a28 <TIM_Base_SetConfig+0x114>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d02b      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004974:	d027      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a2c      	ldr	r2, [pc, #176]	; (8004a2c <TIM_Base_SetConfig+0x118>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d023      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a2b      	ldr	r2, [pc, #172]	; (8004a30 <TIM_Base_SetConfig+0x11c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01f      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a2a      	ldr	r2, [pc, #168]	; (8004a34 <TIM_Base_SetConfig+0x120>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d01b      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a29      	ldr	r2, [pc, #164]	; (8004a38 <TIM_Base_SetConfig+0x124>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d017      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a28      	ldr	r2, [pc, #160]	; (8004a3c <TIM_Base_SetConfig+0x128>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d013      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a27      	ldr	r2, [pc, #156]	; (8004a40 <TIM_Base_SetConfig+0x12c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00f      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a26      	ldr	r2, [pc, #152]	; (8004a44 <TIM_Base_SetConfig+0x130>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00b      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a25      	ldr	r2, [pc, #148]	; (8004a48 <TIM_Base_SetConfig+0x134>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d007      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a24      	ldr	r2, [pc, #144]	; (8004a4c <TIM_Base_SetConfig+0x138>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d003      	beq.n	80049c6 <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a23      	ldr	r2, [pc, #140]	; (8004a50 <TIM_Base_SetConfig+0x13c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d108      	bne.n	80049d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <TIM_Base_SetConfig+0x114>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <TIM_Base_SetConfig+0xf8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a0c      	ldr	r2, [pc, #48]	; (8004a38 <TIM_Base_SetConfig+0x124>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d103      	bne.n	8004a14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	615a      	str	r2, [r3, #20]
}
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40010000 	.word	0x40010000
 8004a2c:	40000400 	.word	0x40000400
 8004a30:	40000800 	.word	0x40000800
 8004a34:	40000c00 	.word	0x40000c00
 8004a38:	40010400 	.word	0x40010400
 8004a3c:	40014000 	.word	0x40014000
 8004a40:	40014400 	.word	0x40014400
 8004a44:	40014800 	.word	0x40014800
 8004a48:	40001800 	.word	0x40001800
 8004a4c:	40001c00 	.word	0x40001c00
 8004a50:	40002000 	.word	0x40002000

08004a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f023 0201 	bic.w	r2, r3, #1
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 030a 	bic.w	r3, r3, #10
 8004a90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	621a      	str	r2, [r3, #32]
}
 8004aa6:	bf00      	nop
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b087      	sub	sp, #28
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f023 0210 	bic.w	r2, r3, #16
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004adc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	031b      	lsls	r3, r3, #12
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004aee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f043 0307 	orr.w	r3, r3, #7
 8004b34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	609a      	str	r2, [r3, #8]
}
 8004b3c:	bf00      	nop
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	021a      	lsls	r2, r3, #8
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	609a      	str	r2, [r3, #8]
}
 8004b7c:	bf00      	nop
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e06d      	b.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a30      	ldr	r2, [pc, #192]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d004      	beq.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a2f      	ldr	r2, [pc, #188]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d108      	bne.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004bda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a20      	ldr	r2, [pc, #128]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d022      	beq.n	8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c12:	d01d      	beq.n	8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a1d      	ldr	r2, [pc, #116]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d018      	beq.n	8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a1c      	ldr	r2, [pc, #112]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d013      	beq.n	8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1a      	ldr	r2, [pc, #104]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d00e      	beq.n	8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d009      	beq.n	8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a16      	ldr	r2, [pc, #88]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d004      	beq.n	8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a15      	ldr	r2, [pc, #84]	; (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d10c      	bne.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	40010400 	.word	0x40010400
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40000800 	.word	0x40000800
 8004c98:	40000c00 	.word	0x40000c00
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	40001800 	.word	0x40001800

08004ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e040      	b.n	8004d74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f001 fdae 	bl	8006864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2224      	movs	r2, #36	; 0x24
 8004d0c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0201 	bic.w	r2, r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 faae 	bl	8005280 <UART_SetConfig>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e022      	b.n	8004d74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fd4c 	bl	80057d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fdd3 	bl	8005918 <UART_CheckIdleState>
 8004d72:	4603      	mov	r3, r0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	4613      	mov	r3, r2
 8004d88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d164      	bne.n	8004e5c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <HAL_UART_Transmit_DMA+0x22>
 8004d98:	88fb      	ldrh	r3, [r7, #6]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e05d      	b.n	8004e5e <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_UART_Transmit_DMA+0x34>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e056      	b.n	8004e5e <HAL_UART_Transmit_DMA+0xe2>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	88fa      	ldrh	r2, [r7, #6]
 8004dc2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	88fa      	ldrh	r2, [r7, #6]
 8004dca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2221      	movs	r2, #33	; 0x21
 8004dd8:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d02a      	beq.n	8004e38 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004de6:	4a20      	ldr	r2, [pc, #128]	; (8004e68 <HAL_UART_Transmit_DMA+0xec>)
 8004de8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dee:	4a1f      	ldr	r2, [pc, #124]	; (8004e6c <HAL_UART_Transmit_DMA+0xf0>)
 8004df0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004df6:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <HAL_UART_Transmit_DMA+0xf4>)
 8004df8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dfe:	2200      	movs	r2, #0
 8004e00:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3328      	adds	r3, #40	; 0x28
 8004e12:	461a      	mov	r2, r3
 8004e14:	88fb      	ldrh	r3, [r7, #6]
 8004e16:	f7fd fd6f 	bl	80028f8 <HAL_DMA_Start_IT>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00b      	beq.n	8004e38 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2210      	movs	r2, #16
 8004e24:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e012      	b.n	8004e5e <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2240      	movs	r2, #64	; 0x40
 8004e3e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e56:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	e000      	b.n	8004e5e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8004e5c:	2302      	movs	r3, #2
  }
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	08005b03 	.word	0x08005b03
 8004e6c:	08005b53 	.word	0x08005b53
 8004e70:	08005bef 	.word	0x08005bef

08004e74 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	d16c      	bne.n	8004f64 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <HAL_UART_Receive_DMA+0x22>
 8004e90:	88fb      	ldrh	r3, [r7, #6]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e065      	b.n	8004f66 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_UART_Receive_DMA+0x34>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e05e      	b.n	8004f66 <HAL_UART_Receive_DMA+0xf2>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	88fa      	ldrh	r2, [r7, #6]
 8004eba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2222      	movs	r2, #34	; 0x22
 8004ec8:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d02a      	beq.n	8004f28 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ed6:	4a26      	ldr	r2, [pc, #152]	; (8004f70 <HAL_UART_Receive_DMA+0xfc>)
 8004ed8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ede:	4a25      	ldr	r2, [pc, #148]	; (8004f74 <HAL_UART_Receive_DMA+0x100>)
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ee6:	4a24      	ldr	r2, [pc, #144]	; (8004f78 <HAL_UART_Receive_DMA+0x104>)
 8004ee8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eee:	2200      	movs	r2, #0
 8004ef0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3324      	adds	r3, #36	; 0x24
 8004efc:	4619      	mov	r1, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f02:	461a      	mov	r2, r3
 8004f04:	88fb      	ldrh	r3, [r7, #6]
 8004f06:	f7fd fcf7 	bl	80028f8 <HAL_DMA_Start_IT>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00b      	beq.n	8004f28 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2210      	movs	r2, #16
 8004f14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e01e      	b.n	8004f66 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f3e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f5e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	e000      	b.n	8004f66 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8004f64:	2302      	movs	r3, #2
  }
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	08005b6f 	.word	0x08005b6f
 8004f74:	08005bd3 	.word	0x08005bd3
 8004f78:	08005bef 	.word	0x08005bef

08004f7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d113      	bne.n	8004fd4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00e      	beq.n	8004fd4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d009      	beq.n	8004fd4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 8114 	beq.w	80051f2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	4798      	blx	r3
      }
      return;
 8004fd2:	e10e      	b.n	80051f2 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 80d6 	beq.w	8005188 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d105      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 80cb 	beq.w	8005188 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00e      	beq.n	800501a <HAL_UART_IRQHandler+0x9e>
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005002:	2b00      	cmp	r3, #0
 8005004:	d009      	beq.n	800501a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2201      	movs	r2, #1
 800500c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005012:	f043 0201 	orr.w	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00e      	beq.n	8005042 <HAL_UART_IRQHandler+0xc6>
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d009      	beq.n	8005042 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2202      	movs	r2, #2
 8005034:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800503a:	f043 0204 	orr.w	r2, r3, #4
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00e      	beq.n	800506a <HAL_UART_IRQHandler+0xee>
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d009      	beq.n	800506a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2204      	movs	r2, #4
 800505c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005062:	f043 0202 	orr.w	r2, r3, #2
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b00      	cmp	r3, #0
 8005072:	d013      	beq.n	800509c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b00      	cmp	r3, #0
 800507c:	d104      	bne.n	8005088 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005084:	2b00      	cmp	r3, #0
 8005086:	d009      	beq.n	800509c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2208      	movs	r2, #8
 800508e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005094:	f043 0208 	orr.w	r2, r3, #8
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00f      	beq.n	80050c6 <HAL_UART_IRQHandler+0x14a>
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050be:	f043 0220 	orr.w	r2, r3, #32
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 8093 	beq.w	80051f6 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00c      	beq.n	80050f4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	f003 0320 	and.w	r3, r3, #32
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050f8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d004      	beq.n	8005112 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800510e:	2b00      	cmp	r3, #0
 8005110:	d031      	beq.n	8005176 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fcd5 	bl	8005ac2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b40      	cmp	r3, #64	; 0x40
 8005124:	d123      	bne.n	800516e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005134:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800513a:	2b00      	cmp	r3, #0
 800513c:	d013      	beq.n	8005166 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005142:	4a30      	ldr	r2, [pc, #192]	; (8005204 <HAL_UART_IRQHandler+0x288>)
 8005144:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800514a:	4618      	mov	r0, r3
 800514c:	f7fd fc34 	bl	80029b8 <HAL_DMA_Abort_IT>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d016      	beq.n	8005184 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800515a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005160:	4610      	mov	r0, r2
 8005162:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005164:	e00e      	b.n	8005184 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f876 	bl	8005258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516c:	e00a      	b.n	8005184 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f872 	bl	8005258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005174:	e006      	b.n	8005184 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f86e 	bl	8005258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005182:	e038      	b.n	80051f6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005184:	bf00      	nop
    return;
 8005186:	e036      	b.n	80051f6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00d      	beq.n	80051ae <HAL_UART_IRQHandler+0x232>
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d008      	beq.n	80051ae <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80051a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f860 	bl	800526c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051ac:	e026      	b.n	80051fc <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00d      	beq.n	80051d4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d008      	beq.n	80051d4 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d017      	beq.n	80051fa <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	4798      	blx	r3
    }
    return;
 80051d2:	e012      	b.n	80051fa <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00e      	beq.n	80051fc <HAL_UART_IRQHandler+0x280>
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d009      	beq.n	80051fc <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fd52 	bl	8005c92 <UART_EndTransmit_IT>
    return;
 80051ee:	bf00      	nop
 80051f0:	e004      	b.n	80051fc <HAL_UART_IRQHandler+0x280>
      return;
 80051f2:	bf00      	nop
 80051f4:	e002      	b.n	80051fc <HAL_UART_IRQHandler+0x280>
    return;
 80051f6:	bf00      	nop
 80051f8:	e000      	b.n	80051fc <HAL_UART_IRQHandler+0x280>
    return;
 80051fa:	bf00      	nop
  }

}
 80051fc:	3720      	adds	r7, #32
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	08005c67 	.word	0x08005c67

08005208 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005288:	2300      	movs	r3, #0
 800528a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	4bb1      	ldr	r3, [pc, #708]	; (8005574 <UART_SetConfig+0x2f4>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	6939      	ldr	r1, [r7, #16]
 80052b8:	430b      	orrs	r3, r1
 80052ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a9f      	ldr	r2, [pc, #636]	; (8005578 <UART_SetConfig+0x2f8>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d121      	bne.n	8005344 <UART_SetConfig+0xc4>
 8005300:	4b9e      	ldr	r3, [pc, #632]	; (800557c <UART_SetConfig+0x2fc>)
 8005302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	2b03      	cmp	r3, #3
 800530c:	d816      	bhi.n	800533c <UART_SetConfig+0xbc>
 800530e:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <UART_SetConfig+0x94>)
 8005310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005314:	08005325 	.word	0x08005325
 8005318:	08005331 	.word	0x08005331
 800531c:	0800532b 	.word	0x0800532b
 8005320:	08005337 	.word	0x08005337
 8005324:	2301      	movs	r3, #1
 8005326:	77fb      	strb	r3, [r7, #31]
 8005328:	e151      	b.n	80055ce <UART_SetConfig+0x34e>
 800532a:	2302      	movs	r3, #2
 800532c:	77fb      	strb	r3, [r7, #31]
 800532e:	e14e      	b.n	80055ce <UART_SetConfig+0x34e>
 8005330:	2304      	movs	r3, #4
 8005332:	77fb      	strb	r3, [r7, #31]
 8005334:	e14b      	b.n	80055ce <UART_SetConfig+0x34e>
 8005336:	2308      	movs	r3, #8
 8005338:	77fb      	strb	r3, [r7, #31]
 800533a:	e148      	b.n	80055ce <UART_SetConfig+0x34e>
 800533c:	2310      	movs	r3, #16
 800533e:	77fb      	strb	r3, [r7, #31]
 8005340:	bf00      	nop
 8005342:	e144      	b.n	80055ce <UART_SetConfig+0x34e>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a8d      	ldr	r2, [pc, #564]	; (8005580 <UART_SetConfig+0x300>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d134      	bne.n	80053b8 <UART_SetConfig+0x138>
 800534e:	4b8b      	ldr	r3, [pc, #556]	; (800557c <UART_SetConfig+0x2fc>)
 8005350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005354:	f003 030c 	and.w	r3, r3, #12
 8005358:	2b0c      	cmp	r3, #12
 800535a:	d829      	bhi.n	80053b0 <UART_SetConfig+0x130>
 800535c:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <UART_SetConfig+0xe4>)
 800535e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005362:	bf00      	nop
 8005364:	08005399 	.word	0x08005399
 8005368:	080053b1 	.word	0x080053b1
 800536c:	080053b1 	.word	0x080053b1
 8005370:	080053b1 	.word	0x080053b1
 8005374:	080053a5 	.word	0x080053a5
 8005378:	080053b1 	.word	0x080053b1
 800537c:	080053b1 	.word	0x080053b1
 8005380:	080053b1 	.word	0x080053b1
 8005384:	0800539f 	.word	0x0800539f
 8005388:	080053b1 	.word	0x080053b1
 800538c:	080053b1 	.word	0x080053b1
 8005390:	080053b1 	.word	0x080053b1
 8005394:	080053ab 	.word	0x080053ab
 8005398:	2300      	movs	r3, #0
 800539a:	77fb      	strb	r3, [r7, #31]
 800539c:	e117      	b.n	80055ce <UART_SetConfig+0x34e>
 800539e:	2302      	movs	r3, #2
 80053a0:	77fb      	strb	r3, [r7, #31]
 80053a2:	e114      	b.n	80055ce <UART_SetConfig+0x34e>
 80053a4:	2304      	movs	r3, #4
 80053a6:	77fb      	strb	r3, [r7, #31]
 80053a8:	e111      	b.n	80055ce <UART_SetConfig+0x34e>
 80053aa:	2308      	movs	r3, #8
 80053ac:	77fb      	strb	r3, [r7, #31]
 80053ae:	e10e      	b.n	80055ce <UART_SetConfig+0x34e>
 80053b0:	2310      	movs	r3, #16
 80053b2:	77fb      	strb	r3, [r7, #31]
 80053b4:	bf00      	nop
 80053b6:	e10a      	b.n	80055ce <UART_SetConfig+0x34e>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a71      	ldr	r2, [pc, #452]	; (8005584 <UART_SetConfig+0x304>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d120      	bne.n	8005404 <UART_SetConfig+0x184>
 80053c2:	4b6e      	ldr	r3, [pc, #440]	; (800557c <UART_SetConfig+0x2fc>)
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	d00f      	beq.n	80053f0 <UART_SetConfig+0x170>
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d802      	bhi.n	80053da <UART_SetConfig+0x15a>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <UART_SetConfig+0x164>
 80053d8:	e010      	b.n	80053fc <UART_SetConfig+0x17c>
 80053da:	2b20      	cmp	r3, #32
 80053dc:	d005      	beq.n	80053ea <UART_SetConfig+0x16a>
 80053de:	2b30      	cmp	r3, #48	; 0x30
 80053e0:	d009      	beq.n	80053f6 <UART_SetConfig+0x176>
 80053e2:	e00b      	b.n	80053fc <UART_SetConfig+0x17c>
 80053e4:	2300      	movs	r3, #0
 80053e6:	77fb      	strb	r3, [r7, #31]
 80053e8:	e0f1      	b.n	80055ce <UART_SetConfig+0x34e>
 80053ea:	2302      	movs	r3, #2
 80053ec:	77fb      	strb	r3, [r7, #31]
 80053ee:	e0ee      	b.n	80055ce <UART_SetConfig+0x34e>
 80053f0:	2304      	movs	r3, #4
 80053f2:	77fb      	strb	r3, [r7, #31]
 80053f4:	e0eb      	b.n	80055ce <UART_SetConfig+0x34e>
 80053f6:	2308      	movs	r3, #8
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e0e8      	b.n	80055ce <UART_SetConfig+0x34e>
 80053fc:	2310      	movs	r3, #16
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	bf00      	nop
 8005402:	e0e4      	b.n	80055ce <UART_SetConfig+0x34e>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a5f      	ldr	r2, [pc, #380]	; (8005588 <UART_SetConfig+0x308>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d120      	bne.n	8005450 <UART_SetConfig+0x1d0>
 800540e:	4b5b      	ldr	r3, [pc, #364]	; (800557c <UART_SetConfig+0x2fc>)
 8005410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005414:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005418:	2b40      	cmp	r3, #64	; 0x40
 800541a:	d00f      	beq.n	800543c <UART_SetConfig+0x1bc>
 800541c:	2b40      	cmp	r3, #64	; 0x40
 800541e:	d802      	bhi.n	8005426 <UART_SetConfig+0x1a6>
 8005420:	2b00      	cmp	r3, #0
 8005422:	d005      	beq.n	8005430 <UART_SetConfig+0x1b0>
 8005424:	e010      	b.n	8005448 <UART_SetConfig+0x1c8>
 8005426:	2b80      	cmp	r3, #128	; 0x80
 8005428:	d005      	beq.n	8005436 <UART_SetConfig+0x1b6>
 800542a:	2bc0      	cmp	r3, #192	; 0xc0
 800542c:	d009      	beq.n	8005442 <UART_SetConfig+0x1c2>
 800542e:	e00b      	b.n	8005448 <UART_SetConfig+0x1c8>
 8005430:	2300      	movs	r3, #0
 8005432:	77fb      	strb	r3, [r7, #31]
 8005434:	e0cb      	b.n	80055ce <UART_SetConfig+0x34e>
 8005436:	2302      	movs	r3, #2
 8005438:	77fb      	strb	r3, [r7, #31]
 800543a:	e0c8      	b.n	80055ce <UART_SetConfig+0x34e>
 800543c:	2304      	movs	r3, #4
 800543e:	77fb      	strb	r3, [r7, #31]
 8005440:	e0c5      	b.n	80055ce <UART_SetConfig+0x34e>
 8005442:	2308      	movs	r3, #8
 8005444:	77fb      	strb	r3, [r7, #31]
 8005446:	e0c2      	b.n	80055ce <UART_SetConfig+0x34e>
 8005448:	2310      	movs	r3, #16
 800544a:	77fb      	strb	r3, [r7, #31]
 800544c:	bf00      	nop
 800544e:	e0be      	b.n	80055ce <UART_SetConfig+0x34e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a4d      	ldr	r2, [pc, #308]	; (800558c <UART_SetConfig+0x30c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d124      	bne.n	80054a4 <UART_SetConfig+0x224>
 800545a:	4b48      	ldr	r3, [pc, #288]	; (800557c <UART_SetConfig+0x2fc>)
 800545c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005468:	d012      	beq.n	8005490 <UART_SetConfig+0x210>
 800546a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800546e:	d802      	bhi.n	8005476 <UART_SetConfig+0x1f6>
 8005470:	2b00      	cmp	r3, #0
 8005472:	d007      	beq.n	8005484 <UART_SetConfig+0x204>
 8005474:	e012      	b.n	800549c <UART_SetConfig+0x21c>
 8005476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800547a:	d006      	beq.n	800548a <UART_SetConfig+0x20a>
 800547c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005480:	d009      	beq.n	8005496 <UART_SetConfig+0x216>
 8005482:	e00b      	b.n	800549c <UART_SetConfig+0x21c>
 8005484:	2300      	movs	r3, #0
 8005486:	77fb      	strb	r3, [r7, #31]
 8005488:	e0a1      	b.n	80055ce <UART_SetConfig+0x34e>
 800548a:	2302      	movs	r3, #2
 800548c:	77fb      	strb	r3, [r7, #31]
 800548e:	e09e      	b.n	80055ce <UART_SetConfig+0x34e>
 8005490:	2304      	movs	r3, #4
 8005492:	77fb      	strb	r3, [r7, #31]
 8005494:	e09b      	b.n	80055ce <UART_SetConfig+0x34e>
 8005496:	2308      	movs	r3, #8
 8005498:	77fb      	strb	r3, [r7, #31]
 800549a:	e098      	b.n	80055ce <UART_SetConfig+0x34e>
 800549c:	2310      	movs	r3, #16
 800549e:	77fb      	strb	r3, [r7, #31]
 80054a0:	bf00      	nop
 80054a2:	e094      	b.n	80055ce <UART_SetConfig+0x34e>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a39      	ldr	r2, [pc, #228]	; (8005590 <UART_SetConfig+0x310>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d124      	bne.n	80054f8 <UART_SetConfig+0x278>
 80054ae:	4b33      	ldr	r3, [pc, #204]	; (800557c <UART_SetConfig+0x2fc>)
 80054b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054bc:	d012      	beq.n	80054e4 <UART_SetConfig+0x264>
 80054be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c2:	d802      	bhi.n	80054ca <UART_SetConfig+0x24a>
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d007      	beq.n	80054d8 <UART_SetConfig+0x258>
 80054c8:	e012      	b.n	80054f0 <UART_SetConfig+0x270>
 80054ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ce:	d006      	beq.n	80054de <UART_SetConfig+0x25e>
 80054d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054d4:	d009      	beq.n	80054ea <UART_SetConfig+0x26a>
 80054d6:	e00b      	b.n	80054f0 <UART_SetConfig+0x270>
 80054d8:	2301      	movs	r3, #1
 80054da:	77fb      	strb	r3, [r7, #31]
 80054dc:	e077      	b.n	80055ce <UART_SetConfig+0x34e>
 80054de:	2302      	movs	r3, #2
 80054e0:	77fb      	strb	r3, [r7, #31]
 80054e2:	e074      	b.n	80055ce <UART_SetConfig+0x34e>
 80054e4:	2304      	movs	r3, #4
 80054e6:	77fb      	strb	r3, [r7, #31]
 80054e8:	e071      	b.n	80055ce <UART_SetConfig+0x34e>
 80054ea:	2308      	movs	r3, #8
 80054ec:	77fb      	strb	r3, [r7, #31]
 80054ee:	e06e      	b.n	80055ce <UART_SetConfig+0x34e>
 80054f0:	2310      	movs	r3, #16
 80054f2:	77fb      	strb	r3, [r7, #31]
 80054f4:	bf00      	nop
 80054f6:	e06a      	b.n	80055ce <UART_SetConfig+0x34e>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a25      	ldr	r2, [pc, #148]	; (8005594 <UART_SetConfig+0x314>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d124      	bne.n	800554c <UART_SetConfig+0x2cc>
 8005502:	4b1e      	ldr	r3, [pc, #120]	; (800557c <UART_SetConfig+0x2fc>)
 8005504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005508:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800550c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005510:	d012      	beq.n	8005538 <UART_SetConfig+0x2b8>
 8005512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005516:	d802      	bhi.n	800551e <UART_SetConfig+0x29e>
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <UART_SetConfig+0x2ac>
 800551c:	e012      	b.n	8005544 <UART_SetConfig+0x2c4>
 800551e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005522:	d006      	beq.n	8005532 <UART_SetConfig+0x2b2>
 8005524:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005528:	d009      	beq.n	800553e <UART_SetConfig+0x2be>
 800552a:	e00b      	b.n	8005544 <UART_SetConfig+0x2c4>
 800552c:	2300      	movs	r3, #0
 800552e:	77fb      	strb	r3, [r7, #31]
 8005530:	e04d      	b.n	80055ce <UART_SetConfig+0x34e>
 8005532:	2302      	movs	r3, #2
 8005534:	77fb      	strb	r3, [r7, #31]
 8005536:	e04a      	b.n	80055ce <UART_SetConfig+0x34e>
 8005538:	2304      	movs	r3, #4
 800553a:	77fb      	strb	r3, [r7, #31]
 800553c:	e047      	b.n	80055ce <UART_SetConfig+0x34e>
 800553e:	2308      	movs	r3, #8
 8005540:	77fb      	strb	r3, [r7, #31]
 8005542:	e044      	b.n	80055ce <UART_SetConfig+0x34e>
 8005544:	2310      	movs	r3, #16
 8005546:	77fb      	strb	r3, [r7, #31]
 8005548:	bf00      	nop
 800554a:	e040      	b.n	80055ce <UART_SetConfig+0x34e>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a11      	ldr	r2, [pc, #68]	; (8005598 <UART_SetConfig+0x318>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d139      	bne.n	80055ca <UART_SetConfig+0x34a>
 8005556:	4b09      	ldr	r3, [pc, #36]	; (800557c <UART_SetConfig+0x2fc>)
 8005558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005560:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005564:	d027      	beq.n	80055b6 <UART_SetConfig+0x336>
 8005566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800556a:	d817      	bhi.n	800559c <UART_SetConfig+0x31c>
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01c      	beq.n	80055aa <UART_SetConfig+0x32a>
 8005570:	e027      	b.n	80055c2 <UART_SetConfig+0x342>
 8005572:	bf00      	nop
 8005574:	efff69f3 	.word	0xefff69f3
 8005578:	40011000 	.word	0x40011000
 800557c:	40023800 	.word	0x40023800
 8005580:	40004400 	.word	0x40004400
 8005584:	40004800 	.word	0x40004800
 8005588:	40004c00 	.word	0x40004c00
 800558c:	40005000 	.word	0x40005000
 8005590:	40011400 	.word	0x40011400
 8005594:	40007800 	.word	0x40007800
 8005598:	40007c00 	.word	0x40007c00
 800559c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a0:	d006      	beq.n	80055b0 <UART_SetConfig+0x330>
 80055a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055a6:	d009      	beq.n	80055bc <UART_SetConfig+0x33c>
 80055a8:	e00b      	b.n	80055c2 <UART_SetConfig+0x342>
 80055aa:	2300      	movs	r3, #0
 80055ac:	77fb      	strb	r3, [r7, #31]
 80055ae:	e00e      	b.n	80055ce <UART_SetConfig+0x34e>
 80055b0:	2302      	movs	r3, #2
 80055b2:	77fb      	strb	r3, [r7, #31]
 80055b4:	e00b      	b.n	80055ce <UART_SetConfig+0x34e>
 80055b6:	2304      	movs	r3, #4
 80055b8:	77fb      	strb	r3, [r7, #31]
 80055ba:	e008      	b.n	80055ce <UART_SetConfig+0x34e>
 80055bc:	2308      	movs	r3, #8
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	e005      	b.n	80055ce <UART_SetConfig+0x34e>
 80055c2:	2310      	movs	r3, #16
 80055c4:	77fb      	strb	r3, [r7, #31]
 80055c6:	bf00      	nop
 80055c8:	e001      	b.n	80055ce <UART_SetConfig+0x34e>
 80055ca:	2310      	movs	r3, #16
 80055cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d6:	d17f      	bne.n	80056d8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80055d8:	7ffb      	ldrb	r3, [r7, #31]
 80055da:	2b08      	cmp	r3, #8
 80055dc:	d85c      	bhi.n	8005698 <UART_SetConfig+0x418>
 80055de:	a201      	add	r2, pc, #4	; (adr r2, 80055e4 <UART_SetConfig+0x364>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	08005609 	.word	0x08005609
 80055e8:	08005629 	.word	0x08005629
 80055ec:	08005649 	.word	0x08005649
 80055f0:	08005699 	.word	0x08005699
 80055f4:	08005661 	.word	0x08005661
 80055f8:	08005699 	.word	0x08005699
 80055fc:	08005699 	.word	0x08005699
 8005600:	08005699 	.word	0x08005699
 8005604:	08005681 	.word	0x08005681
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005608:	f7fe fad4 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 800560c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	005a      	lsls	r2, r3, #1
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	085b      	lsrs	r3, r3, #1
 8005618:	441a      	add	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005622:	b29b      	uxth	r3, r3
 8005624:	61bb      	str	r3, [r7, #24]
        break;
 8005626:	e03a      	b.n	800569e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005628:	f7fe fad8 	bl	8003bdc <HAL_RCC_GetPCLK2Freq>
 800562c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	005a      	lsls	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	085b      	lsrs	r3, r3, #1
 8005638:	441a      	add	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005642:	b29b      	uxth	r3, r3
 8005644:	61bb      	str	r3, [r7, #24]
        break;
 8005646:	e02a      	b.n	800569e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	085a      	lsrs	r2, r3, #1
 800564e:	4b5f      	ldr	r3, [pc, #380]	; (80057cc <UART_SetConfig+0x54c>)
 8005650:	4413      	add	r3, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6852      	ldr	r2, [r2, #4]
 8005656:	fbb3 f3f2 	udiv	r3, r3, r2
 800565a:	b29b      	uxth	r3, r3
 800565c:	61bb      	str	r3, [r7, #24]
        break;
 800565e:	e01e      	b.n	800569e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005660:	f7fe f9c4 	bl	80039ec <HAL_RCC_GetSysClockFreq>
 8005664:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	005a      	lsls	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	085b      	lsrs	r3, r3, #1
 8005670:	441a      	add	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	fbb2 f3f3 	udiv	r3, r2, r3
 800567a:	b29b      	uxth	r3, r3
 800567c:	61bb      	str	r3, [r7, #24]
        break;
 800567e:	e00e      	b.n	800569e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	085b      	lsrs	r3, r3, #1
 8005686:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005692:	b29b      	uxth	r3, r3
 8005694:	61bb      	str	r3, [r7, #24]
        break;
 8005696:	e002      	b.n	800569e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	75fb      	strb	r3, [r7, #23]
        break;
 800569c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b0f      	cmp	r3, #15
 80056a2:	d916      	bls.n	80056d2 <UART_SetConfig+0x452>
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056aa:	d212      	bcs.n	80056d2 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	f023 030f 	bic.w	r3, r3, #15
 80056b4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	085b      	lsrs	r3, r3, #1
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	897b      	ldrh	r3, [r7, #10]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	897a      	ldrh	r2, [r7, #10]
 80056ce:	60da      	str	r2, [r3, #12]
 80056d0:	e070      	b.n	80057b4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	75fb      	strb	r3, [r7, #23]
 80056d6:	e06d      	b.n	80057b4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80056d8:	7ffb      	ldrb	r3, [r7, #31]
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d859      	bhi.n	8005792 <UART_SetConfig+0x512>
 80056de:	a201      	add	r2, pc, #4	; (adr r2, 80056e4 <UART_SetConfig+0x464>)
 80056e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e4:	08005709 	.word	0x08005709
 80056e8:	08005727 	.word	0x08005727
 80056ec:	08005745 	.word	0x08005745
 80056f0:	08005793 	.word	0x08005793
 80056f4:	0800575d 	.word	0x0800575d
 80056f8:	08005793 	.word	0x08005793
 80056fc:	08005793 	.word	0x08005793
 8005700:	08005793 	.word	0x08005793
 8005704:	0800577b 	.word	0x0800577b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005708:	f7fe fa54 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 800570c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	085a      	lsrs	r2, r3, #1
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	441a      	add	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005720:	b29b      	uxth	r3, r3
 8005722:	61bb      	str	r3, [r7, #24]
        break;
 8005724:	e038      	b.n	8005798 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005726:	f7fe fa59 	bl	8003bdc <HAL_RCC_GetPCLK2Freq>
 800572a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	085a      	lsrs	r2, r3, #1
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	441a      	add	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	fbb2 f3f3 	udiv	r3, r2, r3
 800573e:	b29b      	uxth	r3, r3
 8005740:	61bb      	str	r3, [r7, #24]
        break;
 8005742:	e029      	b.n	8005798 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	085a      	lsrs	r2, r3, #1
 800574a:	4b21      	ldr	r3, [pc, #132]	; (80057d0 <UART_SetConfig+0x550>)
 800574c:	4413      	add	r3, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6852      	ldr	r2, [r2, #4]
 8005752:	fbb3 f3f2 	udiv	r3, r3, r2
 8005756:	b29b      	uxth	r3, r3
 8005758:	61bb      	str	r3, [r7, #24]
        break;
 800575a:	e01d      	b.n	8005798 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800575c:	f7fe f946 	bl	80039ec <HAL_RCC_GetSysClockFreq>
 8005760:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	085a      	lsrs	r2, r3, #1
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	441a      	add	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	fbb2 f3f3 	udiv	r3, r2, r3
 8005774:	b29b      	uxth	r3, r3
 8005776:	61bb      	str	r3, [r7, #24]
        break;
 8005778:	e00e      	b.n	8005798 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	085b      	lsrs	r3, r3, #1
 8005780:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	fbb2 f3f3 	udiv	r3, r2, r3
 800578c:	b29b      	uxth	r3, r3
 800578e:	61bb      	str	r3, [r7, #24]
        break;
 8005790:	e002      	b.n	8005798 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	75fb      	strb	r3, [r7, #23]
        break;
 8005796:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	2b0f      	cmp	r3, #15
 800579c:	d908      	bls.n	80057b0 <UART_SetConfig+0x530>
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a4:	d204      	bcs.n	80057b0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	60da      	str	r2, [r3, #12]
 80057ae:	e001      	b.n	80057b4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3720      	adds	r7, #32
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	01e84800 	.word	0x01e84800
 80057d0:	00f42400 	.word	0x00f42400

080057d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00a      	beq.n	80057fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	f003 0310 	and.w	r3, r3, #16
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00a      	beq.n	8005886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00a      	beq.n	80058a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d01a      	beq.n	80058ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058d2:	d10a      	bne.n	80058ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	605a      	str	r2, [r3, #4]
  }
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af02      	add	r7, sp, #8
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005926:	f7fb f9f7 	bl	8000d18 <HAL_GetTick>
 800592a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b08      	cmp	r3, #8
 8005938:	d10e      	bne.n	8005958 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800593a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f82a 	bl	80059a2 <UART_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e020      	b.n	800599a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b04      	cmp	r3, #4
 8005964:	d10e      	bne.n	8005984 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005966:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f814 	bl	80059a2 <UART_WaitOnFlagUntilTimeout>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e00a      	b.n	800599a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2220      	movs	r2, #32
 800598e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	60f8      	str	r0, [r7, #12]
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	603b      	str	r3, [r7, #0]
 80059ae:	4613      	mov	r3, r2
 80059b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b2:	e05d      	b.n	8005a70 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ba:	d059      	beq.n	8005a70 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059bc:	f7fb f9ac 	bl	8000d18 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d302      	bcc.n	80059d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d11b      	bne.n	8005a0a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0201 	bic.w	r2, r2, #1
 80059f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2220      	movs	r2, #32
 80059f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2220      	movs	r2, #32
 80059fc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e042      	b.n	8005a90 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d02b      	beq.n	8005a70 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a26:	d123      	bne.n	8005a70 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a30:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a40:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0201 	bic.w	r2, r2, #1
 8005a50:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2220      	movs	r2, #32
 8005a56:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2220      	movs	r2, #32
 8005a62:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e00f      	b.n	8005a90 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69da      	ldr	r2, [r3, #28]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	bf0c      	ite	eq
 8005a80:	2301      	moveq	r3, #1
 8005a82:	2300      	movne	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d092      	beq.n	80059b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005aae:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ad8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0201 	bic.w	r2, r2, #1
 8005ae8:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b18:	d014      	beq.n	8005b44 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b30:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b40:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b42:	e002      	b.n	8005b4a <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f7ff fb5f 	bl	8005208 <HAL_UART_TxCpltCallback>
}
 8005b4a:	bf00      	nop
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b084      	sub	sp, #16
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f7ff fb5b 	bl	800521c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b66:	bf00      	nop
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b84:	d01e      	beq.n	8005bc4 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b9c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0201 	bic.w	r2, r2, #1
 8005bac:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bbc:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f7ff fb33 	bl	8005230 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bca:	bf00      	nop
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bde:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f7ff fb2f 	bl	8005244 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005be6:	bf00      	nop
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b086      	sub	sp, #24
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c00:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c12:	2b80      	cmp	r3, #128	; 0x80
 8005c14:	d109      	bne.n	8005c2a <UART_DMAError+0x3c>
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2b21      	cmp	r3, #33	; 0x21
 8005c1a:	d106      	bne.n	8005c2a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005c24:	6978      	ldr	r0, [r7, #20]
 8005c26:	f7ff ff37 	bl	8005a98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c34:	2b40      	cmp	r3, #64	; 0x40
 8005c36:	d109      	bne.n	8005c4c <UART_DMAError+0x5e>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b22      	cmp	r3, #34	; 0x22
 8005c3c:	d106      	bne.n	8005c4c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005c46:	6978      	ldr	r0, [r7, #20]
 8005c48:	f7ff ff3b 	bl	8005ac2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c50:	f043 0210 	orr.w	r2, r3, #16
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c58:	6978      	ldr	r0, [r7, #20]
 8005c5a:	f7ff fafd 	bl	8005258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c5e:	bf00      	nop
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f7ff fae7 	bl	8005258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c8a:	bf00      	nop
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2220      	movs	r2, #32
 8005cae:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7ff faa6 	bl	8005208 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cbc:	bf00      	nop
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <control_motors>:
 * y el status (variables del main), y se va a encargar de controlar
 * los motores y actualizar la misma */
 extern UART_HandleTypeDef huart3;

void control_motors(int throttle,int direction,int brake)
{
 8005cc4:	b590      	push	{r4, r7, lr}
 8005cc6:	b08b      	sub	sp, #44	; 0x2c
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
	/*control_nodos es una variable se encarga de enviar la controlword a cada nodo, el contador va a controlar la data a pedir de los nodos*/
	static uint8_t nodo=MOTOR1,control_nodos[2];
	uint32_t Id;
	uint8_t buffer_analisis[8],i=0,bytes;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//	ANALIZO MENSAJE CAN-- SI HAY
	//Armo un buffer de lectura para que no se mezclen los mensajes si llega uno neuvo, luego bajo el flag y analizo el mensaje
	if(FLAG_CAN==PENDING)
 8005cd6:	4b7c      	ldr	r3, [pc, #496]	; (8005ec8 <control_motors+0x204>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d12a      	bne.n	8005d34 <control_motors+0x70>
	{
	FLAG_CAN=READING;
 8005cde:	4b7a      	ldr	r3, [pc, #488]	; (8005ec8 <control_motors+0x204>)
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	701a      	strb	r2, [r3, #0]
	Id=pRxHeader.StdId;
 8005ce4:	4b79      	ldr	r3, [pc, #484]	; (8005ecc <control_motors+0x208>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	623b      	str	r3, [r7, #32]
	bytes=pRxHeader.DLC;
 8005cea:	4b78      	ldr	r3, [pc, #480]	; (8005ecc <control_motors+0x208>)
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	77fb      	strb	r3, [r7, #31]
	for(i=1;i<8;i++)
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005cf6:	e00f      	b.n	8005d18 <control_motors+0x54>
	{
		buffer_analisis[i]=buffer_Rx_msg[i];
 8005cf8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d00:	4973      	ldr	r1, [pc, #460]	; (8005ed0 <control_motors+0x20c>)
 8005d02:	5c8a      	ldrb	r2, [r1, r2]
 8005d04:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005d08:	440b      	add	r3, r1
 8005d0a:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i=1;i<8;i++)
 8005d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d12:	3301      	adds	r3, #1
 8005d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d1c:	2b07      	cmp	r3, #7
 8005d1e:	d9eb      	bls.n	8005cf8 <control_motors+0x34>
	}

	FLAG_CAN=READY;								//bajo el flag
 8005d20:	4b69      	ldr	r3, [pc, #420]	; (8005ec8 <control_motors+0x204>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]
	analize_CAN_Rx(Id,bytes,buffer_analisis);
 8005d26:	f107 0214 	add.w	r2, r7, #20
 8005d2a:	7ffb      	ldrb	r3, [r7, #31]
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6a38      	ldr	r0, [r7, #32]
 8005d30:	f7fa fd6a 	bl	8000808 <analize_CAN_Rx>
	}

	if(FLAG_USART==49)					// SI TENGO PEDIDO DE ENVIO UART LO REALIZO
 8005d34:	4b67      	ldr	r3, [pc, #412]	; (8005ed4 <control_motors+0x210>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b31      	cmp	r3, #49	; 0x31
 8005d3a:	d104      	bne.n	8005d46 <control_motors+0x82>
	{
		preparo_y_envio_data_uart(); 	//primero acomodo y elijo la info a enviar
 8005d3c:	f000 fc1a 	bl	8006574 <preparo_y_envio_data_uart>
		FLAG_USART=0;
 8005d40:	4b64      	ldr	r3, [pc, #400]	; (8005ed4 <control_motors+0x210>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	701a      	strb	r2, [r3, #0]
	}

	// tiempos
	/* debo seleccionar alternadamente el motor a controlar, arranco la variable en 155 para
	 * saber que es la primera vez que la inicio y despues la alterno entre los nodos*/
	switch (status[nodo-1])
 8005d46:	4b64      	ldr	r3, [pc, #400]	; (8005ed8 <control_motors+0x214>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	4a63      	ldr	r2, [pc, #396]	; (8005edc <control_motors+0x218>)
 8005d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d52:	2b05      	cmp	r3, #5
 8005d54:	f200 80a4 	bhi.w	8005ea0 <control_motors+0x1dc>
 8005d58:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <control_motors+0x9c>)
 8005d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5e:	bf00      	nop
 8005d60:	08005d79 	.word	0x08005d79
 8005d64:	08005ea1 	.word	0x08005ea1
 8005d68:	08005d93 	.word	0x08005d93
 8005d6c:	08005dc1 	.word	0x08005dc1
 8005d70:	08005df7 	.word	0x08005df7
 8005d74:	08005e63 	.word	0x08005e63
	{
		case(INITIALIZATION):		// configuro ambos nodos y arranco mi base de tiempo.
			control_nodos[0]=NOTSEND;
 8005d78:	4b59      	ldr	r3, [pc, #356]	; (8005ee0 <control_motors+0x21c>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	701a      	strb	r2, [r3, #0]
			control_nodos[1]=NOTSEND;
 8005d7e:	4b58      	ldr	r3, [pc, #352]	; (8005ee0 <control_motors+0x21c>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	705a      	strb	r2, [r3, #1]
			status[0]=WFBOOTUP;
 8005d84:	4b55      	ldr	r3, [pc, #340]	; (8005edc <control_motors+0x218>)
 8005d86:	2201      	movs	r2, #1
 8005d88:	801a      	strh	r2, [r3, #0]
			status[1]=WFBOOTUP;
 8005d8a:	4b54      	ldr	r3, [pc, #336]	; (8005edc <control_motors+0x218>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	805a      	strh	r2, [r3, #2]
			break;
 8005d90:	e086      	b.n	8005ea0 <control_motors+0x1dc>
		case(WFBOOTUP):
				//ESTOY ESPERANDO QUE LOS NODOS ESTEN READY
				break;

		case(GOTOPREOPERATIONAL):
				if (status[0]==GOTOPREOPERATIONAL && status[1]==GOTOPREOPERATIONAL)		// Si estan ambos iniciados
 8005d92:	4b52      	ldr	r3, [pc, #328]	; (8005edc <control_motors+0x218>)
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d17d      	bne.n	8005e96 <control_motors+0x1d2>
 8005d9a:	4b50      	ldr	r3, [pc, #320]	; (8005edc <control_motors+0x218>)
 8005d9c:	885b      	ldrh	r3, [r3, #2]
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d179      	bne.n	8005e96 <control_motors+0x1d2>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);		// prendo led verde
 8005da2:	2201      	movs	r2, #1
 8005da4:	2101      	movs	r1, #1
 8005da6:	484f      	ldr	r0, [pc, #316]	; (8005ee4 <control_motors+0x220>)
 8005da8:	f7fd fa52 	bl	8003250 <HAL_GPIO_WritePin>
					send_NMT(PREOPERATIONAL);
 8005dac:	2003      	movs	r0, #3
 8005dae:	f7fa fefd 	bl	8000bac <send_NMT>
					status[0]=PREOPERATIONAL;
 8005db2:	4b4a      	ldr	r3, [pc, #296]	; (8005edc <control_motors+0x218>)
 8005db4:	2203      	movs	r2, #3
 8005db6:	801a      	strh	r2, [r3, #0]
					status[1]=PREOPERATIONAL;
 8005db8:	4b48      	ldr	r3, [pc, #288]	; (8005edc <control_motors+0x218>)
 8005dba:	2203      	movs	r2, #3
 8005dbc:	805a      	strh	r2, [r3, #2]
				}
				break;
 8005dbe:	e06a      	b.n	8005e96 <control_motors+0x1d2>
		case(PREOPERATIONAL):

					if(FLAG_OP==1)
 8005dc0:	4b49      	ldr	r3, [pc, #292]	; (8005ee8 <control_motors+0x224>)
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d168      	bne.n	8005e9a <control_motors+0x1d6>
					{
						if(send_NMT(START)!=HAL_OK)
 8005dc8:	2001      	movs	r0, #1
 8005dca:	f7fa feef 	bl	8000bac <send_NMT>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <control_motors+0x116>
						{
							Error_Handler();
 8005dd4:	f000 fbc2 	bl	800655c <Error_Handler>
							return;
 8005dd8:	e073      	b.n	8005ec2 <control_motors+0x1fe>
						}

						HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);				// enciendo luz azul en caso operacional
 8005dda:	2180      	movs	r1, #128	; 0x80
 8005ddc:	4841      	ldr	r0, [pc, #260]	; (8005ee4 <control_motors+0x220>)
 8005dde:	f7fd fa50 	bl	8003282 <HAL_GPIO_TogglePin>
						status[0]=OPERATIONAL;
 8005de2:	4b3e      	ldr	r3, [pc, #248]	; (8005edc <control_motors+0x218>)
 8005de4:	2204      	movs	r2, #4
 8005de6:	801a      	strh	r2, [r3, #0]
						status[1]=OPERATIONAL;
 8005de8:	4b3c      	ldr	r3, [pc, #240]	; (8005edc <control_motors+0x218>)
 8005dea:	2204      	movs	r2, #4
 8005dec:	805a      	strh	r2, [r3, #2]
						FLAG_OP=0;											// UNA VEZ ENVIADO EL MSJ NMT BAJO EL FLAG
 8005dee:	4b3e      	ldr	r3, [pc, #248]	; (8005ee8 <control_motors+0x224>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	701a      	strb	r2, [r3, #0]
					}


			break;
 8005df4:	e051      	b.n	8005e9a <control_motors+0x1d6>
	/*Caso OPERATIONAL y Ctrl WORD enviada:*/
		case(OPERATIONAL):
					if(control_nodos[nodo-1]==NOTSEND)
 8005df6:	4b38      	ldr	r3, [pc, #224]	; (8005ed8 <control_motors+0x214>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	4a38      	ldr	r2, [pc, #224]	; (8005ee0 <control_motors+0x21c>)
 8005dfe:	5cd3      	ldrb	r3, [r2, r3]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d112      	bne.n	8005e2a <control_motors+0x166>
					{
						control_nodos[nodo-1]=change_state(nodo,OPERATIONAL,status[nodo-1] );
 8005e04:	4b34      	ldr	r3, [pc, #208]	; (8005ed8 <control_motors+0x214>)
 8005e06:	7818      	ldrb	r0, [r3, #0]
 8005e08:	4b33      	ldr	r3, [pc, #204]	; (8005ed8 <control_motors+0x214>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	4a33      	ldr	r2, [pc, #204]	; (8005edc <control_motors+0x218>)
 8005e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	4b30      	ldr	r3, [pc, #192]	; (8005ed8 <control_motors+0x214>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	1e5c      	subs	r4, r3, #1
 8005e1c:	2104      	movs	r1, #4
 8005e1e:	f7fa feec 	bl	8000bfa <change_state>
 8005e22:	4603      	mov	r3, r0
 8005e24:	461a      	mov	r2, r3
 8005e26:	4b2e      	ldr	r3, [pc, #184]	; (8005ee0 <control_motors+0x21c>)
 8005e28:	551a      	strb	r2, [r3, r4]
					}

				if(run_motor_n(ADC_val[0],ADC_val[1])!=HAL_OK)
 8005e2a:	4b30      	ldr	r3, [pc, #192]	; (8005eec <control_motors+0x228>)
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	4b2f      	ldr	r3, [pc, #188]	; (8005eec <control_motors+0x228>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	4619      	mov	r1, r3
 8005e34:	4610      	mov	r0, r2
 8005e36:	f7fa fbf7 	bl	8000628 <run_motor_n>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d002      	beq.n	8005e46 <control_motors+0x182>
					{
						Error_Handler();
 8005e40:	f000 fb8c 	bl	800655c <Error_Handler>
						return;
 8005e44:	e03d      	b.n	8005ec2 <control_motors+0x1fe>
					}

					if(FLAG_OP==1)
 8005e46:	4b28      	ldr	r3, [pc, #160]	; (8005ee8 <control_motors+0x224>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d127      	bne.n	8005e9e <control_motors+0x1da>
					{
						status[0]=STOPPED;
 8005e4e:	4b23      	ldr	r3, [pc, #140]	; (8005edc <control_motors+0x218>)
 8005e50:	2205      	movs	r2, #5
 8005e52:	801a      	strh	r2, [r3, #0]
						status[1]=STOPPED;
 8005e54:	4b21      	ldr	r3, [pc, #132]	; (8005edc <control_motors+0x218>)
 8005e56:	2205      	movs	r2, #5
 8005e58:	805a      	strh	r2, [r3, #2]
						FLAG_OP=0;
 8005e5a:	4b23      	ldr	r3, [pc, #140]	; (8005ee8 <control_motors+0x224>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	701a      	strb	r2, [r3, #0]
					}
					break;
 8005e60:	e01d      	b.n	8005e9e <control_motors+0x1da>

		case(STOPPED):
				control_nodos[0]=NOTSEND;
 8005e62:	4b1f      	ldr	r3, [pc, #124]	; (8005ee0 <control_motors+0x21c>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	701a      	strb	r2, [r3, #0]
				control_nodos[1]=NOTSEND;
 8005e68:	4b1d      	ldr	r3, [pc, #116]	; (8005ee0 <control_motors+0x21c>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	705a      	strb	r2, [r3, #1]
				status[0]=PREOPERATIONAL;
 8005e6e:	4b1b      	ldr	r3, [pc, #108]	; (8005edc <control_motors+0x218>)
 8005e70:	2203      	movs	r2, #3
 8005e72:	801a      	strh	r2, [r3, #0]
				status[1]=PREOPERATIONAL;
 8005e74:	4b19      	ldr	r3, [pc, #100]	; (8005edc <control_motors+0x218>)
 8005e76:	2203      	movs	r2, #3
 8005e78:	805a      	strh	r2, [r3, #2]
				if(send_NMT(RESTART)!=HAL_OK)
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	f7fa fe96 	bl	8000bac <send_NMT>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <control_motors+0x1c8>
				{
					Error_Handler();
 8005e86:	f000 fb69 	bl	800655c <Error_Handler>
					return;
 8005e8a:	e01a      	b.n	8005ec2 <control_motors+0x1fe>
				}
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8005e8c:	2180      	movs	r1, #128	; 0x80
 8005e8e:	4815      	ldr	r0, [pc, #84]	; (8005ee4 <control_motors+0x220>)
 8005e90:	f7fd f9f7 	bl	8003282 <HAL_GPIO_TogglePin>
				break;
 8005e94:	e004      	b.n	8005ea0 <control_motors+0x1dc>
				break;
 8005e96:	bf00      	nop
 8005e98:	e002      	b.n	8005ea0 <control_motors+0x1dc>
			break;
 8005e9a:	bf00      	nop
 8005e9c:	e000      	b.n	8005ea0 <control_motors+0x1dc>
					break;
 8005e9e:	bf00      	nop
	}
	/* Alterno los nodos entre el motor 1 y 2 a manejar
	 */
	if(nodo==MOTOR1)
 8005ea0:	4b0d      	ldr	r3, [pc, #52]	; (8005ed8 <control_motors+0x214>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d103      	bne.n	8005eb0 <control_motors+0x1ec>
	{
		nodo=MOTOR2;
 8005ea8:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <control_motors+0x214>)
 8005eaa:	2202      	movs	r2, #2
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	e006      	b.n	8005ebe <control_motors+0x1fa>
	}
	else if (nodo==MOTOR2)
 8005eb0:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <control_motors+0x214>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d102      	bne.n	8005ebe <control_motors+0x1fa>
	{
		nodo=MOTOR1;
 8005eb8:	4b07      	ldr	r3, [pc, #28]	; (8005ed8 <control_motors+0x214>)
 8005eba:	2201      	movs	r2, #1
 8005ebc:	701a      	strb	r2, [r3, #0]
	}

	//PIDO INFO (CONSTANTEMENTE)
	ask_for_info();
 8005ebe:	f7fa fdb7 	bl	8000a30 <ask_for_info>

 }
 8005ec2:	372c      	adds	r7, #44	; 0x2c
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd90      	pop	{r4, r7, pc}
 8005ec8:	200001e0 	.word	0x200001e0
 8005ecc:	20000308 	.word	0x20000308
 8005ed0:	200002ac 	.word	0x200002ac
 8005ed4:	20000350 	.word	0x20000350
 8005ed8:	2000000d 	.word	0x2000000d
 8005edc:	20000358 	.word	0x20000358
 8005ee0:	20000040 	.word	0x20000040
 8005ee4:	40020400 	.word	0x40020400
 8005ee8:	2000008c 	.word	0x2000008c
 8005eec:	200002bc 	.word	0x200002bc

08005ef0 <mysystem_start>:
extern uint8_t MotorTemp[2],ControllerTemp[2];
extern short int Phase_A_Crr[2],Phase_B_Crr[2],DcLink[2],Torque[2],Warnings[2];
CAN_FilterTypeDef sFilterConfig;

void mysystem_start(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
	/*Inicio configuracion CAN*/

	  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8005ef4:	2102      	movs	r1, #2
 8005ef6:	483d      	ldr	r0, [pc, #244]	; (8005fec <mysystem_start+0xfc>)
 8005ef8:	f7fc f8e5 	bl	80020c6 <HAL_CAN_ActivateNotification>
	  HAL_CAN_Start(&hcan1);
 8005efc:	483b      	ldr	r0, [pc, #236]	; (8005fec <mysystem_start+0xfc>)
 8005efe:	f7fb fe8d 	bl	8001c1c <HAL_CAN_Start>

		/*Inicio configuracion Filtro can*/
	 sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8005f02:	4b3b      	ldr	r3, [pc, #236]	; (8005ff0 <mysystem_start+0x100>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	611a      	str	r2, [r3, #16]
	 sFilterConfig.FilterIdHigh=0x245<<5;
 8005f08:	4b39      	ldr	r3, [pc, #228]	; (8005ff0 <mysystem_start+0x100>)
 8005f0a:	f644 02a0 	movw	r2, #18592	; 0x48a0
 8005f0e:	601a      	str	r2, [r3, #0]
	 sFilterConfig.FilterIdLow=0;
 8005f10:	4b37      	ldr	r3, [pc, #220]	; (8005ff0 <mysystem_start+0x100>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	605a      	str	r2, [r3, #4]
	 sFilterConfig.FilterMaskIdHigh=0;
 8005f16:	4b36      	ldr	r3, [pc, #216]	; (8005ff0 <mysystem_start+0x100>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	609a      	str	r2, [r3, #8]
	 sFilterConfig.FilterMaskIdLow=0;
 8005f1c:	4b34      	ldr	r3, [pc, #208]	; (8005ff0 <mysystem_start+0x100>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	60da      	str	r2, [r3, #12]
	 sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8005f22:	4b33      	ldr	r3, [pc, #204]	; (8005ff0 <mysystem_start+0x100>)
 8005f24:	2201      	movs	r2, #1
 8005f26:	61da      	str	r2, [r3, #28]
	 sFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 8005f28:	4b31      	ldr	r3, [pc, #196]	; (8005ff0 <mysystem_start+0x100>)
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	621a      	str	r2, [r3, #32]

	 HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8005f2e:	4930      	ldr	r1, [pc, #192]	; (8005ff0 <mysystem_start+0x100>)
 8005f30:	482e      	ldr	r0, [pc, #184]	; (8005fec <mysystem_start+0xfc>)
 8005f32:	f7fb fd87 	bl	8001a44 <HAL_CAN_ConfigFilter>

	 /*Inicio ADC con DMA */
	  HAL_ADC_Start_DMA(&hadc1,ADC_val, ENTRADAS_ADC);
 8005f36:	2202      	movs	r2, #2
 8005f38:	492e      	ldr	r1, [pc, #184]	; (8005ff4 <mysystem_start+0x104>)
 8005f3a:	482f      	ldr	r0, [pc, #188]	; (8005ff8 <mysystem_start+0x108>)
 8005f3c:	f7fb f8a0 	bl	8001080 <HAL_ADC_Start_DMA>

	  /*TIMER 2 PARA FUNCIONES.
	   * (Creo que no lo uso al final se puede eliminar
	   * */
	  HAL_TIM_Base_Start_IT(&htim2);
 8005f40:	482e      	ldr	r0, [pc, #184]	; (8005ffc <mysystem_start+0x10c>)
 8005f42:	f7fe fab1 	bl	80044a8 <HAL_TIM_Base_Start_IT>

	  FLAG_USART=0;
 8005f46:	4b2e      	ldr	r3, [pc, #184]	; (8006000 <mysystem_start+0x110>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	701a      	strb	r2, [r3, #0]
	  /*Inicio USART3*/
	  HAL_UART_Receive_DMA(&huart3,&FLAG_USART,1);
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	492c      	ldr	r1, [pc, #176]	; (8006000 <mysystem_start+0x110>)
 8005f50:	482c      	ldr	r0, [pc, #176]	; (8006004 <mysystem_start+0x114>)
 8005f52:	f7fe ff8f 	bl	8004e74 <HAL_UART_Receive_DMA>


		/*Inicio mis variables y FLAGS*/
	  status[0]= INITIALIZATION;
 8005f56:	4b2c      	ldr	r3, [pc, #176]	; (8006008 <mysystem_start+0x118>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	801a      	strh	r2, [r3, #0]
	  status[1]= INITIALIZATION;
 8005f5c:	4b2a      	ldr	r3, [pc, #168]	; (8006008 <mysystem_start+0x118>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	805a      	strh	r2, [r3, #2]
	  FLAG_OP=0;
 8005f62:	4b2a      	ldr	r3, [pc, #168]	; (800600c <mysystem_start+0x11c>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	701a      	strb	r2, [r3, #0]
	  FLAG_CAN=0;
 8005f68:	4b29      	ldr	r3, [pc, #164]	; (8006010 <mysystem_start+0x120>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	701a      	strb	r2, [r3, #0]


	  /// esto es para prueba con software, se tiene que borrar
	  velocity[0]=0xffff;
 8005f6e:	4b29      	ldr	r3, [pc, #164]	; (8006014 <mysystem_start+0x124>)
 8005f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f74:	601a      	str	r2, [r3, #0]
	  velocity[1]=0xffff;
 8005f76:	4b27      	ldr	r3, [pc, #156]	; (8006014 <mysystem_start+0x124>)
 8005f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f7c:	605a      	str	r2, [r3, #4]
	  DcLink[0]=0xffff;
 8005f7e:	4b26      	ldr	r3, [pc, #152]	; (8006018 <mysystem_start+0x128>)
 8005f80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f84:	801a      	strh	r2, [r3, #0]
	  DcLink[1]=0xffff;
 8005f86:	4b24      	ldr	r3, [pc, #144]	; (8006018 <mysystem_start+0x128>)
 8005f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f8c:	805a      	strh	r2, [r3, #2]
	  DcCurrent[0]=0xffff;
 8005f8e:	4b23      	ldr	r3, [pc, #140]	; (800601c <mysystem_start+0x12c>)
 8005f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f94:	601a      	str	r2, [r3, #0]
	  DcCurrent[1]=0xffff;
 8005f96:	4b21      	ldr	r3, [pc, #132]	; (800601c <mysystem_start+0x12c>)
 8005f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f9c:	605a      	str	r2, [r3, #4]
	  MotorTemp[0]=0xff;
 8005f9e:	4b20      	ldr	r3, [pc, #128]	; (8006020 <mysystem_start+0x130>)
 8005fa0:	22ff      	movs	r2, #255	; 0xff
 8005fa2:	701a      	strb	r2, [r3, #0]
	  MotorTemp[1]=0xff;
 8005fa4:	4b1e      	ldr	r3, [pc, #120]	; (8006020 <mysystem_start+0x130>)
 8005fa6:	22ff      	movs	r2, #255	; 0xff
 8005fa8:	705a      	strb	r2, [r3, #1]
	  MotorCrr[0]=0xffff;
 8005faa:	4b1e      	ldr	r3, [pc, #120]	; (8006024 <mysystem_start+0x134>)
 8005fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fb0:	601a      	str	r2, [r3, #0]
	  MotorCrr[1]=0xffff;
 8005fb2:	4b1c      	ldr	r3, [pc, #112]	; (8006024 <mysystem_start+0x134>)
 8005fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fb8:	605a      	str	r2, [r3, #4]
	  Torque[0]=0xffff;
 8005fba:	4b1b      	ldr	r3, [pc, #108]	; (8006028 <mysystem_start+0x138>)
 8005fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fc0:	801a      	strh	r2, [r3, #0]
	  Torque[1]=0xffff;
 8005fc2:	4b19      	ldr	r3, [pc, #100]	; (8006028 <mysystem_start+0x138>)
 8005fc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fc8:	805a      	strh	r2, [r3, #2]
	  VelocityAVG[0]=0xffff;
 8005fca:	4b18      	ldr	r3, [pc, #96]	; (800602c <mysystem_start+0x13c>)
 8005fcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fd0:	601a      	str	r2, [r3, #0]
	  VelocityAVG[1]=0xffff;
 8005fd2:	4b16      	ldr	r3, [pc, #88]	; (800602c <mysystem_start+0x13c>)
 8005fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fd8:	605a      	str	r2, [r3, #4]
	  ControllerTemp[0]=0xff;
 8005fda:	4b15      	ldr	r3, [pc, #84]	; (8006030 <mysystem_start+0x140>)
 8005fdc:	22ff      	movs	r2, #255	; 0xff
 8005fde:	701a      	strb	r2, [r3, #0]
	  ControllerTemp[1]=0xff;
 8005fe0:	4b13      	ldr	r3, [pc, #76]	; (8006030 <mysystem_start+0x140>)
 8005fe2:	22ff      	movs	r2, #255	; 0xff
 8005fe4:	705a      	strb	r2, [r3, #1]

}
 8005fe6:	bf00      	nop
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	20000328 	.word	0x20000328
 8005ff0:	20000060 	.word	0x20000060
 8005ff4:	200002bc 	.word	0x200002bc
 8005ff8:	200001ec 	.word	0x200001ec
 8005ffc:	200002c8 	.word	0x200002c8
 8006000:	20000350 	.word	0x20000350
 8006004:	200000f0 	.word	0x200000f0
 8006008:	20000358 	.word	0x20000358
 800600c:	2000008c 	.word	0x2000008c
 8006010:	200001e0 	.word	0x200001e0
 8006014:	200002a0 	.word	0x200002a0
 8006018:	20000174 	.word	0x20000174
 800601c:	200002b4 	.word	0x200002b4
 8006020:	20000364 	.word	0x20000364
 8006024:	20000238 	.word	0x20000238
 8006028:	20000170 	.word	0x20000170
 800602c:	2000035c 	.word	0x2000035c
 8006030:	200001e8 	.word	0x200001e8

08006034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006038:	f7fa fe1c 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800603c:	f000 f82e 	bl	800609c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006040:	f000 fa04 	bl	800644c <MX_GPIO_Init>
  MX_DMA_Init();
 8006044:	f000 f9c8 	bl	80063d8 <MX_DMA_Init>
  MX_CAN1_Init();
 8006048:	f000 f912 	bl	8006270 <MX_CAN1_Init>
  MX_ADC1_Init();
 800604c:	f000 f8b0 	bl	80061b0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8006050:	f000 f944 	bl	80062dc <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8006054:	f000 f990 	bl	8006378 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  mysystem_start();
 8006058:	f7ff ff4a 	bl	8005ef0 <mysystem_start>
  /* USER CODE BEGIN WHILE */
  while (1)
      {
	  /*en un principio el acelerador y freno iban a venir de una lectura de ADC
	   * o variable externa, se setean y entran a la funcion control motores*/
	  direction=ADC_val[1];
 800605c:	4b0b      	ldr	r3, [pc, #44]	; (800608c <main+0x58>)
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	461a      	mov	r2, r3
 8006062:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <main+0x5c>)
 8006064:	601a      	str	r2, [r3, #0]
	  throttle=ADC_val[0];
 8006066:	4b09      	ldr	r3, [pc, #36]	; (800608c <main+0x58>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	4b09      	ldr	r3, [pc, #36]	; (8006094 <main+0x60>)
 800606e:	601a      	str	r2, [r3, #0]
	  brake=0;
 8006070:	4b09      	ldr	r3, [pc, #36]	; (8006098 <main+0x64>)
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]

	  control_motors(throttle,direction,brake);
 8006076:	4b07      	ldr	r3, [pc, #28]	; (8006094 <main+0x60>)
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	4b05      	ldr	r3, [pc, #20]	; (8006090 <main+0x5c>)
 800607c:	6819      	ldr	r1, [r3, #0]
 800607e:	4b06      	ldr	r3, [pc, #24]	; (8006098 <main+0x64>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	461a      	mov	r2, r3
 8006084:	f7ff fe1e 	bl	8005cc4 <control_motors>
	  direction=ADC_val[1];
 8006088:	e7e8      	b.n	800605c <main+0x28>
 800608a:	bf00      	nop
 800608c:	200002bc 	.word	0x200002bc
 8006090:	200001e4 	.word	0x200001e4
 8006094:	200001d8 	.word	0x200001d8
 8006098:	20000354 	.word	0x20000354

0800609c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b0b8      	sub	sp, #224	; 0xe0
 80060a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80060a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80060a6:	2234      	movs	r2, #52	; 0x34
 80060a8:	2100      	movs	r1, #0
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 fdbc 	bl	8006c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80060b0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	605a      	str	r2, [r3, #4]
 80060ba:	609a      	str	r2, [r3, #8]
 80060bc:	60da      	str	r2, [r3, #12]
 80060be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80060c0:	f107 0308 	add.w	r3, r7, #8
 80060c4:	2290      	movs	r2, #144	; 0x90
 80060c6:	2100      	movs	r1, #0
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 fdad 	bl	8006c28 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80060ce:	4b36      	ldr	r3, [pc, #216]	; (80061a8 <SystemClock_Config+0x10c>)
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	4a35      	ldr	r2, [pc, #212]	; (80061a8 <SystemClock_Config+0x10c>)
 80060d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d8:	6413      	str	r3, [r2, #64]	; 0x40
 80060da:	4b33      	ldr	r3, [pc, #204]	; (80061a8 <SystemClock_Config+0x10c>)
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e2:	607b      	str	r3, [r7, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80060e6:	4b31      	ldr	r3, [pc, #196]	; (80061ac <SystemClock_Config+0x110>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80060ee:	4a2f      	ldr	r2, [pc, #188]	; (80061ac <SystemClock_Config+0x110>)
 80060f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	4b2d      	ldr	r3, [pc, #180]	; (80061ac <SystemClock_Config+0x110>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006102:	2301      	movs	r3, #1
 8006104:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006108:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800610c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006110:	2302      	movs	r3, #2
 8006112:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006116:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800611a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800611e:	2304      	movs	r3, #4
 8006120:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8006124:	2360      	movs	r3, #96	; 0x60
 8006126:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800612a:	2302      	movs	r3, #2
 800612c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006130:	2304      	movs	r3, #4
 8006132:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006136:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800613a:	4618      	mov	r0, r3
 800613c:	f7fd f8bc 	bl	80032b8 <HAL_RCC_OscConfig>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8006146:	f000 fa09 	bl	800655c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800614a:	230f      	movs	r3, #15
 800614c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006150:	2302      	movs	r3, #2
 8006152:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006156:	2300      	movs	r3, #0
 8006158:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800615c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006160:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8006164:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006168:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800616c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006170:	2103      	movs	r1, #3
 8006172:	4618      	mov	r0, r3
 8006174:	f7fd fb4e 	bl	8003814 <HAL_RCC_ClockConfig>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800617e:	f000 f9ed 	bl	800655c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006186:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006188:	2300      	movs	r3, #0
 800618a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800618c:	f107 0308 	add.w	r3, r7, #8
 8006190:	4618      	mov	r0, r3
 8006192:	f7fd fd37 	bl	8003c04 <HAL_RCCEx_PeriphCLKConfig>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <SystemClock_Config+0x104>
  {
    Error_Handler();
 800619c:	f000 f9de 	bl	800655c <Error_Handler>
  }
}
 80061a0:	bf00      	nop
 80061a2:	37e0      	adds	r7, #224	; 0xe0
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40023800 	.word	0x40023800
 80061ac:	40007000 	.word	0x40007000

080061b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80061b6:	463b      	mov	r3, r7
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	605a      	str	r2, [r3, #4]
 80061be:	609a      	str	r2, [r3, #8]
 80061c0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80061c2:	4b28      	ldr	r3, [pc, #160]	; (8006264 <MX_ADC1_Init+0xb4>)
 80061c4:	4a28      	ldr	r2, [pc, #160]	; (8006268 <MX_ADC1_Init+0xb8>)
 80061c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80061c8:	4b26      	ldr	r3, [pc, #152]	; (8006264 <MX_ADC1_Init+0xb4>)
 80061ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80061ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80061d0:	4b24      	ldr	r3, [pc, #144]	; (8006264 <MX_ADC1_Init+0xb4>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80061d6:	4b23      	ldr	r3, [pc, #140]	; (8006264 <MX_ADC1_Init+0xb4>)
 80061d8:	2201      	movs	r2, #1
 80061da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80061dc:	4b21      	ldr	r3, [pc, #132]	; (8006264 <MX_ADC1_Init+0xb4>)
 80061de:	2201      	movs	r2, #1
 80061e0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80061e2:	4b20      	ldr	r3, [pc, #128]	; (8006264 <MX_ADC1_Init+0xb4>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80061ea:	4b1e      	ldr	r3, [pc, #120]	; (8006264 <MX_ADC1_Init+0xb4>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80061f0:	4b1c      	ldr	r3, [pc, #112]	; (8006264 <MX_ADC1_Init+0xb4>)
 80061f2:	4a1e      	ldr	r2, [pc, #120]	; (800626c <MX_ADC1_Init+0xbc>)
 80061f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80061f6:	4b1b      	ldr	r3, [pc, #108]	; (8006264 <MX_ADC1_Init+0xb4>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80061fc:	4b19      	ldr	r3, [pc, #100]	; (8006264 <MX_ADC1_Init+0xb4>)
 80061fe:	2202      	movs	r2, #2
 8006200:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006202:	4b18      	ldr	r3, [pc, #96]	; (8006264 <MX_ADC1_Init+0xb4>)
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800620a:	4b16      	ldr	r3, [pc, #88]	; (8006264 <MX_ADC1_Init+0xb4>)
 800620c:	2200      	movs	r2, #0
 800620e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006210:	4814      	ldr	r0, [pc, #80]	; (8006264 <MX_ADC1_Init+0xb4>)
 8006212:	f7fa fdaf 	bl	8000d74 <HAL_ADC_Init>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800621c:	f000 f99e 	bl	800655c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006220:	2306      	movs	r3, #6
 8006222:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006224:	2301      	movs	r3, #1
 8006226:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8006228:	2301      	movs	r3, #1
 800622a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800622c:	463b      	mov	r3, r7
 800622e:	4619      	mov	r1, r3
 8006230:	480c      	ldr	r0, [pc, #48]	; (8006264 <MX_ADC1_Init+0xb4>)
 8006232:	f7fb f83b 	bl	80012ac <HAL_ADC_ConfigChannel>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800623c:	f000 f98e 	bl	800655c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8006240:	2309      	movs	r3, #9
 8006242:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8006244:	2302      	movs	r3, #2
 8006246:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006248:	463b      	mov	r3, r7
 800624a:	4619      	mov	r1, r3
 800624c:	4805      	ldr	r0, [pc, #20]	; (8006264 <MX_ADC1_Init+0xb4>)
 800624e:	f7fb f82d 	bl	80012ac <HAL_ADC_ConfigChannel>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8006258:	f000 f980 	bl	800655c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800625c:	bf00      	nop
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	200001ec 	.word	0x200001ec
 8006268:	40012000 	.word	0x40012000
 800626c:	0f000001 	.word	0x0f000001

08006270 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8006274:	4b17      	ldr	r3, [pc, #92]	; (80062d4 <MX_CAN1_Init+0x64>)
 8006276:	4a18      	ldr	r2, [pc, #96]	; (80062d8 <MX_CAN1_Init+0x68>)
 8006278:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800627a:	4b16      	ldr	r3, [pc, #88]	; (80062d4 <MX_CAN1_Init+0x64>)
 800627c:	2203      	movs	r2, #3
 800627e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006280:	4b14      	ldr	r3, [pc, #80]	; (80062d4 <MX_CAN1_Init+0x64>)
 8006282:	2200      	movs	r2, #0
 8006284:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006286:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <MX_CAN1_Init+0x64>)
 8006288:	2200      	movs	r2, #0
 800628a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800628c:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <MX_CAN1_Init+0x64>)
 800628e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8006292:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8006294:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <MX_CAN1_Init+0x64>)
 8006296:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800629a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800629c:	4b0d      	ldr	r3, [pc, #52]	; (80062d4 <MX_CAN1_Init+0x64>)
 800629e:	2200      	movs	r2, #0
 80062a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80062a2:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <MX_CAN1_Init+0x64>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80062a8:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <MX_CAN1_Init+0x64>)
 80062aa:	2201      	movs	r2, #1
 80062ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80062ae:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <MX_CAN1_Init+0x64>)
 80062b0:	2201      	movs	r2, #1
 80062b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80062b4:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <MX_CAN1_Init+0x64>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80062ba:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <MX_CAN1_Init+0x64>)
 80062bc:	2200      	movs	r2, #0
 80062be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80062c0:	4804      	ldr	r0, [pc, #16]	; (80062d4 <MX_CAN1_Init+0x64>)
 80062c2:	f7fb fac3 	bl	800184c <HAL_CAN_Init>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80062cc:	f000 f946 	bl	800655c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80062d0:	bf00      	nop
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	20000328 	.word	0x20000328
 80062d8:	40006400 	.word	0x40006400

080062dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062e2:	f107 0310 	add.w	r3, r7, #16
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	605a      	str	r2, [r3, #4]
 80062ec:	609a      	str	r2, [r3, #8]
 80062ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062f0:	1d3b      	adds	r3, r7, #4
 80062f2:	2200      	movs	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	605a      	str	r2, [r3, #4]
 80062f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80062fa:	4b1e      	ldr	r3, [pc, #120]	; (8006374 <MX_TIM2_Init+0x98>)
 80062fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006300:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 8006302:	4b1c      	ldr	r3, [pc, #112]	; (8006374 <MX_TIM2_Init+0x98>)
 8006304:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8006308:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800630a:	4b1a      	ldr	r3, [pc, #104]	; (8006374 <MX_TIM2_Init+0x98>)
 800630c:	2200      	movs	r2, #0
 800630e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8006310:	4b18      	ldr	r3, [pc, #96]	; (8006374 <MX_TIM2_Init+0x98>)
 8006312:	f240 12f3 	movw	r2, #499	; 0x1f3
 8006316:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006318:	4b16      	ldr	r3, [pc, #88]	; (8006374 <MX_TIM2_Init+0x98>)
 800631a:	2200      	movs	r2, #0
 800631c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800631e:	4b15      	ldr	r3, [pc, #84]	; (8006374 <MX_TIM2_Init+0x98>)
 8006320:	2200      	movs	r2, #0
 8006322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006324:	4813      	ldr	r0, [pc, #76]	; (8006374 <MX_TIM2_Init+0x98>)
 8006326:	f7fe f893 	bl	8004450 <HAL_TIM_Base_Init>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8006330:	f000 f914 	bl	800655c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006338:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800633a:	f107 0310 	add.w	r3, r7, #16
 800633e:	4619      	mov	r1, r3
 8006340:	480c      	ldr	r0, [pc, #48]	; (8006374 <MX_TIM2_Init+0x98>)
 8006342:	f7fe f9fb 	bl	800473c <HAL_TIM_ConfigClockSource>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800634c:	f000 f906 	bl	800655c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006350:	2300      	movs	r3, #0
 8006352:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006354:	2300      	movs	r3, #0
 8006356:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006358:	1d3b      	adds	r3, r7, #4
 800635a:	4619      	mov	r1, r3
 800635c:	4805      	ldr	r0, [pc, #20]	; (8006374 <MX_TIM2_Init+0x98>)
 800635e:	f7fe fc13 	bl	8004b88 <HAL_TIMEx_MasterConfigSynchronization>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8006368:	f000 f8f8 	bl	800655c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800636c:	bf00      	nop
 800636e:	3720      	adds	r7, #32
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	200002c8 	.word	0x200002c8

08006378 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800637c:	4b14      	ldr	r3, [pc, #80]	; (80063d0 <MX_USART3_UART_Init+0x58>)
 800637e:	4a15      	ldr	r2, [pc, #84]	; (80063d4 <MX_USART3_UART_Init+0x5c>)
 8006380:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006382:	4b13      	ldr	r3, [pc, #76]	; (80063d0 <MX_USART3_UART_Init+0x58>)
 8006384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006388:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800638a:	4b11      	ldr	r3, [pc, #68]	; (80063d0 <MX_USART3_UART_Init+0x58>)
 800638c:	2200      	movs	r2, #0
 800638e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006390:	4b0f      	ldr	r3, [pc, #60]	; (80063d0 <MX_USART3_UART_Init+0x58>)
 8006392:	2200      	movs	r2, #0
 8006394:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006396:	4b0e      	ldr	r3, [pc, #56]	; (80063d0 <MX_USART3_UART_Init+0x58>)
 8006398:	2200      	movs	r2, #0
 800639a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800639c:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <MX_USART3_UART_Init+0x58>)
 800639e:	220c      	movs	r2, #12
 80063a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80063a2:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <MX_USART3_UART_Init+0x58>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80063a8:	4b09      	ldr	r3, [pc, #36]	; (80063d0 <MX_USART3_UART_Init+0x58>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80063ae:	4b08      	ldr	r3, [pc, #32]	; (80063d0 <MX_USART3_UART_Init+0x58>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80063b4:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <MX_USART3_UART_Init+0x58>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80063ba:	4805      	ldr	r0, [pc, #20]	; (80063d0 <MX_USART3_UART_Init+0x58>)
 80063bc:	f7fe fc90 	bl	8004ce0 <HAL_UART_Init>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80063c6:	f000 f8c9 	bl	800655c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80063ca:	bf00      	nop
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	200000f0 	.word	0x200000f0
 80063d4:	40004800 	.word	0x40004800

080063d8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80063de:	4b1a      	ldr	r3, [pc, #104]	; (8006448 <MX_DMA_Init+0x70>)
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	4a19      	ldr	r2, [pc, #100]	; (8006448 <MX_DMA_Init+0x70>)
 80063e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80063e8:	6313      	str	r3, [r2, #48]	; 0x30
 80063ea:	4b17      	ldr	r3, [pc, #92]	; (8006448 <MX_DMA_Init+0x70>)
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063f2:	607b      	str	r3, [r7, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80063f6:	4b14      	ldr	r3, [pc, #80]	; (8006448 <MX_DMA_Init+0x70>)
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	4a13      	ldr	r2, [pc, #76]	; (8006448 <MX_DMA_Init+0x70>)
 80063fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006400:	6313      	str	r3, [r2, #48]	; 0x30
 8006402:	4b11      	ldr	r3, [pc, #68]	; (8006448 <MX_DMA_Init+0x70>)
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800640a:	603b      	str	r3, [r7, #0]
 800640c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800640e:	2200      	movs	r2, #0
 8006410:	2100      	movs	r1, #0
 8006412:	200c      	movs	r0, #12
 8006414:	f7fc f98b 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8006418:	200c      	movs	r0, #12
 800641a:	f7fc f9a4 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800641e:	2200      	movs	r2, #0
 8006420:	2100      	movs	r1, #0
 8006422:	200e      	movs	r0, #14
 8006424:	f7fc f983 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8006428:	200e      	movs	r0, #14
 800642a:	f7fc f99c 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800642e:	2200      	movs	r2, #0
 8006430:	2100      	movs	r1, #0
 8006432:	2038      	movs	r0, #56	; 0x38
 8006434:	f7fc f97b 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006438:	2038      	movs	r0, #56	; 0x38
 800643a:	f7fc f994 	bl	8002766 <HAL_NVIC_EnableIRQ>

}
 800643e:	bf00      	nop
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	40023800 	.word	0x40023800

0800644c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b08a      	sub	sp, #40	; 0x28
 8006450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006452:	f107 0314 	add.w	r3, r7, #20
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	605a      	str	r2, [r3, #4]
 800645c:	609a      	str	r2, [r3, #8]
 800645e:	60da      	str	r2, [r3, #12]
 8006460:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006462:	4b39      	ldr	r3, [pc, #228]	; (8006548 <MX_GPIO_Init+0xfc>)
 8006464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006466:	4a38      	ldr	r2, [pc, #224]	; (8006548 <MX_GPIO_Init+0xfc>)
 8006468:	f043 0304 	orr.w	r3, r3, #4
 800646c:	6313      	str	r3, [r2, #48]	; 0x30
 800646e:	4b36      	ldr	r3, [pc, #216]	; (8006548 <MX_GPIO_Init+0xfc>)
 8006470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006472:	f003 0304 	and.w	r3, r3, #4
 8006476:	613b      	str	r3, [r7, #16]
 8006478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800647a:	4b33      	ldr	r3, [pc, #204]	; (8006548 <MX_GPIO_Init+0xfc>)
 800647c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647e:	4a32      	ldr	r2, [pc, #200]	; (8006548 <MX_GPIO_Init+0xfc>)
 8006480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006484:	6313      	str	r3, [r2, #48]	; 0x30
 8006486:	4b30      	ldr	r3, [pc, #192]	; (8006548 <MX_GPIO_Init+0xfc>)
 8006488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006492:	4b2d      	ldr	r3, [pc, #180]	; (8006548 <MX_GPIO_Init+0xfc>)
 8006494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006496:	4a2c      	ldr	r2, [pc, #176]	; (8006548 <MX_GPIO_Init+0xfc>)
 8006498:	f043 0301 	orr.w	r3, r3, #1
 800649c:	6313      	str	r3, [r2, #48]	; 0x30
 800649e:	4b2a      	ldr	r3, [pc, #168]	; (8006548 <MX_GPIO_Init+0xfc>)
 80064a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	60bb      	str	r3, [r7, #8]
 80064a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80064aa:	4b27      	ldr	r3, [pc, #156]	; (8006548 <MX_GPIO_Init+0xfc>)
 80064ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ae:	4a26      	ldr	r2, [pc, #152]	; (8006548 <MX_GPIO_Init+0xfc>)
 80064b0:	f043 0302 	orr.w	r3, r3, #2
 80064b4:	6313      	str	r3, [r2, #48]	; 0x30
 80064b6:	4b24      	ldr	r3, [pc, #144]	; (8006548 <MX_GPIO_Init+0xfc>)
 80064b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	607b      	str	r3, [r7, #4]
 80064c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80064c2:	4b21      	ldr	r3, [pc, #132]	; (8006548 <MX_GPIO_Init+0xfc>)
 80064c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c6:	4a20      	ldr	r2, [pc, #128]	; (8006548 <MX_GPIO_Init+0xfc>)
 80064c8:	f043 0308 	orr.w	r3, r3, #8
 80064cc:	6313      	str	r3, [r2, #48]	; 0x30
 80064ce:	4b1e      	ldr	r3, [pc, #120]	; (8006548 <MX_GPIO_Init+0xfc>)
 80064d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d2:	f003 0308 	and.w	r3, r3, #8
 80064d6:	603b      	str	r3, [r7, #0]
 80064d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7, GPIO_PIN_RESET);
 80064da:	2200      	movs	r2, #0
 80064dc:	f24c 0181 	movw	r1, #49281	; 0xc081
 80064e0:	481a      	ldr	r0, [pc, #104]	; (800654c <MX_GPIO_Init+0x100>)
 80064e2:	f7fc feb5 	bl	8003250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80064e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80064ec:	4b18      	ldr	r3, [pc, #96]	; (8006550 <MX_GPIO_Init+0x104>)
 80064ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064f4:	f107 0314 	add.w	r3, r7, #20
 80064f8:	4619      	mov	r1, r3
 80064fa:	4816      	ldr	r0, [pc, #88]	; (8006554 <MX_GPIO_Init+0x108>)
 80064fc:	f7fc fce6 	bl	8002ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006500:	230c      	movs	r3, #12
 8006502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006504:	2302      	movs	r3, #2
 8006506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006508:	2300      	movs	r3, #0
 800650a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800650c:	2303      	movs	r3, #3
 800650e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006510:	2307      	movs	r3, #7
 8006512:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006514:	f107 0314 	add.w	r3, r7, #20
 8006518:	4619      	mov	r1, r3
 800651a:	480f      	ldr	r0, [pc, #60]	; (8006558 <MX_GPIO_Init+0x10c>)
 800651c:	f7fc fcd6 	bl	8002ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB15 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7;
 8006520:	f24c 0381 	movw	r3, #49281	; 0xc081
 8006524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006526:	2301      	movs	r3, #1
 8006528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800652a:	2300      	movs	r3, #0
 800652c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800652e:	2300      	movs	r3, #0
 8006530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006532:	f107 0314 	add.w	r3, r7, #20
 8006536:	4619      	mov	r1, r3
 8006538:	4804      	ldr	r0, [pc, #16]	; (800654c <MX_GPIO_Init+0x100>)
 800653a:	f7fc fcc7 	bl	8002ecc <HAL_GPIO_Init>

}
 800653e:	bf00      	nop
 8006540:	3728      	adds	r7, #40	; 0x28
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	40023800 	.word	0x40023800
 800654c:	40020400 	.word	0x40020400
 8006550:	10110000 	.word	0x10110000
 8006554:	40020800 	.word	0x40020800
 8006558:	40020000 	.word	0x40020000

0800655c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	// enciendo pin rojo si hay algun error
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8006560:	2201      	movs	r2, #1
 8006562:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006566:	4802      	ldr	r0, [pc, #8]	; (8006570 <Error_Handler+0x14>)
 8006568:	f7fc fe72 	bl	8003250 <HAL_GPIO_WritePin>
	}*/

  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800656c:	bf00      	nop
 800656e:	bd80      	pop	{r7, pc}
 8006570:	40020400 	.word	0x40020400

08006574 <preparo_y_envio_data_uart>:
extern short int Phase_A_Crr[2],Phase_B_Crr[2],DcLink[2],Torque[2],Warnings[2];
extern int throttle,direction,brake;

//velocidad de motor 1,motor 2, crr 1, crr 2, temp 1 , temp 2 ,torq1 , torq2
void preparo_y_envio_data_uart(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
	uint16_t info_UART[UART_SIZE];

	info_UART[0]=velocity[0];		//Velocidad motor 1
 800657a:	4b1d      	ldr	r3, [pc, #116]	; (80065f0 <preparo_y_envio_data_uart+0x7c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	803b      	strh	r3, [r7, #0]
	info_UART[1]=velocity[1];		//Velocidad motor 2
 8006582:	4b1b      	ldr	r3, [pc, #108]	; (80065f0 <preparo_y_envio_data_uart+0x7c>)
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	b29b      	uxth	r3, r3
 8006588:	807b      	strh	r3, [r7, #2]
	info_UART[2]=MotorCrr[0];		//corriente motor 1
 800658a:	4b1a      	ldr	r3, [pc, #104]	; (80065f4 <preparo_y_envio_data_uart+0x80>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	b29b      	uxth	r3, r3
 8006590:	80bb      	strh	r3, [r7, #4]
	info_UART[3]=MotorCrr[1];		//corriente motor 2
 8006592:	4b18      	ldr	r3, [pc, #96]	; (80065f4 <preparo_y_envio_data_uart+0x80>)
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	b29b      	uxth	r3, r3
 8006598:	80fb      	strh	r3, [r7, #6]
	info_UART[4]=MotorTemp[0];		//temperatura motor 1
 800659a:	4b17      	ldr	r3, [pc, #92]	; (80065f8 <preparo_y_envio_data_uart+0x84>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	813b      	strh	r3, [r7, #8]
	info_UART[5]=MotorTemp[1];		//temperatura motor 2
 80065a2:	4b15      	ldr	r3, [pc, #84]	; (80065f8 <preparo_y_envio_data_uart+0x84>)
 80065a4:	785b      	ldrb	r3, [r3, #1]
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	817b      	strh	r3, [r7, #10]
	info_UART[6]=Torque[0];			//torque motor 1
 80065aa:	4b14      	ldr	r3, [pc, #80]	; (80065fc <preparo_y_envio_data_uart+0x88>)
 80065ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	81bb      	strh	r3, [r7, #12]
	info_UART[7]=Torque[1];			//torque motor 2
 80065b4:	4b11      	ldr	r3, [pc, #68]	; (80065fc <preparo_y_envio_data_uart+0x88>)
 80065b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	81fb      	strh	r3, [r7, #14]
	info_UART[8]=throttle;			//Posicion acelerador
 80065be:	4b10      	ldr	r3, [pc, #64]	; (8006600 <preparo_y_envio_data_uart+0x8c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	823b      	strh	r3, [r7, #16]
	info_UART[9]=brake;				//Freno
 80065c6:	4b0f      	ldr	r3, [pc, #60]	; (8006604 <preparo_y_envio_data_uart+0x90>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	827b      	strh	r3, [r7, #18]
	info_UART[10]=direction;		//Volante
 80065ce:	4b0e      	ldr	r3, [pc, #56]	; (8006608 <preparo_y_envio_data_uart+0x94>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	82bb      	strh	r3, [r7, #20]
	info_UART[11]=VelocityAVG[0];	//VELOCIDAD ACTUAL DEL AUTO, VALOR INVENTADO, MODIFICAR.
 80065d6:	4b0d      	ldr	r3, [pc, #52]	; (800660c <preparo_y_envio_data_uart+0x98>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	82fb      	strh	r3, [r7, #22]

	Pc_Communication(info_UART);	//envio info
 80065de:	463b      	mov	r3, r7
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fa fb31 	bl	8000c48 <Pc_Communication>
}
 80065e6:	bf00      	nop
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	200002a0 	.word	0x200002a0
 80065f4:	20000238 	.word	0x20000238
 80065f8:	20000364 	.word	0x20000364
 80065fc:	20000170 	.word	0x20000170
 8006600:	200001d8 	.word	0x200001d8
 8006604:	20000354 	.word	0x20000354
 8006608:	200001e4 	.word	0x200001e4
 800660c:	2000035c 	.word	0x2000035c

08006610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006616:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <HAL_MspInit+0x44>)
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	4a0e      	ldr	r2, [pc, #56]	; (8006654 <HAL_MspInit+0x44>)
 800661c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006620:	6413      	str	r3, [r2, #64]	; 0x40
 8006622:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <HAL_MspInit+0x44>)
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800662a:	607b      	str	r3, [r7, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800662e:	4b09      	ldr	r3, [pc, #36]	; (8006654 <HAL_MspInit+0x44>)
 8006630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006632:	4a08      	ldr	r2, [pc, #32]	; (8006654 <HAL_MspInit+0x44>)
 8006634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006638:	6453      	str	r3, [r2, #68]	; 0x44
 800663a:	4b06      	ldr	r3, [pc, #24]	; (8006654 <HAL_MspInit+0x44>)
 800663c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	40023800 	.word	0x40023800

08006658 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08a      	sub	sp, #40	; 0x28
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006660:	f107 0314 	add.w	r3, r7, #20
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	605a      	str	r2, [r3, #4]
 800666a:	609a      	str	r2, [r3, #8]
 800666c:	60da      	str	r2, [r3, #12]
 800666e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a3d      	ldr	r2, [pc, #244]	; (800676c <HAL_ADC_MspInit+0x114>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d173      	bne.n	8006762 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800667a:	4b3d      	ldr	r3, [pc, #244]	; (8006770 <HAL_ADC_MspInit+0x118>)
 800667c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667e:	4a3c      	ldr	r2, [pc, #240]	; (8006770 <HAL_ADC_MspInit+0x118>)
 8006680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006684:	6453      	str	r3, [r2, #68]	; 0x44
 8006686:	4b3a      	ldr	r3, [pc, #232]	; (8006770 <HAL_ADC_MspInit+0x118>)
 8006688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800668e:	613b      	str	r3, [r7, #16]
 8006690:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006692:	4b37      	ldr	r3, [pc, #220]	; (8006770 <HAL_ADC_MspInit+0x118>)
 8006694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006696:	4a36      	ldr	r2, [pc, #216]	; (8006770 <HAL_ADC_MspInit+0x118>)
 8006698:	f043 0301 	orr.w	r3, r3, #1
 800669c:	6313      	str	r3, [r2, #48]	; 0x30
 800669e:	4b34      	ldr	r3, [pc, #208]	; (8006770 <HAL_ADC_MspInit+0x118>)
 80066a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066aa:	4b31      	ldr	r3, [pc, #196]	; (8006770 <HAL_ADC_MspInit+0x118>)
 80066ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ae:	4a30      	ldr	r2, [pc, #192]	; (8006770 <HAL_ADC_MspInit+0x118>)
 80066b0:	f043 0302 	orr.w	r3, r3, #2
 80066b4:	6313      	str	r3, [r2, #48]	; 0x30
 80066b6:	4b2e      	ldr	r3, [pc, #184]	; (8006770 <HAL_ADC_MspInit+0x118>)
 80066b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	60bb      	str	r3, [r7, #8]
 80066c0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80066c2:	2340      	movs	r3, #64	; 0x40
 80066c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066c6:	2303      	movs	r3, #3
 80066c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066ce:	f107 0314 	add.w	r3, r7, #20
 80066d2:	4619      	mov	r1, r3
 80066d4:	4827      	ldr	r0, [pc, #156]	; (8006774 <HAL_ADC_MspInit+0x11c>)
 80066d6:	f7fc fbf9 	bl	8002ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80066da:	2302      	movs	r3, #2
 80066dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066de:	2303      	movs	r3, #3
 80066e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066e6:	f107 0314 	add.w	r3, r7, #20
 80066ea:	4619      	mov	r1, r3
 80066ec:	4822      	ldr	r0, [pc, #136]	; (8006778 <HAL_ADC_MspInit+0x120>)
 80066ee:	f7fc fbed 	bl	8002ecc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80066f2:	4b22      	ldr	r3, [pc, #136]	; (800677c <HAL_ADC_MspInit+0x124>)
 80066f4:	4a22      	ldr	r2, [pc, #136]	; (8006780 <HAL_ADC_MspInit+0x128>)
 80066f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80066f8:	4b20      	ldr	r3, [pc, #128]	; (800677c <HAL_ADC_MspInit+0x124>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066fe:	4b1f      	ldr	r3, [pc, #124]	; (800677c <HAL_ADC_MspInit+0x124>)
 8006700:	2200      	movs	r2, #0
 8006702:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006704:	4b1d      	ldr	r3, [pc, #116]	; (800677c <HAL_ADC_MspInit+0x124>)
 8006706:	2200      	movs	r2, #0
 8006708:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800670a:	4b1c      	ldr	r3, [pc, #112]	; (800677c <HAL_ADC_MspInit+0x124>)
 800670c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006710:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006712:	4b1a      	ldr	r3, [pc, #104]	; (800677c <HAL_ADC_MspInit+0x124>)
 8006714:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006718:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800671a:	4b18      	ldr	r3, [pc, #96]	; (800677c <HAL_ADC_MspInit+0x124>)
 800671c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006720:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006722:	4b16      	ldr	r3, [pc, #88]	; (800677c <HAL_ADC_MspInit+0x124>)
 8006724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006728:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800672a:	4b14      	ldr	r3, [pc, #80]	; (800677c <HAL_ADC_MspInit+0x124>)
 800672c:	2200      	movs	r2, #0
 800672e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006730:	4b12      	ldr	r3, [pc, #72]	; (800677c <HAL_ADC_MspInit+0x124>)
 8006732:	2200      	movs	r2, #0
 8006734:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006736:	4811      	ldr	r0, [pc, #68]	; (800677c <HAL_ADC_MspInit+0x124>)
 8006738:	f7fc f830 	bl	800279c <HAL_DMA_Init>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8006742:	f7ff ff0b 	bl	800655c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a0c      	ldr	r2, [pc, #48]	; (800677c <HAL_ADC_MspInit+0x124>)
 800674a:	639a      	str	r2, [r3, #56]	; 0x38
 800674c:	4a0b      	ldr	r2, [pc, #44]	; (800677c <HAL_ADC_MspInit+0x124>)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006752:	2200      	movs	r2, #0
 8006754:	2100      	movs	r1, #0
 8006756:	2012      	movs	r0, #18
 8006758:	f7fb ffe9 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800675c:	2012      	movs	r0, #18
 800675e:	f7fc f802 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006762:	bf00      	nop
 8006764:	3728      	adds	r7, #40	; 0x28
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	40012000 	.word	0x40012000
 8006770:	40023800 	.word	0x40023800
 8006774:	40020000 	.word	0x40020000
 8006778:	40020400 	.word	0x40020400
 800677c:	20000240 	.word	0x20000240
 8006780:	40026410 	.word	0x40026410

08006784 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b08a      	sub	sp, #40	; 0x28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800678c:	f107 0314 	add.w	r3, r7, #20
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	605a      	str	r2, [r3, #4]
 8006796:	609a      	str	r2, [r3, #8]
 8006798:	60da      	str	r2, [r3, #12]
 800679a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a1b      	ldr	r2, [pc, #108]	; (8006810 <HAL_CAN_MspInit+0x8c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d130      	bne.n	8006808 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80067a6:	4b1b      	ldr	r3, [pc, #108]	; (8006814 <HAL_CAN_MspInit+0x90>)
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	4a1a      	ldr	r2, [pc, #104]	; (8006814 <HAL_CAN_MspInit+0x90>)
 80067ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80067b0:	6413      	str	r3, [r2, #64]	; 0x40
 80067b2:	4b18      	ldr	r3, [pc, #96]	; (8006814 <HAL_CAN_MspInit+0x90>)
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ba:	613b      	str	r3, [r7, #16]
 80067bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067be:	4b15      	ldr	r3, [pc, #84]	; (8006814 <HAL_CAN_MspInit+0x90>)
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	4a14      	ldr	r2, [pc, #80]	; (8006814 <HAL_CAN_MspInit+0x90>)
 80067c4:	f043 0302 	orr.w	r3, r3, #2
 80067c8:	6313      	str	r3, [r2, #48]	; 0x30
 80067ca:	4b12      	ldr	r3, [pc, #72]	; (8006814 <HAL_CAN_MspInit+0x90>)
 80067cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	60fb      	str	r3, [r7, #12]
 80067d4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80067d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80067da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067dc:	2302      	movs	r3, #2
 80067de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e0:	2300      	movs	r3, #0
 80067e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067e4:	2303      	movs	r3, #3
 80067e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80067e8:	2309      	movs	r3, #9
 80067ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067ec:	f107 0314 	add.w	r3, r7, #20
 80067f0:	4619      	mov	r1, r3
 80067f2:	4809      	ldr	r0, [pc, #36]	; (8006818 <HAL_CAN_MspInit+0x94>)
 80067f4:	f7fc fb6a 	bl	8002ecc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80067f8:	2200      	movs	r2, #0
 80067fa:	2100      	movs	r1, #0
 80067fc:	2014      	movs	r0, #20
 80067fe:	f7fb ff96 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8006802:	2014      	movs	r0, #20
 8006804:	f7fb ffaf 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8006808:	bf00      	nop
 800680a:	3728      	adds	r7, #40	; 0x28
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	40006400 	.word	0x40006400
 8006814:	40023800 	.word	0x40023800
 8006818:	40020400 	.word	0x40020400

0800681c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682c:	d113      	bne.n	8006856 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800682e:	4b0c      	ldr	r3, [pc, #48]	; (8006860 <HAL_TIM_Base_MspInit+0x44>)
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	4a0b      	ldr	r2, [pc, #44]	; (8006860 <HAL_TIM_Base_MspInit+0x44>)
 8006834:	f043 0301 	orr.w	r3, r3, #1
 8006838:	6413      	str	r3, [r2, #64]	; 0x40
 800683a:	4b09      	ldr	r3, [pc, #36]	; (8006860 <HAL_TIM_Base_MspInit+0x44>)
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006846:	2200      	movs	r2, #0
 8006848:	2100      	movs	r1, #0
 800684a:	201c      	movs	r0, #28
 800684c:	f7fb ff6f 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006850:	201c      	movs	r0, #28
 8006852:	f7fb ff88 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006856:	bf00      	nop
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	40023800 	.word	0x40023800

08006864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b08a      	sub	sp, #40	; 0x28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800686c:	f107 0314 	add.w	r3, r7, #20
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	605a      	str	r2, [r3, #4]
 8006876:	609a      	str	r2, [r3, #8]
 8006878:	60da      	str	r2, [r3, #12]
 800687a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a4b      	ldr	r2, [pc, #300]	; (80069b0 <HAL_UART_MspInit+0x14c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	f040 8090 	bne.w	80069a8 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006888:	4b4a      	ldr	r3, [pc, #296]	; (80069b4 <HAL_UART_MspInit+0x150>)
 800688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688c:	4a49      	ldr	r2, [pc, #292]	; (80069b4 <HAL_UART_MspInit+0x150>)
 800688e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006892:	6413      	str	r3, [r2, #64]	; 0x40
 8006894:	4b47      	ldr	r3, [pc, #284]	; (80069b4 <HAL_UART_MspInit+0x150>)
 8006896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80068a0:	4b44      	ldr	r3, [pc, #272]	; (80069b4 <HAL_UART_MspInit+0x150>)
 80068a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a4:	4a43      	ldr	r2, [pc, #268]	; (80069b4 <HAL_UART_MspInit+0x150>)
 80068a6:	f043 0308 	orr.w	r3, r3, #8
 80068aa:	6313      	str	r3, [r2, #48]	; 0x30
 80068ac:	4b41      	ldr	r3, [pc, #260]	; (80069b4 <HAL_UART_MspInit+0x150>)
 80068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b0:	f003 0308 	and.w	r3, r3, #8
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80068b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80068bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068be:	2302      	movs	r3, #2
 80068c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068c6:	2303      	movs	r3, #3
 80068c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80068ca:	2307      	movs	r3, #7
 80068cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80068ce:	f107 0314 	add.w	r3, r7, #20
 80068d2:	4619      	mov	r1, r3
 80068d4:	4838      	ldr	r0, [pc, #224]	; (80069b8 <HAL_UART_MspInit+0x154>)
 80068d6:	f7fc faf9 	bl	8002ecc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80068da:	4b38      	ldr	r3, [pc, #224]	; (80069bc <HAL_UART_MspInit+0x158>)
 80068dc:	4a38      	ldr	r2, [pc, #224]	; (80069c0 <HAL_UART_MspInit+0x15c>)
 80068de:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80068e0:	4b36      	ldr	r3, [pc, #216]	; (80069bc <HAL_UART_MspInit+0x158>)
 80068e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80068e6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068e8:	4b34      	ldr	r3, [pc, #208]	; (80069bc <HAL_UART_MspInit+0x158>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80068ee:	4b33      	ldr	r3, [pc, #204]	; (80069bc <HAL_UART_MspInit+0x158>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80068f4:	4b31      	ldr	r3, [pc, #196]	; (80069bc <HAL_UART_MspInit+0x158>)
 80068f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068fa:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80068fc:	4b2f      	ldr	r3, [pc, #188]	; (80069bc <HAL_UART_MspInit+0x158>)
 80068fe:	2200      	movs	r2, #0
 8006900:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006902:	4b2e      	ldr	r3, [pc, #184]	; (80069bc <HAL_UART_MspInit+0x158>)
 8006904:	2200      	movs	r2, #0
 8006906:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8006908:	4b2c      	ldr	r3, [pc, #176]	; (80069bc <HAL_UART_MspInit+0x158>)
 800690a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800690e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006910:	4b2a      	ldr	r3, [pc, #168]	; (80069bc <HAL_UART_MspInit+0x158>)
 8006912:	2200      	movs	r2, #0
 8006914:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006916:	4b29      	ldr	r3, [pc, #164]	; (80069bc <HAL_UART_MspInit+0x158>)
 8006918:	2200      	movs	r2, #0
 800691a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800691c:	4827      	ldr	r0, [pc, #156]	; (80069bc <HAL_UART_MspInit+0x158>)
 800691e:	f7fb ff3d 	bl	800279c <HAL_DMA_Init>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8006928:	f7ff fe18 	bl	800655c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a23      	ldr	r2, [pc, #140]	; (80069bc <HAL_UART_MspInit+0x158>)
 8006930:	66da      	str	r2, [r3, #108]	; 0x6c
 8006932:	4a22      	ldr	r2, [pc, #136]	; (80069bc <HAL_UART_MspInit+0x158>)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8006938:	4b22      	ldr	r3, [pc, #136]	; (80069c4 <HAL_UART_MspInit+0x160>)
 800693a:	4a23      	ldr	r2, [pc, #140]	; (80069c8 <HAL_UART_MspInit+0x164>)
 800693c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800693e:	4b21      	ldr	r3, [pc, #132]	; (80069c4 <HAL_UART_MspInit+0x160>)
 8006940:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006944:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006946:	4b1f      	ldr	r3, [pc, #124]	; (80069c4 <HAL_UART_MspInit+0x160>)
 8006948:	2240      	movs	r2, #64	; 0x40
 800694a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800694c:	4b1d      	ldr	r3, [pc, #116]	; (80069c4 <HAL_UART_MspInit+0x160>)
 800694e:	2200      	movs	r2, #0
 8006950:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006952:	4b1c      	ldr	r3, [pc, #112]	; (80069c4 <HAL_UART_MspInit+0x160>)
 8006954:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006958:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800695a:	4b1a      	ldr	r3, [pc, #104]	; (80069c4 <HAL_UART_MspInit+0x160>)
 800695c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006960:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006962:	4b18      	ldr	r3, [pc, #96]	; (80069c4 <HAL_UART_MspInit+0x160>)
 8006964:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006968:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800696a:	4b16      	ldr	r3, [pc, #88]	; (80069c4 <HAL_UART_MspInit+0x160>)
 800696c:	2200      	movs	r2, #0
 800696e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006970:	4b14      	ldr	r3, [pc, #80]	; (80069c4 <HAL_UART_MspInit+0x160>)
 8006972:	2200      	movs	r2, #0
 8006974:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006976:	4b13      	ldr	r3, [pc, #76]	; (80069c4 <HAL_UART_MspInit+0x160>)
 8006978:	2200      	movs	r2, #0
 800697a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800697c:	4811      	ldr	r0, [pc, #68]	; (80069c4 <HAL_UART_MspInit+0x160>)
 800697e:	f7fb ff0d 	bl	800279c <HAL_DMA_Init>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8006988:	f7ff fde8 	bl	800655c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a0d      	ldr	r2, [pc, #52]	; (80069c4 <HAL_UART_MspInit+0x160>)
 8006990:	669a      	str	r2, [r3, #104]	; 0x68
 8006992:	4a0c      	ldr	r2, [pc, #48]	; (80069c4 <HAL_UART_MspInit+0x160>)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006998:	2200      	movs	r2, #0
 800699a:	2100      	movs	r1, #0
 800699c:	2027      	movs	r0, #39	; 0x27
 800699e:	f7fb fec6 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80069a2:	2027      	movs	r0, #39	; 0x27
 80069a4:	f7fb fedf 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80069a8:	bf00      	nop
 80069aa:	3728      	adds	r7, #40	; 0x28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	40004800 	.word	0x40004800
 80069b4:	40023800 	.word	0x40023800
 80069b8:	40020c00 	.word	0x40020c00
 80069bc:	20000090 	.word	0x20000090
 80069c0:	40026028 	.word	0x40026028
 80069c4:	20000178 	.word	0x20000178
 80069c8:	40026058 	.word	0x40026058

080069cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80069d0:	bf00      	nop
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069da:	b480      	push	{r7}
 80069dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069de:	e7fe      	b.n	80069de <HardFault_Handler+0x4>

080069e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80069e4:	e7fe      	b.n	80069e4 <MemManage_Handler+0x4>

080069e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80069e6:	b480      	push	{r7}
 80069e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80069ea:	e7fe      	b.n	80069ea <BusFault_Handler+0x4>

080069ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80069f0:	e7fe      	b.n	80069f0 <UsageFault_Handler+0x4>

080069f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069f2:	b480      	push	{r7}
 80069f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80069f6:	bf00      	nop
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a00:	b480      	push	{r7}
 8006a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a04:	bf00      	nop
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006a12:	bf00      	nop
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a20:	f7fa f966 	bl	8000cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a24:	bf00      	nop
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006a2c:	4802      	ldr	r0, [pc, #8]	; (8006a38 <DMA1_Stream1_IRQHandler+0x10>)
 8006a2e:	f7fb ffe5 	bl	80029fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006a32:	bf00      	nop
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000090 	.word	0x20000090

08006a3c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006a40:	4802      	ldr	r0, [pc, #8]	; (8006a4c <DMA1_Stream3_IRQHandler+0x10>)
 8006a42:	f7fb ffdb 	bl	80029fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8006a46:	bf00      	nop
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	20000178 	.word	0x20000178

08006a50 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006a54:	4802      	ldr	r0, [pc, #8]	; (8006a60 <ADC_IRQHandler+0x10>)
 8006a56:	f7fa f9d1 	bl	8000dfc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006a5a:	bf00      	nop
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	200001ec 	.word	0x200001ec

08006a64 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006a68:	4806      	ldr	r0, [pc, #24]	; (8006a84 <CAN1_RX0_IRQHandler+0x20>)
 8006a6a:	f7fb fb52 	bl	8002112 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  //inicial
  //if(FLAG_CAN==READY)
  //{
  HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0 , &pRxHeader, buffer_Rx_msg);
 8006a6e:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <CAN1_RX0_IRQHandler+0x24>)
 8006a70:	4a06      	ldr	r2, [pc, #24]	; (8006a8c <CAN1_RX0_IRQHandler+0x28>)
 8006a72:	2100      	movs	r1, #0
 8006a74:	4803      	ldr	r0, [pc, #12]	; (8006a84 <CAN1_RX0_IRQHandler+0x20>)
 8006a76:	f7fb fa14 	bl	8001ea2 <HAL_CAN_GetRxMessage>
  FLAG_CAN=PENDING;
 8006a7a:	4b05      	ldr	r3, [pc, #20]	; (8006a90 <CAN1_RX0_IRQHandler+0x2c>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	701a      	strb	r2, [r3, #0]
  //else
  //{
  //	  Error_Handler();
  //}
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006a80:	bf00      	nop
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	20000328 	.word	0x20000328
 8006a88:	200002ac 	.word	0x200002ac
 8006a8c:	20000308 	.word	0x20000308
 8006a90:	200001e0 	.word	0x200001e0

08006a94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	static char now,last;
	now=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8006a98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a9c:	4811      	ldr	r0, [pc, #68]	; (8006ae4 <TIM2_IRQHandler+0x50>)
 8006a9e:	f7fc fbbf 	bl	8003220 <HAL_GPIO_ReadPin>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	4b10      	ldr	r3, [pc, #64]	; (8006ae8 <TIM2_IRQHandler+0x54>)
 8006aa8:	701a      	strb	r2, [r3, #0]
	if (now==1 && (now^last))   /// Doy un pulso
 8006aaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ae8 <TIM2_IRQHandler+0x54>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d10f      	bne.n	8006ad2 <TIM2_IRQHandler+0x3e>
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <TIM2_IRQHandler+0x54>)
 8006ab4:	781a      	ldrb	r2, [r3, #0]
 8006ab6:	4b0d      	ldr	r3, [pc, #52]	; (8006aec <TIM2_IRQHandler+0x58>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d009      	beq.n	8006ad2 <TIM2_IRQHandler+0x3e>
	{
		FLAG_OP = !FLAG_OP;
 8006abe:	4b0c      	ldr	r3, [pc, #48]	; (8006af0 <TIM2_IRQHandler+0x5c>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	bf0c      	ite	eq
 8006ac6:	2301      	moveq	r3, #1
 8006ac8:	2300      	movne	r3, #0
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	461a      	mov	r2, r3
 8006ace:	4b08      	ldr	r3, [pc, #32]	; (8006af0 <TIM2_IRQHandler+0x5c>)
 8006ad0:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006ad2:	4808      	ldr	r0, [pc, #32]	; (8006af4 <TIM2_IRQHandler+0x60>)
 8006ad4:	f7fd fd12 	bl	80044fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  last=now;
 8006ad8:	4b03      	ldr	r3, [pc, #12]	; (8006ae8 <TIM2_IRQHandler+0x54>)
 8006ada:	781a      	ldrb	r2, [r3, #0]
 8006adc:	4b03      	ldr	r3, [pc, #12]	; (8006aec <TIM2_IRQHandler+0x58>)
 8006ade:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8006ae0:	bf00      	nop
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	40020800 	.word	0x40020800
 8006ae8:	20000042 	.word	0x20000042
 8006aec:	20000043 	.word	0x20000043
 8006af0:	2000008c 	.word	0x2000008c
 8006af4:	200002c8 	.word	0x200002c8

08006af8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006afc:	4802      	ldr	r0, [pc, #8]	; (8006b08 <USART3_IRQHandler+0x10>)
 8006afe:	f7fe fa3d 	bl	8004f7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006b02:	bf00      	nop
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	200000f0 	.word	0x200000f0

08006b0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006b10:	4802      	ldr	r0, [pc, #8]	; (8006b1c <DMA2_Stream0_IRQHandler+0x10>)
 8006b12:	f7fb ff73 	bl	80029fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
 // throttle=(int)promedio(ADC_val[0]);
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006b16:	bf00      	nop
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20000240 	.word	0x20000240

08006b20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006b20:	b480      	push	{r7}
 8006b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b24:	4b15      	ldr	r3, [pc, #84]	; (8006b7c <SystemInit+0x5c>)
 8006b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2a:	4a14      	ldr	r2, [pc, #80]	; (8006b7c <SystemInit+0x5c>)
 8006b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006b34:	4b12      	ldr	r3, [pc, #72]	; (8006b80 <SystemInit+0x60>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a11      	ldr	r2, [pc, #68]	; (8006b80 <SystemInit+0x60>)
 8006b3a:	f043 0301 	orr.w	r3, r3, #1
 8006b3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006b40:	4b0f      	ldr	r3, [pc, #60]	; (8006b80 <SystemInit+0x60>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006b46:	4b0e      	ldr	r3, [pc, #56]	; (8006b80 <SystemInit+0x60>)
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	490d      	ldr	r1, [pc, #52]	; (8006b80 <SystemInit+0x60>)
 8006b4c:	4b0d      	ldr	r3, [pc, #52]	; (8006b84 <SystemInit+0x64>)
 8006b4e:	4013      	ands	r3, r2
 8006b50:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006b52:	4b0b      	ldr	r3, [pc, #44]	; (8006b80 <SystemInit+0x60>)
 8006b54:	4a0c      	ldr	r2, [pc, #48]	; (8006b88 <SystemInit+0x68>)
 8006b56:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006b58:	4b09      	ldr	r3, [pc, #36]	; (8006b80 <SystemInit+0x60>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a08      	ldr	r2, [pc, #32]	; (8006b80 <SystemInit+0x60>)
 8006b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006b64:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <SystemInit+0x60>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006b6a:	4b04      	ldr	r3, [pc, #16]	; (8006b7c <SystemInit+0x5c>)
 8006b6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b70:	609a      	str	r2, [r3, #8]
#endif
}
 8006b72:	bf00      	nop
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	e000ed00 	.word	0xe000ed00
 8006b80:	40023800 	.word	0x40023800
 8006b84:	fef6ffff 	.word	0xfef6ffff
 8006b88:	24003010 	.word	0x24003010

08006b8c <Reset_Handler>:
 8006b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006bc4 <LoopFillZerobss+0x14>
 8006b90:	2100      	movs	r1, #0
 8006b92:	e003      	b.n	8006b9c <LoopCopyDataInit>

08006b94 <CopyDataInit>:
 8006b94:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <LoopFillZerobss+0x18>)
 8006b96:	585b      	ldr	r3, [r3, r1]
 8006b98:	5043      	str	r3, [r0, r1]
 8006b9a:	3104      	adds	r1, #4

08006b9c <LoopCopyDataInit>:
 8006b9c:	480b      	ldr	r0, [pc, #44]	; (8006bcc <LoopFillZerobss+0x1c>)
 8006b9e:	4b0c      	ldr	r3, [pc, #48]	; (8006bd0 <LoopFillZerobss+0x20>)
 8006ba0:	1842      	adds	r2, r0, r1
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d3f6      	bcc.n	8006b94 <CopyDataInit>
 8006ba6:	4a0b      	ldr	r2, [pc, #44]	; (8006bd4 <LoopFillZerobss+0x24>)
 8006ba8:	e002      	b.n	8006bb0 <LoopFillZerobss>

08006baa <FillZerobss>:
 8006baa:	2300      	movs	r3, #0
 8006bac:	f842 3b04 	str.w	r3, [r2], #4

08006bb0 <LoopFillZerobss>:
 8006bb0:	4b09      	ldr	r3, [pc, #36]	; (8006bd8 <LoopFillZerobss+0x28>)
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d3f9      	bcc.n	8006baa <FillZerobss>
 8006bb6:	f7ff ffb3 	bl	8006b20 <SystemInit>
 8006bba:	f000 f811 	bl	8006be0 <__libc_init_array>
 8006bbe:	f7ff fa39 	bl	8006034 <main>
 8006bc2:	4770      	bx	lr
 8006bc4:	20080000 	.word	0x20080000
 8006bc8:	08006c80 	.word	0x08006c80
 8006bcc:	20000000 	.word	0x20000000
 8006bd0:	20000014 	.word	0x20000014
 8006bd4:	20000014 	.word	0x20000014
 8006bd8:	20000368 	.word	0x20000368

08006bdc <CAN1_RX1_IRQHandler>:
 8006bdc:	e7fe      	b.n	8006bdc <CAN1_RX1_IRQHandler>
	...

08006be0 <__libc_init_array>:
 8006be0:	b570      	push	{r4, r5, r6, lr}
 8006be2:	4e0d      	ldr	r6, [pc, #52]	; (8006c18 <__libc_init_array+0x38>)
 8006be4:	4c0d      	ldr	r4, [pc, #52]	; (8006c1c <__libc_init_array+0x3c>)
 8006be6:	1ba4      	subs	r4, r4, r6
 8006be8:	10a4      	asrs	r4, r4, #2
 8006bea:	2500      	movs	r5, #0
 8006bec:	42a5      	cmp	r5, r4
 8006bee:	d109      	bne.n	8006c04 <__libc_init_array+0x24>
 8006bf0:	4e0b      	ldr	r6, [pc, #44]	; (8006c20 <__libc_init_array+0x40>)
 8006bf2:	4c0c      	ldr	r4, [pc, #48]	; (8006c24 <__libc_init_array+0x44>)
 8006bf4:	f000 f820 	bl	8006c38 <_init>
 8006bf8:	1ba4      	subs	r4, r4, r6
 8006bfa:	10a4      	asrs	r4, r4, #2
 8006bfc:	2500      	movs	r5, #0
 8006bfe:	42a5      	cmp	r5, r4
 8006c00:	d105      	bne.n	8006c0e <__libc_init_array+0x2e>
 8006c02:	bd70      	pop	{r4, r5, r6, pc}
 8006c04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c08:	4798      	blx	r3
 8006c0a:	3501      	adds	r5, #1
 8006c0c:	e7ee      	b.n	8006bec <__libc_init_array+0xc>
 8006c0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c12:	4798      	blx	r3
 8006c14:	3501      	adds	r5, #1
 8006c16:	e7f2      	b.n	8006bfe <__libc_init_array+0x1e>
 8006c18:	08006c78 	.word	0x08006c78
 8006c1c:	08006c78 	.word	0x08006c78
 8006c20:	08006c78 	.word	0x08006c78
 8006c24:	08006c7c 	.word	0x08006c7c

08006c28 <memset>:
 8006c28:	4402      	add	r2, r0
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d100      	bne.n	8006c32 <memset+0xa>
 8006c30:	4770      	bx	lr
 8006c32:	f803 1b01 	strb.w	r1, [r3], #1
 8006c36:	e7f9      	b.n	8006c2c <memset+0x4>

08006c38 <_init>:
 8006c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3a:	bf00      	nop
 8006c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3e:	bc08      	pop	{r3}
 8006c40:	469e      	mov	lr, r3
 8006c42:	4770      	bx	lr

08006c44 <_fini>:
 8006c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c46:	bf00      	nop
 8006c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4a:	bc08      	pop	{r3}
 8006c4c:	469e      	mov	lr, r3
 8006c4e:	4770      	bx	lr

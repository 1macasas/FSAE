
CANT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a38  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006c30  08006c30  00016c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c50  08006c50  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006c50  08006c50  00016c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c58  08006c58  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c58  08006c58  00016c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c5c  08006c5c  00016c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  20000014  08006c74  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08006c74  00020380  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136b9  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002959  00000000  00000000  000336fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001070  00000000  00000000  00036058  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f08  00000000  00000000  000370c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028baf  00000000  00000000  00037fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ef94  00000000  00000000  00060b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fda2b  00000000  00000000  0006fb13  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016d53e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043d0  00000000  00000000  0016d5bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000014 	.word	0x20000014
 8000214:	00000000 	.word	0x00000000
 8000218:	08006c18 	.word	0x08006c18

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000018 	.word	0x20000018
 8000234:	08006c18 	.word	0x08006c18

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <can1_Tx>:
// mi driver para enviar info por can
// le doy el ID y el mensaje a enviar, y me devuelve un 1 si se envio correctamente, o un cero si tuvo algun error


char can1_Tx(uint16_t Id ,uint8_t mensaje [],uint8_t bytes)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	6039      	str	r1, [r7, #0]
 8000542:	80fb      	strh	r3, [r7, #6]
 8000544:	4613      	mov	r3, r2
 8000546:	717b      	strb	r3, [r7, #5]

	  if(HAL_CAN_IsTxMessagePending(&hcan1, CAN_TX_MAILBOX0) == 0)
 8000548:	2101      	movs	r1, #1
 800054a:	4832      	ldr	r0, [pc, #200]	; (8000614 <can1_Tx+0xdc>)
 800054c:	f001 fc51 	bl	8001df2 <HAL_CAN_IsTxMessagePending>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d118      	bne.n	8000588 <can1_Tx+0x50>
	  {
	  pHeader.DLC=bytes;
 8000556:	797b      	ldrb	r3, [r7, #5]
 8000558:	4a2f      	ldr	r2, [pc, #188]	; (8000618 <can1_Tx+0xe0>)
 800055a:	6113      	str	r3, [r2, #16]
	  pHeader.IDE=CAN_ID_STD;
 800055c:	4b2e      	ldr	r3, [pc, #184]	; (8000618 <can1_Tx+0xe0>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
	  pHeader.RTR=CAN_RTR_DATA;
 8000562:	4b2d      	ldr	r3, [pc, #180]	; (8000618 <can1_Tx+0xe0>)
 8000564:	2200      	movs	r2, #0
 8000566:	60da      	str	r2, [r3, #12]
	  pHeader.StdId=Id;
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	4a2b      	ldr	r2, [pc, #172]	; (8000618 <can1_Tx+0xe0>)
 800056c:	6013      	str	r3, [r2, #0]
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);

		  if(HAL_CAN_AddTxMessage(&hcan1, &pHeader, mensaje, &TxMailbox1) != HAL_OK )
 800056e:	4b2b      	ldr	r3, [pc, #172]	; (800061c <can1_Tx+0xe4>)
 8000570:	683a      	ldr	r2, [r7, #0]
 8000572:	4929      	ldr	r1, [pc, #164]	; (8000618 <can1_Tx+0xe0>)
 8000574:	4827      	ldr	r0, [pc, #156]	; (8000614 <can1_Tx+0xdc>)
 8000576:	f001 fb61 	bl	8001c3c <HAL_CAN_AddTxMessage>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <can1_Tx+0x4c>
	  		{
	  				return HAL_ERROR;
 8000580:	2301      	movs	r3, #1
 8000582:	e042      	b.n	800060a <can1_Tx+0xd2>
	  		}
		  return HAL_OK;
 8000584:	2300      	movs	r3, #0
 8000586:	e040      	b.n	800060a <can1_Tx+0xd2>
	  }

	  else if(HAL_CAN_IsTxMessagePending(&hcan1, CAN_TX_MAILBOX1) == 0)
 8000588:	2102      	movs	r1, #2
 800058a:	4822      	ldr	r0, [pc, #136]	; (8000614 <can1_Tx+0xdc>)
 800058c:	f001 fc31 	bl	8001df2 <HAL_CAN_IsTxMessagePending>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d118      	bne.n	80005c8 <can1_Tx+0x90>
	  {
	  pHeader.DLC=bytes;
 8000596:	797b      	ldrb	r3, [r7, #5]
 8000598:	4a1f      	ldr	r2, [pc, #124]	; (8000618 <can1_Tx+0xe0>)
 800059a:	6113      	str	r3, [r2, #16]
	  pHeader.IDE=CAN_ID_STD;
 800059c:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <can1_Tx+0xe0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
	  pHeader.RTR=CAN_RTR_DATA;
 80005a2:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <can1_Tx+0xe0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
	  pHeader.StdId=Id;
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	4a1b      	ldr	r2, [pc, #108]	; (8000618 <can1_Tx+0xe0>)
 80005ac:	6013      	str	r3, [r2, #0]
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);

		  if(HAL_CAN_AddTxMessage(&hcan1, &pHeader, mensaje, &TxMailbox2) != HAL_OK )
 80005ae:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <can1_Tx+0xe8>)
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	4919      	ldr	r1, [pc, #100]	; (8000618 <can1_Tx+0xe0>)
 80005b4:	4817      	ldr	r0, [pc, #92]	; (8000614 <can1_Tx+0xdc>)
 80005b6:	f001 fb41 	bl	8001c3c <HAL_CAN_AddTxMessage>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <can1_Tx+0x8c>
	  		{
	  				return HAL_ERROR;
 80005c0:	2301      	movs	r3, #1
 80005c2:	e022      	b.n	800060a <can1_Tx+0xd2>
	  		}
		  return HAL_OK;
 80005c4:	2300      	movs	r3, #0
 80005c6:	e020      	b.n	800060a <can1_Tx+0xd2>

	  }
	  else if(HAL_CAN_IsTxMessagePending(&hcan1, CAN_TX_MAILBOX2) == 0)
 80005c8:	2104      	movs	r1, #4
 80005ca:	4812      	ldr	r0, [pc, #72]	; (8000614 <can1_Tx+0xdc>)
 80005cc:	f001 fc11 	bl	8001df2 <HAL_CAN_IsTxMessagePending>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d118      	bne.n	8000608 <can1_Tx+0xd0>
	  {
	  pHeader.DLC=bytes;
 80005d6:	797b      	ldrb	r3, [r7, #5]
 80005d8:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <can1_Tx+0xe0>)
 80005da:	6113      	str	r3, [r2, #16]
	  pHeader.IDE=CAN_ID_STD;
 80005dc:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <can1_Tx+0xe0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
	  pHeader.RTR=CAN_RTR_DATA;
 80005e2:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <can1_Tx+0xe0>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
	  pHeader.StdId=Id;
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <can1_Tx+0xe0>)
 80005ec:	6013      	str	r3, [r2, #0]
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);

		  if(HAL_CAN_AddTxMessage(&hcan1, &pHeader, mensaje, &TxMailbox3) != HAL_OK )
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <can1_Tx+0xec>)
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	4909      	ldr	r1, [pc, #36]	; (8000618 <can1_Tx+0xe0>)
 80005f4:	4807      	ldr	r0, [pc, #28]	; (8000614 <can1_Tx+0xdc>)
 80005f6:	f001 fb21 	bl	8001c3c <HAL_CAN_AddTxMessage>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <can1_Tx+0xcc>
	  		{
	  				return HAL_ERROR;
 8000600:	2301      	movs	r3, #1
 8000602:	e002      	b.n	800060a <can1_Tx+0xd2>
	  		}
		  return HAL_OK;
 8000604:	2300      	movs	r3, #0
 8000606:	e000      	b.n	800060a <can1_Tx+0xd2>
	  }
	  return HAL_ERROR;
 8000608:	2301      	movs	r3, #1
}
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	2000033c 	.word	0x2000033c
 8000618:	20000050 	.word	0x20000050
 800061c:	20000338 	.word	0x20000338
 8000620:	20000248 	.word	0x20000248
 8000624:	200001ec 	.word	0x200001ec

08000628 <run_motor_n>:
/*La funcion pone en movimiento el motor del nodo indicado, debe recibir
 *  el valor del nodo (1 o 2), el valor al cual se desea mover y el estado del nodo,
 *  si el nodo no se encuentra en estado operacional no se realiza accion*/

char run_motor_n(uint32_t pedal1,uint32_t pedal2)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
	static int now=0,last=0,node=1;
	uint32_t v,a,b,c,d;
	uint8_t VEL[8]; //velocidad a enviar por can.
		now=HAL_GetTick();
 8000632:	f000 fb3d 	bl	8000cb0 <HAL_GetTick>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	4b44      	ldr	r3, [pc, #272]	; (800074c <run_motor_n+0x124>)
 800063c:	601a      	str	r2, [r3, #0]
		// Actualizo valor de Velocidad
		if (now-last>50)			//ms??
 800063e:	4b43      	ldr	r3, [pc, #268]	; (800074c <run_motor_n+0x124>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4b43      	ldr	r3, [pc, #268]	; (8000750 <run_motor_n+0x128>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	2b32      	cmp	r3, #50	; 0x32
 800064a:	dd6d      	ble.n	8000728 <run_motor_n+0x100>
		{
		if (node==1)
 800064c:	4b41      	ldr	r3, [pc, #260]	; (8000754 <run_motor_n+0x12c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d10d      	bne.n	8000670 <run_motor_n+0x48>
			v=(pedal1*500)/4095;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800065a:	fb02 f203 	mul.w	r2, r2, r3
 800065e:	4b3e      	ldr	r3, [pc, #248]	; (8000758 <run_motor_n+0x130>)
 8000660:	fba3 1302 	umull	r1, r3, r3, r2
 8000664:	1ad2      	subs	r2, r2, r3
 8000666:	0852      	lsrs	r2, r2, #1
 8000668:	4413      	add	r3, r2
 800066a:	0adb      	lsrs	r3, r3, #11
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
 800066e:	e010      	b.n	8000692 <run_motor_n+0x6a>
		else if(node==2)
 8000670:	4b38      	ldr	r3, [pc, #224]	; (8000754 <run_motor_n+0x12c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b02      	cmp	r3, #2
 8000676:	d10c      	bne.n	8000692 <run_motor_n+0x6a>
			v=(pedal2*500)/4095;
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800067e:	fb02 f203 	mul.w	r2, r2, r3
 8000682:	4b35      	ldr	r3, [pc, #212]	; (8000758 <run_motor_n+0x130>)
 8000684:	fba3 1302 	umull	r1, r3, r3, r2
 8000688:	1ad2      	subs	r2, r2, r3
 800068a:	0852      	lsrs	r2, r2, #1
 800068c:	4413      	add	r3, r2
 800068e:	0adb      	lsrs	r3, r3, #11
 8000690:	627b      	str	r3, [r7, #36]	; 0x24

		if (v<10)
 8000692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000694:	2b09      	cmp	r3, #9
 8000696:	d801      	bhi.n	800069c <run_motor_n+0x74>
			v=0;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	; 0x24

		a=((v)&(0x000000FF));
 800069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	623b      	str	r3, [r7, #32]
		b=((v)&(0x0000FF00))>>(8);
 80006a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	61fb      	str	r3, [r7, #28]
		c=((v)&(0x00FF0000))>>(16);
 80006aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ac:	0c1b      	lsrs	r3, r3, #16
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	61bb      	str	r3, [r7, #24]
		d=((v)&(0xFF000000))>>(24);
 80006b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b4:	0e1b      	lsrs	r3, r3, #24
 80006b6:	617b      	str	r3, [r7, #20]
		VEL[0]=0x23;
 80006b8:	2323      	movs	r3, #35	; 0x23
 80006ba:	733b      	strb	r3, [r7, #12]
		VEL[1]=0xff;
 80006bc:	23ff      	movs	r3, #255	; 0xff
 80006be:	737b      	strb	r3, [r7, #13]
		VEL[2]=0x60;
 80006c0:	2360      	movs	r3, #96	; 0x60
 80006c2:	73bb      	strb	r3, [r7, #14]
		VEL[3]=0x00;  	 		//subindex
 80006c4:	2300      	movs	r3, #0
 80006c6:	73fb      	strb	r3, [r7, #15]
		VEL[4]=a;
 80006c8:	6a3b      	ldr	r3, [r7, #32]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	743b      	strb	r3, [r7, #16]
		VEL[5]=b;
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	747b      	strb	r3, [r7, #17]
		VEL[6]=c;
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	74bb      	strb	r3, [r7, #18]
		VEL[7]=d;
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	74fb      	strb	r3, [r7, #19]
			if(can1_Tx(0x600+node,VEL,8)!=HAL_OK)
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <run_motor_n+0x12c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	f107 010c 	add.w	r1, r7, #12
 80006f0:	2208      	movs	r2, #8
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff20 	bl	8000538 <can1_Tx>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d003      	beq.n	8000706 <run_motor_n+0xde>
				{
					Error_Handler();
 80006fe:	f005 ff17 	bl	8006530 <Error_Handler>
					return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	e01d      	b.n	8000742 <run_motor_n+0x11a>
				}
		last=now;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <run_motor_n+0x124>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a11      	ldr	r2, [pc, #68]	; (8000750 <run_motor_n+0x128>)
 800070c:	6013      	str	r3, [r2, #0]
		node++;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <run_motor_n+0x12c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	3301      	adds	r3, #1
 8000714:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <run_motor_n+0x12c>)
 8000716:	6013      	str	r3, [r2, #0]
		if(node==3)
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <run_motor_n+0x12c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b03      	cmp	r3, #3
 800071e:	d10f      	bne.n	8000740 <run_motor_n+0x118>
			node=1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <run_motor_n+0x12c>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	e00b      	b.n	8000740 <run_motor_n+0x118>
		}
		else if (now<last)
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <run_motor_n+0x124>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <run_motor_n+0x128>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	429a      	cmp	r2, r3
 8000732:	da03      	bge.n	800073c <run_motor_n+0x114>
			last=0;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <run_motor_n+0x128>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	e001      	b.n	8000740 <run_motor_n+0x118>
		else
		{
			return HAL_OK;
 800073c:	2300      	movs	r3, #0
 800073e:	e000      	b.n	8000742 <run_motor_n+0x11a>
		}
	return HAL_OK;
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3728      	adds	r7, #40	; 0x28
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000030 	.word	0x20000030
 8000750:	20000034 	.word	0x20000034
 8000754:	20000000 	.word	0x20000000
 8000758:	00100101 	.word	0x00100101

0800075c <send_ctrlwrd_1>:

int send_ctrlwrd_1(uint16_t node)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	80fb      	strh	r3, [r7, #6]
	uint8_t CTRL_WORD[8]; // activar motores
	CTRL_WORD[0]=0x2B;
 8000766:	232b      	movs	r3, #43	; 0x2b
 8000768:	723b      	strb	r3, [r7, #8]
	CTRL_WORD[1]=0x40;
 800076a:	2340      	movs	r3, #64	; 0x40
 800076c:	727b      	strb	r3, [r7, #9]
	CTRL_WORD[2]=0x60;
 800076e:	2360      	movs	r3, #96	; 0x60
 8000770:	72bb      	strb	r3, [r7, #10]
	CTRL_WORD[3]=0x00;
 8000772:	2300      	movs	r3, #0
 8000774:	72fb      	strb	r3, [r7, #11]
	CTRL_WORD[4]=0x06;
 8000776:	2306      	movs	r3, #6
 8000778:	733b      	strb	r3, [r7, #12]
	CTRL_WORD[5]=0x00;
 800077a:	2300      	movs	r3, #0
 800077c:	737b      	strb	r3, [r7, #13]
	CTRL_WORD[6]=0x00;
 800077e:	2300      	movs	r3, #0
 8000780:	73bb      	strb	r3, [r7, #14]
	CTRL_WORD[7]=0x00;
 8000782:	2300      	movs	r3, #0
 8000784:	73fb      	strb	r3, [r7, #15]
	if(can1_Tx(0x600+node,CTRL_WORD,8)!=HAL_OK)
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800078c:	b29b      	uxth	r3, r3
 800078e:	f107 0108 	add.w	r1, r7, #8
 8000792:	2208      	movs	r2, #8
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fecf 	bl	8000538 <can1_Tx>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d003      	beq.n	80007a8 <send_ctrlwrd_1+0x4c>
	{
		Error_Handler();
 80007a0:	f005 fec6 	bl	8006530 <Error_Handler>
		return HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e000      	b.n	80007aa <send_ctrlwrd_1+0x4e>
	}
	return HAL_OK;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <send_ctrlword_2>:

int send_ctrlword_2(uint16_t node)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b084      	sub	sp, #16
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	80fb      	strh	r3, [r7, #6]
	uint8_t CTRL_WORD[8]; // activar motores

	CTRL_WORD[0]=0x2B;
 80007bc:	232b      	movs	r3, #43	; 0x2b
 80007be:	723b      	strb	r3, [r7, #8]
	CTRL_WORD[1]=0x40;
 80007c0:	2340      	movs	r3, #64	; 0x40
 80007c2:	727b      	strb	r3, [r7, #9]
	CTRL_WORD[2]=0x60;
 80007c4:	2360      	movs	r3, #96	; 0x60
 80007c6:	72bb      	strb	r3, [r7, #10]
	CTRL_WORD[3]=0x00;
 80007c8:	2300      	movs	r3, #0
 80007ca:	72fb      	strb	r3, [r7, #11]
	CTRL_WORD[4]=0x0F;
 80007cc:	230f      	movs	r3, #15
 80007ce:	733b      	strb	r3, [r7, #12]
	CTRL_WORD[5]=0x00;
 80007d0:	2300      	movs	r3, #0
 80007d2:	737b      	strb	r3, [r7, #13]
	CTRL_WORD[6]=0x00;
 80007d4:	2300      	movs	r3, #0
 80007d6:	73bb      	strb	r3, [r7, #14]
	CTRL_WORD[7]=0x00;
 80007d8:	2300      	movs	r3, #0
 80007da:	73fb      	strb	r3, [r7, #15]

	if(can1_Tx(0x600+node,CTRL_WORD,8)!=HAL_OK)
 80007dc:	88fb      	ldrh	r3, [r7, #6]
 80007de:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	f107 0108 	add.w	r1, r7, #8
 80007e8:	2208      	movs	r2, #8
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fea4 	bl	8000538 <can1_Tx>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d003      	beq.n	80007fe <send_ctrlword_2+0x4c>
	{
		Error_Handler();
 80007f6:	f005 fe9b 	bl	8006530 <Error_Handler>
		return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <send_ctrlword_2+0x4e>
	}
	return HAL_OK;
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <analize_CAN_Rx>:

// Recibo Mensaje-- debo pasarle las variables donde voy a guardar el ID, y el mensaje:
char analize_CAN_Rx(uint32_t Id,uint8_t DLC,uint8_t mensaje [])
{
 8000808:	b480      	push	{r7}
 800080a:	b08b      	sub	sp, #44	; 0x2c
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	460b      	mov	r3, r1
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	72fb      	strb	r3, [r7, #11]
	uint32_t info,volatil;
	uint16_t index,command_byte=0;		//,subindex
 8000816:	2300      	movs	r3, #0
 8000818:	843b      	strh	r3, [r7, #32]
	uint8_t ccs,contador,nodo;

	/*Vamos a analizar casos: mensaje de bootup, y mensaje sdo, podriamos agregar pdo en un futuro*/
	/*ORDEN DE REVISION: MENSAJES DE MAYOR A MENOR ID*/
		if(Id>0x700)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000820:	d910      	bls.n	8000844 <analize_CAN_Rx+0x3c>
		{
			nodo=Id-0x700;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	77fb      	strb	r3, [r7, #31]
			if(status[nodo-1]==WFBOOTUP)
 8000826:	7ffb      	ldrb	r3, [r7, #31]
 8000828:	3b01      	subs	r3, #1
 800082a:	4a66      	ldr	r2, [pc, #408]	; (80009c4 <analize_CAN_Rx+0x1bc>)
 800082c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000830:	2b01      	cmp	r3, #1
 8000832:	f040 80c0 	bne.w	80009b6 <analize_CAN_Rx+0x1ae>
				status[nodo-1]=GOTOPREOPERATIONAL;
 8000836:	7ffb      	ldrb	r3, [r7, #31]
 8000838:	3b01      	subs	r3, #1
 800083a:	4a62      	ldr	r2, [pc, #392]	; (80009c4 <analize_CAN_Rx+0x1bc>)
 800083c:	2102      	movs	r1, #2
 800083e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000842:	e0b8      	b.n	80009b6 <analize_CAN_Rx+0x1ae>
		}
		// con revisar que sea mayor a cero  me alcanza porque sino hubiese entrado en el caso anterior
		else if (Id>0x600)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800084a:	d901      	bls.n	8000850 <analize_CAN_Rx+0x48>
			// ESTO NO DEBERIA PASAR, FILTRAR ANTES
		{
			return HAL_ERROR;
 800084c:	2301      	movs	r3, #1
 800084e:	e0b3      	b.n	80009b8 <analize_CAN_Rx+0x1b0>
		}
		else if (Id>0x580)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8000856:	f240 80ae 	bls.w	80009b6 <analize_CAN_Rx+0x1ae>
			// primero debo analizar el byte de comando
			// Analisis CANOPEN
		{
		nodo=Id-0x580;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	3b80      	subs	r3, #128	; 0x80
 8000860:	77fb      	strb	r3, [r7, #31]
		index= (mensaje[1]<<(8))|mensaje[2]	;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3301      	adds	r3, #1
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	021b      	lsls	r3, r3, #8
 800086a:	b21a      	sxth	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3302      	adds	r3, #2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21b      	sxth	r3, r3
 8000878:	83bb      	strh	r3, [r7, #28]
		command_byte=mensaje[0];
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	843b      	strh	r3, [r7, #32]
		ccs=(command_byte&ccs_MSK)>>(5);
 8000880:	8c3b      	ldrh	r3, [r7, #32]
 8000882:	115b      	asrs	r3, r3, #5
 8000884:	b2db      	uxtb	r3, r3
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	76fb      	strb	r3, [r7, #27]
		info=0;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
		volatil=0;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
		//	return HAL_OK;			// NO HAY ANALISIS POSIBLE EN ESTE MENSAJE
		//
		if(nodo<0)
			return HAL_ERROR;

		if(ccs==3)					// ESTA VERIFICACION NO DEBERIA ESTAR
 8000894:	7efb      	ldrb	r3, [r7, #27]
 8000896:	2b03      	cmp	r3, #3
 8000898:	d101      	bne.n	800089e <analize_CAN_Rx+0x96>
		{
			return HAL_OK;
 800089a:	2300      	movs	r3, #0
 800089c:	e08c      	b.n	80009b8 <analize_CAN_Rx+0x1b0>
		}
			for(contador=1;contador<(5);contador++)
 800089e:	2301      	movs	r3, #1
 80008a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80008a4:	e012      	b.n	80008cc <analize_CAN_Rx+0xc4>
			{
				volatil= mensaje[DLC-contador];
 80008a6:	7afa      	ldrb	r2, [r7, #11]
 80008a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	461a      	mov	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4413      	add	r3, r2
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	617b      	str	r3, [r7, #20]
				info=((info<<8)|volatil);
 80008b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ba:	021b      	lsls	r3, r3, #8
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	4313      	orrs	r3, r2
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
			for(contador=1;contador<(5);contador++)
 80008c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008c6:	3301      	adds	r3, #1
 80008c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80008cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d9e8      	bls.n	80008a6 <analize_CAN_Rx+0x9e>

			}
			if(info==101253137)
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	4a3c      	ldr	r2, [pc, #240]	; (80009c8 <analize_CAN_Rx+0x1c0>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d101      	bne.n	80008e0 <analize_CAN_Rx+0xd8>
			{
					return HAL_ERROR;
 80008dc:	2301      	movs	r3, #1
 80008de:	e06b      	b.n	80009b8 <analize_CAN_Rx+0x1b0>
			}
			if (index==VELOCITY)	        //velocity actual value
 80008e0:	8bbb      	ldrh	r3, [r7, #28]
 80008e2:	f646 4260 	movw	r2, #27744	; 0x6c60
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d106      	bne.n	80008f8 <analize_CAN_Rx+0xf0>
			{
				velocity[nodo-1]=info;
 80008ea:	7ffb      	ldrb	r3, [r7, #31]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008f0:	4936      	ldr	r1, [pc, #216]	; (80009cc <analize_CAN_Rx+0x1c4>)
 80008f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80008f6:	e05e      	b.n	80009b6 <analize_CAN_Rx+0x1ae>
			}
			else if (index==DCLINK)	    //DC Link actual voltage
 80008f8:	8bbb      	ldrh	r3, [r7, #28]
 80008fa:	f647 1260 	movw	r2, #31072	; 0x7960
 80008fe:	4293      	cmp	r3, r2
 8000900:	d106      	bne.n	8000910 <analize_CAN_Rx+0x108>
			{
				DcLink[nodo-1]=info;
 8000902:	7ffb      	ldrb	r3, [r7, #31]
 8000904:	3b01      	subs	r3, #1
 8000906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000908:	4931      	ldr	r1, [pc, #196]	; (80009d0 <analize_CAN_Rx+0x1c8>)
 800090a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800090e:	e052      	b.n	80009b6 <analize_CAN_Rx+0x1ae>
			}
			else if (index==DC_CURRENT) 	//DC Current
 8000910:	8bbb      	ldrh	r3, [r7, #28]
 8000912:	f242 3220 	movw	r2, #8992	; 0x2320
 8000916:	4293      	cmp	r3, r2
 8000918:	d106      	bne.n	8000928 <analize_CAN_Rx+0x120>
			{
				DcCurrent[nodo-1]=info;
 800091a:	7ffb      	ldrb	r3, [r7, #31]
 800091c:	3b01      	subs	r3, #1
 800091e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000920:	492c      	ldr	r1, [pc, #176]	; (80009d4 <analize_CAN_Rx+0x1cc>)
 8000922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000926:	e046      	b.n	80009b6 <analize_CAN_Rx+0x1ae>
			}
			else if (index==MOTOR_TEMP)		//Motor Temp
 8000928:	8bbb      	ldrh	r3, [r7, #28]
 800092a:	f242 5220 	movw	r2, #9504	; 0x2520
 800092e:	4293      	cmp	r3, r2
 8000930:	d106      	bne.n	8000940 <analize_CAN_Rx+0x138>
			{
				MotorTemp[nodo-1]=info;
 8000932:	7ffb      	ldrb	r3, [r7, #31]
 8000934:	3b01      	subs	r3, #1
 8000936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000938:	4927      	ldr	r1, [pc, #156]	; (80009d8 <analize_CAN_Rx+0x1d0>)
 800093a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800093e:	e03a      	b.n	80009b6 <analize_CAN_Rx+0x1ae>
			}
			else if (index==MOTOR_CRR)		// Motor Current Actual Value
 8000940:	8bbb      	ldrh	r3, [r7, #28]
 8000942:	f647 0260 	movw	r2, #30816	; 0x7860
 8000946:	4293      	cmp	r3, r2
 8000948:	d106      	bne.n	8000958 <analize_CAN_Rx+0x150>
			{
				MotorCrr[nodo-1]=info;
 800094a:	7ffb      	ldrb	r3, [r7, #31]
 800094c:	3b01      	subs	r3, #1
 800094e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000950:	4922      	ldr	r1, [pc, #136]	; (80009dc <analize_CAN_Rx+0x1d4>)
 8000952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000956:	e02e      	b.n	80009b6 <analize_CAN_Rx+0x1ae>
			}
			else if (index==TORQUE)		//Torque Actual Value
 8000958:	8bbb      	ldrh	r3, [r7, #28]
 800095a:	f247 7260 	movw	r2, #30560	; 0x7760
 800095e:	4293      	cmp	r3, r2
 8000960:	d106      	bne.n	8000970 <analize_CAN_Rx+0x168>
			{
				Torque[nodo-1]=info;
 8000962:	7ffb      	ldrb	r3, [r7, #31]
 8000964:	3b01      	subs	r3, #1
 8000966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000968:	491d      	ldr	r1, [pc, #116]	; (80009e0 <analize_CAN_Rx+0x1d8>)
 800096a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800096e:	e022      	b.n	80009b6 <analize_CAN_Rx+0x1ae>
			}
			else if (index==0x6C60)		//Velocity actual Value
 8000970:	8bbb      	ldrh	r3, [r7, #28]
 8000972:	f646 4260 	movw	r2, #27744	; 0x6c60
 8000976:	4293      	cmp	r3, r2
 8000978:	d106      	bne.n	8000988 <analize_CAN_Rx+0x180>
			{
				VelocityAct[nodo-1]=info;
 800097a:	7ffb      	ldrb	r3, [r7, #31]
 800097c:	3b01      	subs	r3, #1
 800097e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000980:	4918      	ldr	r1, [pc, #96]	; (80009e4 <analize_CAN_Rx+0x1dc>)
 8000982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000986:	e016      	b.n	80009b6 <analize_CAN_Rx+0x1ae>
			}
			else if (index==VELOCITY_AVG)		// Velocity actual value AVG
 8000988:	8bbb      	ldrh	r3, [r7, #28]
 800098a:	f248 6220 	movw	r2, #34336	; 0x8620
 800098e:	4293      	cmp	r3, r2
 8000990:	d106      	bne.n	80009a0 <analize_CAN_Rx+0x198>
			{
				VelocityAVG[nodo-1]=info;
 8000992:	7ffb      	ldrb	r3, [r7, #31]
 8000994:	3b01      	subs	r3, #1
 8000996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000998:	4913      	ldr	r1, [pc, #76]	; (80009e8 <analize_CAN_Rx+0x1e0>)
 800099a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800099e:	e00a      	b.n	80009b6 <analize_CAN_Rx+0x1ae>
			}
			else if (index==CONTROLLER_TEMP)		//controller temperature
 80009a0:	8bbb      	ldrh	r3, [r7, #28]
 80009a2:	f242 6220 	movw	r2, #9760	; 0x2620
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d105      	bne.n	80009b6 <analize_CAN_Rx+0x1ae>
			{
				ControllerTemp[nodo-1]=info;
 80009aa:	7ffb      	ldrb	r3, [r7, #31]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009b0:	490e      	ldr	r1, [pc, #56]	; (80009ec <analize_CAN_Rx+0x1e4>)
 80009b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}
		}

	  return HAL_OK ;
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	372c      	adds	r7, #44	; 0x2c
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	2000036c 	.word	0x2000036c
 80009c8:	06090011 	.word	0x06090011
 80009cc:	200002b4 	.word	0x200002b4
 80009d0:	20000180 	.word	0x20000180
 80009d4:	200002c4 	.word	0x200002c4
 80009d8:	20000378 	.word	0x20000378
 80009dc:	2000024c 	.word	0x2000024c
 80009e0:	20000178 	.word	0x20000178
 80009e4:	200002d4 	.word	0x200002d4
 80009e8:	20000370 	.word	0x20000370
 80009ec:	200001f8 	.word	0x200001f8

080009f0 <ask_for_info>:

/*La funcion envia el mensaje SDO para pedir data al nodo indicado*/

int ask_for_info(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
	/*inicio la variable en cero, voy a pedir 9 datos*/
	static int now=0,last=0;
	static uint8_t node=1,contador=1;
	uint8_t PIDO_INFO[8];
	/*primero command byte, luego index y subindex*/
	now=HAL_GetTick();
 80009f6:	f000 f95b 	bl	8000cb0 <HAL_GetTick>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b4d      	ldr	r3, [pc, #308]	; (8000b34 <ask_for_info+0x144>)
 8000a00:	601a      	str	r2, [r3, #0]
	if (now-last>10)			//ms??
 8000a02:	4b4c      	ldr	r3, [pc, #304]	; (8000b34 <ask_for_info+0x144>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	4b4c      	ldr	r3, [pc, #304]	; (8000b38 <ask_for_info+0x148>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	2b0a      	cmp	r3, #10
 8000a0e:	f340 808d 	ble.w	8000b2c <ask_for_info+0x13c>
	{
	PIDO_INFO[0]=0x40;
 8000a12:	2340      	movs	r3, #64	; 0x40
 8000a14:	703b      	strb	r3, [r7, #0]
	if (contador==1)	//velocity actual value
 8000a16:	4b49      	ldr	r3, [pc, #292]	; (8000b3c <ask_for_info+0x14c>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d104      	bne.n	8000a28 <ask_for_info+0x38>
	{
				PIDO_INFO[1]=0x87;
 8000a1e:	2387      	movs	r3, #135	; 0x87
 8000a20:	707b      	strb	r3, [r7, #1]
				PIDO_INFO[2]=0x20;
 8000a22:	2320      	movs	r3, #32
 8000a24:	70bb      	strb	r3, [r7, #2]
 8000a26:	e053      	b.n	8000ad0 <ask_for_info+0xe0>
	}
	else if (contador==2)	//DC Link Actual Voltage
 8000a28:	4b44      	ldr	r3, [pc, #272]	; (8000b3c <ask_for_info+0x14c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d104      	bne.n	8000a3a <ask_for_info+0x4a>
	{
				PIDO_INFO[1]=0x79;
 8000a30:	2379      	movs	r3, #121	; 0x79
 8000a32:	707b      	strb	r3, [r7, #1]
				PIDO_INFO[2]=0x60;
 8000a34:	2360      	movs	r3, #96	; 0x60
 8000a36:	70bb      	strb	r3, [r7, #2]
 8000a38:	e04a      	b.n	8000ad0 <ask_for_info+0xe0>
	}
	else if (contador==3)	//Dc Current
 8000a3a:	4b40      	ldr	r3, [pc, #256]	; (8000b3c <ask_for_info+0x14c>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b03      	cmp	r3, #3
 8000a40:	d104      	bne.n	8000a4c <ask_for_info+0x5c>
	{
				PIDO_INFO[1]=0x23;
 8000a42:	2323      	movs	r3, #35	; 0x23
 8000a44:	707b      	strb	r3, [r7, #1]
				PIDO_INFO[2]=0x20;
 8000a46:	2320      	movs	r3, #32
 8000a48:	70bb      	strb	r3, [r7, #2]
 8000a4a:	e041      	b.n	8000ad0 <ask_for_info+0xe0>
	}
	else if (contador==4)	//Motor Temperature
 8000a4c:	4b3b      	ldr	r3, [pc, #236]	; (8000b3c <ask_for_info+0x14c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b04      	cmp	r3, #4
 8000a52:	d104      	bne.n	8000a5e <ask_for_info+0x6e>
	{
				PIDO_INFO[1]=0x25;
 8000a54:	2325      	movs	r3, #37	; 0x25
 8000a56:	707b      	strb	r3, [r7, #1]
				PIDO_INFO[2]=0x20;
 8000a58:	2320      	movs	r3, #32
 8000a5a:	70bb      	strb	r3, [r7, #2]
 8000a5c:	e038      	b.n	8000ad0 <ask_for_info+0xe0>
	}
	else if (contador==5)	//Motor current actual value
 8000a5e:	4b37      	ldr	r3, [pc, #220]	; (8000b3c <ask_for_info+0x14c>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b05      	cmp	r3, #5
 8000a64:	d104      	bne.n	8000a70 <ask_for_info+0x80>
	{
				PIDO_INFO[1]=0x78;
 8000a66:	2378      	movs	r3, #120	; 0x78
 8000a68:	707b      	strb	r3, [r7, #1]
				PIDO_INFO[2]=0x60;
 8000a6a:	2360      	movs	r3, #96	; 0x60
 8000a6c:	70bb      	strb	r3, [r7, #2]
 8000a6e:	e02f      	b.n	8000ad0 <ask_for_info+0xe0>
	}
	else if (contador==6)	//Torque Actual Value
 8000a70:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <ask_for_info+0x14c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b06      	cmp	r3, #6
 8000a76:	d104      	bne.n	8000a82 <ask_for_info+0x92>
	{
				PIDO_INFO[1]=0x77;
 8000a78:	2377      	movs	r3, #119	; 0x77
 8000a7a:	707b      	strb	r3, [r7, #1]
				PIDO_INFO[2]=0x60;
 8000a7c:	2360      	movs	r3, #96	; 0x60
 8000a7e:	70bb      	strb	r3, [r7, #2]
 8000a80:	e026      	b.n	8000ad0 <ask_for_info+0xe0>
	}
	else if (contador==7)	//velocity actual value
 8000a82:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <ask_for_info+0x14c>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b07      	cmp	r3, #7
 8000a88:	d104      	bne.n	8000a94 <ask_for_info+0xa4>
	{
				PIDO_INFO[1]=0x6C;
 8000a8a:	236c      	movs	r3, #108	; 0x6c
 8000a8c:	707b      	strb	r3, [r7, #1]
				PIDO_INFO[2]=0x60;
 8000a8e:	2360      	movs	r3, #96	; 0x60
 8000a90:	70bb      	strb	r3, [r7, #2]
 8000a92:	e01d      	b.n	8000ad0 <ask_for_info+0xe0>
	}
	else if (contador==8)	//velocity actual value AVG
 8000a94:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <ask_for_info+0x14c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b08      	cmp	r3, #8
 8000a9a:	d104      	bne.n	8000aa6 <ask_for_info+0xb6>
	{
				PIDO_INFO[1]=0x86;
 8000a9c:	2386      	movs	r3, #134	; 0x86
 8000a9e:	707b      	strb	r3, [r7, #1]
				PIDO_INFO[2]=0x20;
 8000aa0:	2320      	movs	r3, #32
 8000aa2:	70bb      	strb	r3, [r7, #2]
 8000aa4:	e014      	b.n	8000ad0 <ask_for_info+0xe0>
	}
	else if (contador==9)	//controller temperature
 8000aa6:	4b25      	ldr	r3, [pc, #148]	; (8000b3c <ask_for_info+0x14c>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b09      	cmp	r3, #9
 8000aac:	d106      	bne.n	8000abc <ask_for_info+0xcc>
	{
				PIDO_INFO[1]=0x26;
 8000aae:	2326      	movs	r3, #38	; 0x26
 8000ab0:	707b      	strb	r3, [r7, #1]
				PIDO_INFO[2]=0x20;
 8000ab2:	2320      	movs	r3, #32
 8000ab4:	70bb      	strb	r3, [r7, #2]
				PIDO_INFO[3]=0x01;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	70fb      	strb	r3, [r7, #3]
 8000aba:	e009      	b.n	8000ad0 <ask_for_info+0xe0>
	}
	else if (contador==10)	//controller temperature
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <ask_for_info+0x14c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b0a      	cmp	r3, #10
 8000ac2:	d105      	bne.n	8000ad0 <ask_for_info+0xe0>
	{
				PIDO_INFO[1]=0x78;
 8000ac4:	2378      	movs	r3, #120	; 0x78
 8000ac6:	707b      	strb	r3, [r7, #1]
				PIDO_INFO[2]=0x60;
 8000ac8:	2360      	movs	r3, #96	; 0x60
 8000aca:	70bb      	strb	r3, [r7, #2]
				PIDO_INFO[3]=0xC1;
 8000acc:	23c1      	movs	r3, #193	; 0xc1
 8000ace:	70fb      	strb	r3, [r7, #3]
	}


	if(can1_Tx(0x600+node,PIDO_INFO,8)==HAL_OK)
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <ask_for_info+0x150>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	4639      	mov	r1, r7
 8000ade:	2208      	movs	r2, #8
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fd29 	bl	8000538 <can1_Tx>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d11f      	bne.n	8000b2c <ask_for_info+0x13c>
			{
				last=now;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <ask_for_info+0x144>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <ask_for_info+0x148>)
 8000af2:	6013      	str	r3, [r2, #0]
				node++;
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <ask_for_info+0x150>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	3301      	adds	r3, #1
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <ask_for_info+0x150>)
 8000afe:	701a      	strb	r2, [r3, #0]
				if(node==3)
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <ask_for_info+0x150>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b03      	cmp	r3, #3
 8000b06:	d102      	bne.n	8000b0e <ask_for_info+0x11e>
					node=1;
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <ask_for_info+0x150>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
				contador++;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <ask_for_info+0x14c>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	3301      	adds	r3, #1
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <ask_for_info+0x14c>)
 8000b18:	701a      	strb	r2, [r3, #0]
					if(contador>10)
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <ask_for_info+0x14c>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b0a      	cmp	r3, #10
 8000b20:	d902      	bls.n	8000b28 <ask_for_info+0x138>
						contador=0;
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <ask_for_info+0x14c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
				return HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e7ff      	b.n	8000b2c <ask_for_info+0x13c>
			}
	}

}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000038 	.word	0x20000038
 8000b38:	2000003c 	.word	0x2000003c
 8000b3c:	20000004 	.word	0x20000004
 8000b40:	20000005 	.word	0x20000005

08000b44 <send_NMT>:

char send_NMT(uint8_t command)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	/*Envio mensaje NMT para pasar a OPERACIONAL-PREOPERACIONAL*/
	uint8_t NMT[2];
	NMT[1]=0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	737b      	strb	r3, [r7, #13]
	if(command==START)
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d102      	bne.n	8000b5e <send_NMT+0x1a>
		NMT[0]=0x01;		        //START
 8000b58:	2301      	movs	r3, #1
 8000b5a:	733b      	strb	r3, [r7, #12]
 8000b5c:	e00a      	b.n	8000b74 <send_NMT+0x30>
	else if(command==RESTART)
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d102      	bne.n	8000b6a <send_NMT+0x26>
		NMT[0]=0X81;
 8000b64:	2381      	movs	r3, #129	; 0x81
 8000b66:	733b      	strb	r3, [r7, #12]
 8000b68:	e004      	b.n	8000b74 <send_NMT+0x30>
	else if(command==PREOPERATIONAL)
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b03      	cmp	r3, #3
 8000b6e:	d101      	bne.n	8000b74 <send_NMT+0x30>
		NMT[0]=0X80;
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	733b      	strb	r3, [r7, #12]
	can1_Tx(0x000,NMT,2);
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2202      	movs	r2, #2
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f7ff fcdb 	bl	8000538 <can1_Tx>

	HAL_Delay(20);			//DELAY BLOQUEANTE
 8000b82:	2014      	movs	r0, #20
 8000b84:	f000 f8a0 	bl	8000cc8 <HAL_Delay>

	return HAL_OK;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <change_state>:

char change_state(uint8_t nodo,uint8_t state, uint8_t status)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	71fb      	strb	r3, [r7, #7]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	71bb      	strb	r3, [r7, #6]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	717b      	strb	r3, [r7, #5]
		HAL_Delay(100);
 8000ba4:	2064      	movs	r0, #100	; 0x64
 8000ba6:	f000 f88f 	bl	8000cc8 <HAL_Delay>
		if(send_ctrlwrd_1(nodo)== HAL_OK)
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fdd4 	bl	800075c <send_ctrlwrd_1>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d102      	bne.n	8000bc0 <change_state+0x2e>
			//control_nodos[nodo-1]=SEMI_SEND;

		HAL_Delay(100);			//DELAY BLOQUEANTE
 8000bba:	2064      	movs	r0, #100	; 0x64
 8000bbc:	f000 f884 	bl	8000cc8 <HAL_Delay>

		if(send_ctrlword_2(nodo)==HAL_OK)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fdf4 	bl	80007b2 <send_ctrlword_2>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d102      	bne.n	8000bd6 <change_state+0x44>
			//control_nodos[nodo-1]=SEND;

		HAL_Delay(100);			//DELAY BLOQUEANTE
 8000bd0:	2064      	movs	r0, #100	; 0x64
 8000bd2:	f000 f879 	bl	8000cc8 <HAL_Delay>
		return SEND;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <Pc_Communication>:

#include "UART_COM.h"
extern UART_HandleTypeDef huart3;

int Pc_Communication(uint16_t Data[])
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	//uint16_t  size = sizeof(Data) / sizeof(Data[0]);
	// esto puede explotar, ver que concuerden los tamaños a analizar.
		//hago un casteo a info_motores. EL DMA transmite 8-16 bits
	if(HAL_UART_Transmit_DMA(&huart3, Data, UART_SIZE) != HAL_OK)
 8000be8:	220c      	movs	r2, #12
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	4806      	ldr	r0, [pc, #24]	; (8000c08 <Pc_Communication+0x28>)
 8000bee:	f004 f891 	bl	8004d14 <HAL_UART_Transmit_DMA>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <Pc_Communication+0x1c>
	{
		return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e000      	b.n	8000bfe <Pc_Communication+0x1e>
	}
		return HAL_OK;
 8000bfc:	2300      	movs	r3, #0

}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200000f8 	.word	0x200000f8

08000c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f001 fd4d 	bl	80026b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f000 f806 	bl	8000c28 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c1c:	f005 fce8 	bl	80065f0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x54>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x58>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 fd67 	bl	800271a <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00e      	b.n	8000c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d80a      	bhi.n	8000c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f001 fd2f 	bl	80026c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_InitTick+0x5c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000010 	.word	0x20000010
 8000c80:	2000000c 	.word	0x2000000c
 8000c84:	20000008 	.word	0x20000008

08000c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_IncTick+0x24>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	2000000c 	.word	0x2000000c
 8000cac:	20000068 	.word	0x20000068

08000cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_GetTick+0x14>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000068 	.word	0x20000068

08000cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff ffee 	bl	8000cb0 <HAL_GetTick>
 8000cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce0:	d005      	beq.n	8000cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_Delay+0x40>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4413      	add	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cee:	bf00      	nop
 8000cf0:	f7ff ffde 	bl	8000cb0 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d8f7      	bhi.n	8000cf0 <HAL_Delay+0x28>
  {
  }
}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000000c 	.word	0x2000000c

08000d0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e031      	b.n	8000d86 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d109      	bne.n	8000d3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f005 fc84 	bl	8006638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 0310 	and.w	r3, r3, #16
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d116      	bne.n	8000d78 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <HAL_ADC_Init+0x84>)
 8000d50:	4013      	ands	r3, r2
 8000d52:	f043 0202 	orr.w	r2, r3, #2
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f000 fbbc 	bl	80014d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f023 0303 	bic.w	r3, r3, #3
 8000d6e:	f043 0201 	orr.w	r2, r3, #1
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	641a      	str	r2, [r3, #64]	; 0x40
 8000d76:	e001      	b.n	8000d7c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	ffffeefd 	.word	0xffffeefd

08000d94 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	bf0c      	ite	eq
 8000db2:	2301      	moveq	r3, #1
 8000db4:	2300      	movne	r3, #0
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0320 	and.w	r3, r3, #32
 8000dc4:	2b20      	cmp	r3, #32
 8000dc6:	bf0c      	ite	eq
 8000dc8:	2301      	moveq	r3, #1
 8000dca:	2300      	movne	r3, #0
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d049      	beq.n	8000e6a <HAL_ADC_IRQHandler+0xd6>
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d046      	beq.n	8000e6a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	f003 0310 	and.w	r3, r3, #16
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d105      	bne.n	8000df4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d12b      	bne.n	8000e5a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d127      	bne.n	8000e5a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e10:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d006      	beq.n	8000e26 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d119      	bne.n	8000e5a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 0220 	bic.w	r2, r2, #32
 8000e34:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d105      	bne.n	8000e5a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f043 0201 	orr.w	r2, r3, #1
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 f9ca 	bl	80011f4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f06f 0212 	mvn.w	r2, #18
 8000e68:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	bf0c      	ite	eq
 8000e78:	2301      	moveq	r3, #1
 8000e7a:	2300      	movne	r3, #0
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8a:	2b80      	cmp	r3, #128	; 0x80
 8000e8c:	bf0c      	ite	eq
 8000e8e:	2301      	moveq	r3, #1
 8000e90:	2300      	movne	r3, #0
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d057      	beq.n	8000f4c <HAL_ADC_IRQHandler+0x1b8>
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d054      	beq.n	8000f4c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f003 0310 	and.w	r3, r3, #16
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d105      	bne.n	8000eba <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d139      	bne.n	8000f3c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ece:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d006      	beq.n	8000ee4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d12b      	bne.n	8000f3c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d124      	bne.n	8000f3c <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d11d      	bne.n	8000f3c <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d119      	bne.n	8000f3c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f16:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d105      	bne.n	8000f3c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	f043 0201 	orr.w	r2, r3, #1
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 fc47 	bl	80017d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f06f 020c 	mvn.w	r2, #12
 8000f4a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	bf0c      	ite	eq
 8000f5a:	2301      	moveq	r3, #1
 8000f5c:	2300      	movne	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f6c:	2b40      	cmp	r3, #64	; 0x40
 8000f6e:	bf0c      	ite	eq
 8000f70:	2301      	moveq	r3, #1
 8000f72:	2300      	movne	r3, #0
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d017      	beq.n	8000fae <HAL_ADC_IRQHandler+0x21a>
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d014      	beq.n	8000fae <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d10d      	bne.n	8000fae <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f93c 	bl	800121c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f06f 0201 	mvn.w	r2, #1
 8000fac:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0320 	and.w	r3, r3, #32
 8000fb8:	2b20      	cmp	r3, #32
 8000fba:	bf0c      	ite	eq
 8000fbc:	2301      	moveq	r3, #1
 8000fbe:	2300      	movne	r3, #0
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000fd2:	bf0c      	ite	eq
 8000fd4:	2301      	moveq	r3, #1
 8000fd6:	2300      	movne	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d015      	beq.n	800100e <HAL_ADC_IRQHandler+0x27a>
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d012      	beq.n	800100e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fec:	f043 0202 	orr.w	r2, r3, #2
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f06f 0220 	mvn.w	r2, #32
 8000ffc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 f916 	bl	8001230 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f06f 0220 	mvn.w	r2, #32
 800100c:	601a      	str	r2, [r3, #0]
  }
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800102e:	2b01      	cmp	r3, #1
 8001030:	d101      	bne.n	8001036 <HAL_ADC_Start_DMA+0x1e>
 8001032:	2302      	movs	r3, #2
 8001034:	e0c7      	b.n	80011c6 <HAL_ADC_Start_DMA+0x1ae>
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b01      	cmp	r3, #1
 800104a:	d018      	beq.n	800107e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0201 	orr.w	r2, r2, #1
 800105a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800105c:	4b5c      	ldr	r3, [pc, #368]	; (80011d0 <HAL_ADC_Start_DMA+0x1b8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a5c      	ldr	r2, [pc, #368]	; (80011d4 <HAL_ADC_Start_DMA+0x1bc>)
 8001062:	fba2 2303 	umull	r2, r3, r2, r3
 8001066:	0c9a      	lsrs	r2, r3, #18
 8001068:	4613      	mov	r3, r2
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	4413      	add	r3, r2
 800106e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001070:	e002      	b.n	8001078 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3b01      	subs	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f9      	bne.n	8001072 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b01      	cmp	r3, #1
 800108a:	f040 809b 	bne.w	80011c4 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001092:	4b51      	ldr	r3, [pc, #324]	; (80011d8 <HAL_ADC_Start_DMA+0x1c0>)
 8001094:	4013      	ands	r3, r2
 8001096:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d007      	beq.n	80010bc <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010c8:	d106      	bne.n	80010d8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f023 0206 	bic.w	r2, r3, #6
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	645a      	str	r2, [r3, #68]	; 0x44
 80010d6:	e002      	b.n	80010de <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2200      	movs	r2, #0
 80010dc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ea:	4a3c      	ldr	r2, [pc, #240]	; (80011dc <HAL_ADC_Start_DMA+0x1c4>)
 80010ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f2:	4a3b      	ldr	r2, [pc, #236]	; (80011e0 <HAL_ADC_Start_DMA+0x1c8>)
 80010f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010fa:	4a3a      	ldr	r2, [pc, #232]	; (80011e4 <HAL_ADC_Start_DMA+0x1cc>)
 80010fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001106:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001116:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	334c      	adds	r3, #76	; 0x4c
 8001132:	4619      	mov	r1, r3
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f001 fbaa 	bl	8002890 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800113c:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <HAL_ADC_Start_DMA+0x1d0>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 031f 	and.w	r3, r3, #31
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10f      	bne.n	8001168 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d136      	bne.n	80011c4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	e02d      	b.n	80011c4 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a1f      	ldr	r2, [pc, #124]	; (80011ec <HAL_ADC_Start_DMA+0x1d4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d10e      	bne.n	8001190 <HAL_ADC_Start_DMA+0x178>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d107      	bne.n	8001190 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800118e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001190:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_ADC_Start_DMA+0x1d0>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0310 	and.w	r3, r3, #16
 8001198:	2b00      	cmp	r3, #0
 800119a:	d113      	bne.n	80011c4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <HAL_ADC_Start_DMA+0x1d8>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d10e      	bne.n	80011c4 <HAL_ADC_Start_DMA+0x1ac>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d107      	bne.n	80011c4 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011c2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000010 	.word	0x20000010
 80011d4:	431bde83 	.word	0x431bde83
 80011d8:	fffff8fe 	.word	0xfffff8fe
 80011dc:	080016cd 	.word	0x080016cd
 80011e0:	08001787 	.word	0x08001787
 80011e4:	080017a3 	.word	0x080017a3
 80011e8:	40012300 	.word	0x40012300
 80011ec:	40012000 	.word	0x40012000
 80011f0:	40012200 	.word	0x40012200

080011f4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x1c>
 800125c:	2302      	movs	r3, #2
 800125e:	e12a      	b.n	80014b6 <HAL_ADC_ConfigChannel+0x272>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b09      	cmp	r3, #9
 800126e:	d93a      	bls.n	80012e6 <HAL_ADC_ConfigChannel+0xa2>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001278:	d035      	beq.n	80012e6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68d9      	ldr	r1, [r3, #12]
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	b29b      	uxth	r3, r3
 8001286:	461a      	mov	r2, r3
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	3b1e      	subs	r3, #30
 8001290:	2207      	movs	r2, #7
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	400a      	ands	r2, r1
 800129e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a87      	ldr	r2, [pc, #540]	; (80014c4 <HAL_ADC_ConfigChannel+0x280>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d10a      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68d9      	ldr	r1, [r3, #12]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	061a      	lsls	r2, r3, #24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012be:	e035      	b.n	800132c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68d9      	ldr	r1, [r3, #12]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	4603      	mov	r3, r0
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4403      	add	r3, r0
 80012d8:	3b1e      	subs	r3, #30
 80012da:	409a      	lsls	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012e4:	e022      	b.n	800132c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6919      	ldr	r1, [r3, #16]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	4613      	mov	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4413      	add	r3, r2
 80012fa:	2207      	movs	r2, #7
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43da      	mvns	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	400a      	ands	r2, r1
 8001308:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6919      	ldr	r1, [r3, #16]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	b29b      	uxth	r3, r3
 800131a:	4618      	mov	r0, r3
 800131c:	4603      	mov	r3, r0
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4403      	add	r3, r0
 8001322:	409a      	lsls	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b06      	cmp	r3, #6
 8001332:	d824      	bhi.n	800137e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	3b05      	subs	r3, #5
 8001346:	221f      	movs	r2, #31
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43da      	mvns	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	400a      	ands	r2, r1
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	b29b      	uxth	r3, r3
 8001362:	4618      	mov	r0, r3
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	3b05      	subs	r3, #5
 8001370:	fa00 f203 	lsl.w	r2, r0, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	635a      	str	r2, [r3, #52]	; 0x34
 800137c:	e04c      	b.n	8001418 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b0c      	cmp	r3, #12
 8001384:	d824      	bhi.n	80013d0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	3b23      	subs	r3, #35	; 0x23
 8001398:	221f      	movs	r2, #31
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43da      	mvns	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	400a      	ands	r2, r1
 80013a6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	3b23      	subs	r3, #35	; 0x23
 80013c2:	fa00 f203 	lsl.w	r2, r0, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	631a      	str	r2, [r3, #48]	; 0x30
 80013ce:	e023      	b.n	8001418 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	3b41      	subs	r3, #65	; 0x41
 80013e2:	221f      	movs	r2, #31
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43da      	mvns	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	400a      	ands	r2, r1
 80013f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	3b41      	subs	r3, #65	; 0x41
 800140c:	fa00 f203 	lsl.w	r2, r0, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a2a      	ldr	r2, [pc, #168]	; (80014c8 <HAL_ADC_ConfigChannel+0x284>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d10a      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x1f4>
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800142a:	d105      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <HAL_ADC_ConfigChannel+0x288>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4a26      	ldr	r2, [pc, #152]	; (80014cc <HAL_ADC_ConfigChannel+0x288>)
 8001432:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001436:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a22      	ldr	r2, [pc, #136]	; (80014c8 <HAL_ADC_ConfigChannel+0x284>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d109      	bne.n	8001456 <HAL_ADC_ConfigChannel+0x212>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b12      	cmp	r3, #18
 8001448:	d105      	bne.n	8001456 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <HAL_ADC_ConfigChannel+0x288>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4a1f      	ldr	r2, [pc, #124]	; (80014cc <HAL_ADC_ConfigChannel+0x288>)
 8001450:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001454:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a1b      	ldr	r2, [pc, #108]	; (80014c8 <HAL_ADC_ConfigChannel+0x284>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d125      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x268>
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a17      	ldr	r2, [pc, #92]	; (80014c4 <HAL_ADC_ConfigChannel+0x280>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d003      	beq.n	8001472 <HAL_ADC_ConfigChannel+0x22e>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b11      	cmp	r3, #17
 8001470:	d11c      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_ADC_ConfigChannel+0x288>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4a15      	ldr	r2, [pc, #84]	; (80014cc <HAL_ADC_ConfigChannel+0x288>)
 8001478:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800147c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <HAL_ADC_ConfigChannel+0x280>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d111      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_ADC_ConfigChannel+0x28c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a11      	ldr	r2, [pc, #68]	; (80014d4 <HAL_ADC_ConfigChannel+0x290>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	0c9a      	lsrs	r2, r3, #18
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800149e:	e002      	b.n	80014a6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f9      	bne.n	80014a0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	10000012 	.word	0x10000012
 80014c8:	40012000 	.word	0x40012000
 80014cc:	40012300 	.word	0x40012300
 80014d0:	20000010 	.word	0x20000010
 80014d4:	431bde83 	.word	0x431bde83

080014d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80014e0:	4b78      	ldr	r3, [pc, #480]	; (80016c4 <ADC_Init+0x1ec>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4a77      	ldr	r2, [pc, #476]	; (80016c4 <ADC_Init+0x1ec>)
 80014e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80014ea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80014ec:	4b75      	ldr	r3, [pc, #468]	; (80016c4 <ADC_Init+0x1ec>)
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4973      	ldr	r1, [pc, #460]	; (80016c4 <ADC_Init+0x1ec>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001508:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6859      	ldr	r1, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	021a      	lsls	r2, r3, #8
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800152c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6859      	ldr	r1, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800154e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6899      	ldr	r1, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68da      	ldr	r2, [r3, #12]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	4a58      	ldr	r2, [pc, #352]	; (80016c8 <ADC_Init+0x1f0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d022      	beq.n	80015b2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800157a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6899      	ldr	r1, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800159c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6899      	ldr	r1, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	e00f      	b.n	80015d2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0202 	bic.w	r2, r2, #2
 80015e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6899      	ldr	r1, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	005a      	lsls	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d01b      	beq.n	8001638 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800160e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800161e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6859      	ldr	r1, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	3b01      	subs	r3, #1
 800162c:	035a      	lsls	r2, r3, #13
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	e007      	b.n	8001648 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001646:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	3b01      	subs	r3, #1
 8001664:	051a      	lsls	r2, r3, #20
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800167c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6899      	ldr	r1, [r3, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800168a:	025a      	lsls	r2, r3, #9
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6899      	ldr	r1, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	029a      	lsls	r2, r3, #10
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40012300 	.word	0x40012300
 80016c8:	0f000001 	.word	0x0f000001

080016cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d13c      	bne.n	8001760 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d12b      	bne.n	8001758 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001704:	2b00      	cmp	r3, #0
 8001706:	d127      	bne.n	8001758 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001712:	2b00      	cmp	r3, #0
 8001714:	d006      	beq.n	8001724 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001720:	2b00      	cmp	r3, #0
 8001722:	d119      	bne.n	8001758 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0220 	bic.w	r2, r2, #32
 8001732:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d105      	bne.n	8001758 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	f043 0201 	orr.w	r2, r3, #1
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f7ff fd4b 	bl	80011f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800175e:	e00e      	b.n	800177e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f7ff fd5f 	bl	8001230 <HAL_ADC_ErrorCallback>
}
 8001772:	e004      	b.n	800177e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	4798      	blx	r3
}
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b084      	sub	sp, #16
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001792:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f7ff fd37 	bl	8001208 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b084      	sub	sp, #16
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2240      	movs	r2, #64	; 0x40
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	f043 0204 	orr.w	r2, r3, #4
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f7ff fd34 	bl	8001230 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017c8:	bf00      	nop
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e0ed      	b.n	80019d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f004 ffae 	bl	8006764 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 0202 	bic.w	r2, r2, #2
 8001816:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001818:	f7ff fa4a 	bl	8000cb0 <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800181e:	e012      	b.n	8001846 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001820:	f7ff fa46 	bl	8000cb0 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b0a      	cmp	r3, #10
 800182c:	d90b      	bls.n	8001846 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2205      	movs	r2, #5
 800183e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0c5      	b.n	80019d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1e5      	bne.n	8001820 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001864:	f7ff fa24 	bl	8000cb0 <HAL_GetTick>
 8001868:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800186a:	e012      	b.n	8001892 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800186c:	f7ff fa20 	bl	8000cb0 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b0a      	cmp	r3, #10
 8001878:	d90b      	bls.n	8001892 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2205      	movs	r2, #5
 800188a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e09f      	b.n	80019d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0e5      	beq.n	800186c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7e1b      	ldrb	r3, [r3, #24]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d108      	bne.n	80018ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	e007      	b.n	80018ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7e5b      	ldrb	r3, [r3, #25]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d108      	bne.n	80018e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	e007      	b.n	80018f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7e9b      	ldrb	r3, [r3, #26]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d108      	bne.n	800190e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0220 	orr.w	r2, r2, #32
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	e007      	b.n	800191e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0220 	bic.w	r2, r2, #32
 800191c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7edb      	ldrb	r3, [r3, #27]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d108      	bne.n	8001938 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0210 	bic.w	r2, r2, #16
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e007      	b.n	8001948 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0210 	orr.w	r2, r2, #16
 8001946:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7f1b      	ldrb	r3, [r3, #28]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d108      	bne.n	8001962 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0208 	orr.w	r2, r2, #8
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	e007      	b.n	8001972 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0208 	bic.w	r2, r2, #8
 8001970:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7f5b      	ldrb	r3, [r3, #29]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d108      	bne.n	800198c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f042 0204 	orr.w	r2, r2, #4
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	e007      	b.n	800199c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0204 	bic.w	r2, r2, #4
 800199a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	ea42 0103 	orr.w	r1, r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	1e5a      	subs	r2, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80019dc:	b480      	push	{r7}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019f2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80019f4:	7cfb      	ldrb	r3, [r7, #19]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d003      	beq.n	8001a02 <HAL_CAN_ConfigFilter+0x26>
 80019fa:	7cfb      	ldrb	r3, [r7, #19]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	f040 80c7 	bne.w	8001b90 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a69      	ldr	r2, [pc, #420]	; (8001bac <HAL_CAN_ConfigFilter+0x1d0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d001      	beq.n	8001a10 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001a0c:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <HAL_CAN_ConfigFilter+0x1d4>)
 8001a0e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a16:	f043 0201 	orr.w	r2, r3, #1
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	4a63      	ldr	r2, [pc, #396]	; (8001bb0 <HAL_CAN_ConfigFilter+0x1d4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d111      	bne.n	8001a4c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a2e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	431a      	orrs	r2, r3
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	2201      	movs	r2, #1
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	401a      	ands	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d123      	bne.n	8001abe <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	401a      	ands	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a98:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3248      	adds	r2, #72	; 0x48
 8001a9e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ab2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ab4:	6979      	ldr	r1, [r7, #20]
 8001ab6:	3348      	adds	r3, #72	; 0x48
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	440b      	add	r3, r1
 8001abc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d122      	bne.n	8001b0c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ae6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3248      	adds	r2, #72	; 0x48
 8001aec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b00:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b02:	6979      	ldr	r1, [r7, #20]
 8001b04:	3348      	adds	r3, #72	; 0x48
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	440b      	add	r3, r1
 8001b0a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d109      	bne.n	8001b28 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	401a      	ands	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b26:	e007      	b.n	8001b38 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	431a      	orrs	r2, r3
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001b52:	e007      	b.n	8001b64 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d107      	bne.n	8001b7c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	431a      	orrs	r2, r3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b82:	f023 0201 	bic.w	r2, r3, #1
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e006      	b.n	8001b9e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
  }
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	371c      	adds	r7, #28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40003400 	.word	0x40003400
 8001bb0:	40006400 	.word	0x40006400

08001bb4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d12e      	bne.n	8001c26 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001be0:	f7ff f866 	bl	8000cb0 <HAL_GetTick>
 8001be4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001be6:	e012      	b.n	8001c0e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001be8:	f7ff f862 	bl	8000cb0 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b0a      	cmp	r3, #10
 8001bf4:	d90b      	bls.n	8001c0e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2205      	movs	r2, #5
 8001c06:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e012      	b.n	8001c34 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1e5      	bne.n	8001be8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e006      	b.n	8001c34 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
  }
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	; 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c50:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c5a:	7ffb      	ldrb	r3, [r7, #31]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d003      	beq.n	8001c68 <HAL_CAN_AddTxMessage+0x2c>
 8001c60:	7ffb      	ldrb	r3, [r7, #31]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	f040 80b8 	bne.w	8001dd8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10a      	bne.n	8001c88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80a0 	beq.w	8001dc8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	0e1b      	lsrs	r3, r3, #24
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d907      	bls.n	8001ca8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e09e      	b.n	8001de6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001ca8:	2201      	movs	r2, #1
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	409a      	lsls	r2, r3
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10d      	bne.n	8001cd6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cc4:	68f9      	ldr	r1, [r7, #12]
 8001cc6:	6809      	ldr	r1, [r1, #0]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3318      	adds	r3, #24
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	440b      	add	r3, r1
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	e00f      	b.n	8001cf6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ce0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ce6:	68f9      	ldr	r1, [r7, #12]
 8001ce8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001cea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3318      	adds	r3, #24
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	440b      	add	r3, r1
 8001cf4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6819      	ldr	r1, [r3, #0]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	3318      	adds	r3, #24
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	440b      	add	r3, r1
 8001d06:	3304      	adds	r3, #4
 8001d08:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	7d1b      	ldrb	r3, [r3, #20]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d111      	bne.n	8001d36 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3318      	adds	r3, #24
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3304      	adds	r3, #4
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	6811      	ldr	r1, [r2, #0]
 8001d26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3318      	adds	r3, #24
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	440b      	add	r3, r1
 8001d32:	3304      	adds	r3, #4
 8001d34:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3307      	adds	r3, #7
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	061a      	lsls	r2, r3, #24
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3306      	adds	r3, #6
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	041b      	lsls	r3, r3, #16
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3305      	adds	r3, #5
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	4313      	orrs	r3, r2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	3204      	adds	r2, #4
 8001d56:	7812      	ldrb	r2, [r2, #0]
 8001d58:	4610      	mov	r0, r2
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	6811      	ldr	r1, [r2, #0]
 8001d5e:	ea43 0200 	orr.w	r2, r3, r0
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	440b      	add	r3, r1
 8001d68:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001d6c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3303      	adds	r3, #3
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	061a      	lsls	r2, r3, #24
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3302      	adds	r3, #2
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	041b      	lsls	r3, r3, #16
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3301      	adds	r3, #1
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	7812      	ldrb	r2, [r2, #0]
 8001d8e:	4610      	mov	r0, r2
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	6811      	ldr	r1, [r2, #0]
 8001d94:	ea43 0200 	orr.w	r2, r3, r0
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	440b      	add	r3, r1
 8001d9e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001da2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3318      	adds	r3, #24
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	4413      	add	r3, r2
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	6811      	ldr	r1, [r2, #0]
 8001db6:	f043 0201 	orr.w	r2, r3, #1
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3318      	adds	r3, #24
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	440b      	add	r3, r1
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e00e      	b.n	8001de6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e006      	b.n	8001de6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
  }
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	; 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b085      	sub	sp, #20
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e06:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e08:	7afb      	ldrb	r3, [r7, #11]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d002      	beq.n	8001e14 <HAL_CAN_IsTxMessagePending+0x22>
 8001e0e:	7afb      	ldrb	r3, [r7, #11]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d10b      	bne.n	8001e2c <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	069b      	lsls	r3, r3, #26
 8001e1e:	401a      	ands	r2, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	069b      	lsls	r3, r3, #26
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b087      	sub	sp, #28
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e4e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e50:	7dfb      	ldrb	r3, [r7, #23]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d003      	beq.n	8001e5e <HAL_CAN_GetRxMessage+0x24>
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	f040 80f3 	bne.w	8002044 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10e      	bne.n	8001e82 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d116      	bne.n	8001ea0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0e7      	b.n	8002052 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d107      	bne.n	8001ea0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0d8      	b.n	8002052 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	331b      	adds	r3, #27
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	4413      	add	r3, r2
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0204 	and.w	r2, r3, #4
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	331b      	adds	r3, #27
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	4413      	add	r3, r2
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	0d5b      	lsrs	r3, r3, #21
 8001ece:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	331b      	adds	r3, #27
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	4413      	add	r3, r2
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	08db      	lsrs	r3, r3, #3
 8001ee8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	331b      	adds	r3, #27
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	4413      	add	r3, r2
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0202 	and.w	r2, r3, #2
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	331b      	adds	r3, #27
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	4413      	add	r3, r2
 8001f12:	3304      	adds	r3, #4
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 020f 	and.w	r2, r3, #15
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	331b      	adds	r3, #27
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	4413      	add	r3, r2
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	331b      	adds	r3, #27
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	4413      	add	r3, r2
 8001f42:	3304      	adds	r3, #4
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	0c1b      	lsrs	r3, r3, #16
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0a1a      	lsrs	r2, r3, #8
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	0c1a      	lsrs	r2, r3, #16
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	3302      	adds	r3, #2
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0e1a      	lsrs	r2, r3, #24
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	3303      	adds	r3, #3
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	0a1a      	lsrs	r2, r3, #8
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	3305      	adds	r3, #5
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0c1a      	lsrs	r2, r3, #16
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	3306      	adds	r3, #6
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	4413      	add	r3, r2
 8002008:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	0e1a      	lsrs	r2, r3, #24
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	3307      	adds	r3, #7
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d108      	bne.n	8002030 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0220 	orr.w	r2, r2, #32
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	e007      	b.n	8002040 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691a      	ldr	r2, [r3, #16]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0220 	orr.w	r2, r2, #32
 800203e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	e006      	b.n	8002052 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
  }
}
 8002052:	4618      	mov	r0, r3
 8002054:	371c      	adds	r7, #28
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800205e:	b480      	push	{r7}
 8002060:	b085      	sub	sp, #20
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800206e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d002      	beq.n	800207c <HAL_CAN_ActivateNotification+0x1e>
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d109      	bne.n	8002090 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6959      	ldr	r1, [r3, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	e006      	b.n	800209e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
  }
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b08a      	sub	sp, #40	; 0x28
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d07c      	beq.n	80021ea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d023      	beq.n	8002142 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2201      	movs	r2, #1
 8002100:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f97d 	bl	800240c <HAL_CAN_TxMailbox0CompleteCallback>
 8002112:	e016      	b.n	8002142 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d004      	beq.n	8002128 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
 8002126:	e00c      	b.n	8002142 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d004      	beq.n	800213c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
 800213a:	e002      	b.n	8002142 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f983 	bl	8002448 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d024      	beq.n	8002196 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002154:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f95d 	bl	8002420 <HAL_CAN_TxMailbox1CompleteCallback>
 8002166:	e016      	b.n	8002196 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216e:	2b00      	cmp	r3, #0
 8002170:	d004      	beq.n	800217c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
 800217a:	e00c      	b.n	8002196 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002182:	2b00      	cmp	r3, #0
 8002184:	d004      	beq.n	8002190 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
 800218e:	e002      	b.n	8002196 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f963 	bl	800245c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d024      	beq.n	80021ea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f93d 	bl	8002434 <HAL_CAN_TxMailbox2CompleteCallback>
 80021ba:	e016      	b.n	80021ea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d004      	beq.n	80021d0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
 80021ce:	e00c      	b.n	80021ea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d004      	beq.n	80021e4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
 80021e2:	e002      	b.n	80021ea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f943 	bl	8002470 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00c      	beq.n	800220e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002204:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2210      	movs	r2, #16
 800220c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00b      	beq.n	8002230 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d006      	beq.n	8002230 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2208      	movs	r2, #8
 8002228:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f934 	bl	8002498 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d009      	beq.n	800224e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f91b 	bl	8002484 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00c      	beq.n	8002272 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	2b00      	cmp	r3, #0
 8002260:	d007      	beq.n	8002272 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002268:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2210      	movs	r2, #16
 8002270:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00b      	beq.n	8002294 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d006      	beq.n	8002294 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2208      	movs	r2, #8
 800228c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f916 	bl	80024c0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	2b00      	cmp	r3, #0
 800229c:	d009      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f8fd 	bl	80024ac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00b      	beq.n	80022d4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d006      	beq.n	80022d4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2210      	movs	r2, #16
 80022cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f900 	bl	80024d4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00b      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d006      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2208      	movs	r2, #8
 80022ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f8f9 	bl	80024e8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d075      	beq.n	80023ec <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b00      	cmp	r3, #0
 8002308:	d06c      	beq.n	80023e4 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	f043 0304 	orr.w	r3, r3, #4
 800235c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002364:	2b00      	cmp	r3, #0
 8002366:	d03d      	beq.n	80023e4 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800236e:	2b00      	cmp	r3, #0
 8002370:	d038      	beq.n	80023e4 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002378:	2b30      	cmp	r3, #48	; 0x30
 800237a:	d017      	beq.n	80023ac <HAL_CAN_IRQHandler+0x302>
 800237c:	2b30      	cmp	r3, #48	; 0x30
 800237e:	d804      	bhi.n	800238a <HAL_CAN_IRQHandler+0x2e0>
 8002380:	2b10      	cmp	r3, #16
 8002382:	d009      	beq.n	8002398 <HAL_CAN_IRQHandler+0x2ee>
 8002384:	2b20      	cmp	r3, #32
 8002386:	d00c      	beq.n	80023a2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002388:	e024      	b.n	80023d4 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800238a:	2b50      	cmp	r3, #80	; 0x50
 800238c:	d018      	beq.n	80023c0 <HAL_CAN_IRQHandler+0x316>
 800238e:	2b60      	cmp	r3, #96	; 0x60
 8002390:	d01b      	beq.n	80023ca <HAL_CAN_IRQHandler+0x320>
 8002392:	2b40      	cmp	r3, #64	; 0x40
 8002394:	d00f      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002396:	e01d      	b.n	80023d4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	f043 0308 	orr.w	r3, r3, #8
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023a0:	e018      	b.n	80023d4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	f043 0310 	orr.w	r3, r3, #16
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023aa:	e013      	b.n	80023d4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	f043 0320 	orr.w	r3, r3, #32
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023b4:	e00e      	b.n	80023d4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023be:	e009      	b.n	80023d4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023c8:	e004      	b.n	80023d4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023d2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023e2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2204      	movs	r2, #4
 80023ea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d008      	beq.n	8002404 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f87c 	bl	80024fc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002404:	bf00      	nop
 8002406:	3728      	adds	r7, #40	; 0x28
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <__NVIC_SetPriorityGrouping+0x40>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800252c:	4013      	ands	r3, r2
 800252e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <__NVIC_SetPriorityGrouping+0x44>)
 800253a:	4313      	orrs	r3, r2
 800253c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253e:	4a04      	ldr	r2, [pc, #16]	; (8002550 <__NVIC_SetPriorityGrouping+0x40>)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	60d3      	str	r3, [r2, #12]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000ed00 	.word	0xe000ed00
 8002554:	05fa0000 	.word	0x05fa0000

08002558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800255c:	4b04      	ldr	r3, [pc, #16]	; (8002570 <__NVIC_GetPriorityGrouping+0x18>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	f003 0307 	and.w	r3, r3, #7
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	2b00      	cmp	r3, #0
 8002584:	db0b      	blt.n	800259e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	4907      	ldr	r1, [pc, #28]	; (80025ac <__NVIC_EnableIRQ+0x38>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	2001      	movs	r0, #1
 8002596:	fa00 f202 	lsl.w	r2, r0, r2
 800259a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	e000e100 	.word	0xe000e100

080025b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	6039      	str	r1, [r7, #0]
 80025ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	db0a      	blt.n	80025da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	490c      	ldr	r1, [pc, #48]	; (80025fc <__NVIC_SetPriority+0x4c>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	0112      	lsls	r2, r2, #4
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	440b      	add	r3, r1
 80025d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d8:	e00a      	b.n	80025f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4908      	ldr	r1, [pc, #32]	; (8002600 <__NVIC_SetPriority+0x50>)
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	3b04      	subs	r3, #4
 80025e8:	0112      	lsls	r2, r2, #4
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	440b      	add	r3, r1
 80025ee:	761a      	strb	r2, [r3, #24]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000e100 	.word	0xe000e100
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	; 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f1c3 0307 	rsb	r3, r3, #7
 800261e:	2b04      	cmp	r3, #4
 8002620:	bf28      	it	cs
 8002622:	2304      	movcs	r3, #4
 8002624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3304      	adds	r3, #4
 800262a:	2b06      	cmp	r3, #6
 800262c:	d902      	bls.n	8002634 <NVIC_EncodePriority+0x30>
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3b03      	subs	r3, #3
 8002632:	e000      	b.n	8002636 <NVIC_EncodePriority+0x32>
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	f04f 32ff 	mov.w	r2, #4294967295
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43da      	mvns	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	401a      	ands	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800264c:	f04f 31ff 	mov.w	r1, #4294967295
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	43d9      	mvns	r1, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	4313      	orrs	r3, r2
         );
}
 800265e:	4618      	mov	r0, r3
 8002660:	3724      	adds	r7, #36	; 0x24
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3b01      	subs	r3, #1
 8002678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800267c:	d301      	bcc.n	8002682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800267e:	2301      	movs	r3, #1
 8002680:	e00f      	b.n	80026a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002682:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <SysTick_Config+0x40>)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800268a:	210f      	movs	r1, #15
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	f7ff ff8e 	bl	80025b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <SysTick_Config+0x40>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269a:	4b04      	ldr	r3, [pc, #16]	; (80026ac <SysTick_Config+0x40>)
 800269c:	2207      	movs	r2, #7
 800269e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	e000e010 	.word	0xe000e010

080026b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ff29 	bl	8002510 <__NVIC_SetPriorityGrouping>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	4603      	mov	r3, r0
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
 80026d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d8:	f7ff ff3e 	bl	8002558 <__NVIC_GetPriorityGrouping>
 80026dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	6978      	ldr	r0, [r7, #20]
 80026e4:	f7ff ff8e 	bl	8002604 <NVIC_EncodePriority>
 80026e8:	4602      	mov	r2, r0
 80026ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ee:	4611      	mov	r1, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff5d 	bl	80025b0 <__NVIC_SetPriority>
}
 80026f6:	bf00      	nop
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff31 	bl	8002574 <__NVIC_EnableIRQ>
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff ffa2 	bl	800266c <SysTick_Config>
 8002728:	4603      	mov	r3, r0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002740:	f7fe fab6 	bl	8000cb0 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e099      	b.n	8002884 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0201 	bic.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002770:	e00f      	b.n	8002792 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002772:	f7fe fa9d 	bl	8000cb0 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b05      	cmp	r3, #5
 800277e:	d908      	bls.n	8002792 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2203      	movs	r2, #3
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e078      	b.n	8002884 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e8      	bne.n	8002772 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	4b38      	ldr	r3, [pc, #224]	; (800288c <HAL_DMA_Init+0x158>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d107      	bne.n	80027fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	4313      	orrs	r3, r2
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f023 0307 	bic.w	r3, r3, #7
 8002812:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	2b04      	cmp	r3, #4
 8002824:	d117      	bne.n	8002856 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00e      	beq.n	8002856 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fa99 	bl	8002d70 <DMA_CheckFifoParam>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2240      	movs	r2, #64	; 0x40
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002852:	2301      	movs	r3, #1
 8002854:	e016      	b.n	8002884 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fa50 	bl	8002d04 <DMA_CalcBaseAndBitshift>
 8002864:	4603      	mov	r3, r0
 8002866:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286c:	223f      	movs	r2, #63	; 0x3f
 800286e:	409a      	lsls	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	e010803f 	.word	0xe010803f

08002890 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
 800289c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_DMA_Start_IT+0x26>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e048      	b.n	8002948 <HAL_DMA_Start_IT+0xb8>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d137      	bne.n	800293a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2202      	movs	r2, #2
 80028ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f9e2 	bl	8002ca8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	223f      	movs	r2, #63	; 0x3f
 80028ea:	409a      	lsls	r2, r3
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0216 	orr.w	r2, r2, #22
 80028fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800290e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0208 	orr.w	r2, r2, #8
 8002926:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e005      	b.n	8002946 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002942:	2302      	movs	r3, #2
 8002944:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002946:	7dfb      	ldrb	r3, [r7, #23]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d004      	beq.n	800296e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2280      	movs	r2, #128	; 0x80
 8002968:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e00c      	b.n	8002988 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2205      	movs	r2, #5
 8002972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80029a0:	4b92      	ldr	r3, [pc, #584]	; (8002bec <HAL_DMA_IRQHandler+0x258>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a92      	ldr	r2, [pc, #584]	; (8002bf0 <HAL_DMA_IRQHandler+0x25c>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0a9b      	lsrs	r3, r3, #10
 80029ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029be:	2208      	movs	r2, #8
 80029c0:	409a      	lsls	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d01a      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d013      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0204 	bic.w	r2, r2, #4
 80029e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	2208      	movs	r2, #8
 80029ee:	409a      	lsls	r2, r3
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f8:	f043 0201 	orr.w	r2, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a04:	2201      	movs	r2, #1
 8002a06:	409a      	lsls	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d012      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a22:	2201      	movs	r2, #1
 8002a24:	409a      	lsls	r2, r3
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2e:	f043 0202 	orr.w	r2, r3, #2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d012      	beq.n	8002a6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00b      	beq.n	8002a6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a58:	2204      	movs	r2, #4
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	f043 0204 	orr.w	r2, r3, #4
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	2210      	movs	r2, #16
 8002a72:	409a      	lsls	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d043      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d03c      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8e:	2210      	movs	r2, #16
 8002a90:	409a      	lsls	r2, r3
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d018      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d108      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d024      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	4798      	blx	r3
 8002ac2:	e01f      	b.n	8002b04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d01b      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	4798      	blx	r3
 8002ad4:	e016      	b.n	8002b04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d107      	bne.n	8002af4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0208 	bic.w	r2, r2, #8
 8002af2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b08:	2220      	movs	r2, #32
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 808e 	beq.w	8002c32 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 8086 	beq.w	8002c32 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b05      	cmp	r3, #5
 8002b3c:	d136      	bne.n	8002bac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0216 	bic.w	r2, r2, #22
 8002b4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d103      	bne.n	8002b6e <HAL_DMA_IRQHandler+0x1da>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0208 	bic.w	r2, r2, #8
 8002b7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b82:	223f      	movs	r2, #63	; 0x3f
 8002b84:	409a      	lsls	r2, r3
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d07d      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
        }
        return;
 8002baa:	e078      	b.n	8002c9e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d01c      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d108      	bne.n	8002bda <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d030      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	4798      	blx	r3
 8002bd8:	e02b      	b.n	8002c32 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d027      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	4798      	blx	r3
 8002bea:	e022      	b.n	8002c32 <HAL_DMA_IRQHandler+0x29e>
 8002bec:	20000010 	.word	0x20000010
 8002bf0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10f      	bne.n	8002c22 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0210 	bic.w	r2, r2, #16
 8002c10:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d032      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d022      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2205      	movs	r2, #5
 8002c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0201 	bic.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	3301      	adds	r3, #1
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d307      	bcc.n	8002c7a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1f2      	bne.n	8002c5e <HAL_DMA_IRQHandler+0x2ca>
 8002c78:	e000      	b.n	8002c7c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c7a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4798      	blx	r3
 8002c9c:	e000      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c9e:	bf00      	nop
    }
  }
}
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop

08002ca8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b40      	cmp	r3, #64	; 0x40
 8002cd4:	d108      	bne.n	8002ce8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ce6:	e007      	b.n	8002cf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	60da      	str	r2, [r3, #12]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	3b10      	subs	r3, #16
 8002d14:	4a13      	ldr	r2, [pc, #76]	; (8002d64 <DMA_CalcBaseAndBitshift+0x60>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d1e:	4a12      	ldr	r2, [pc, #72]	; (8002d68 <DMA_CalcBaseAndBitshift+0x64>)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4413      	add	r3, r2
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d908      	bls.n	8002d44 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <DMA_CalcBaseAndBitshift+0x68>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	1d1a      	adds	r2, r3, #4
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	659a      	str	r2, [r3, #88]	; 0x58
 8002d42:	e006      	b.n	8002d52 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <DMA_CalcBaseAndBitshift+0x68>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	aaaaaaab 	.word	0xaaaaaaab
 8002d68:	08006c30 	.word	0x08006c30
 8002d6c:	fffffc00 	.word	0xfffffc00

08002d70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d11f      	bne.n	8002dca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d855      	bhi.n	8002e3c <DMA_CheckFifoParam+0xcc>
 8002d90:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <DMA_CheckFifoParam+0x28>)
 8002d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d96:	bf00      	nop
 8002d98:	08002da9 	.word	0x08002da9
 8002d9c:	08002dbb 	.word	0x08002dbb
 8002da0:	08002da9 	.word	0x08002da9
 8002da4:	08002e3d 	.word	0x08002e3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d045      	beq.n	8002e40 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db8:	e042      	b.n	8002e40 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dc2:	d13f      	bne.n	8002e44 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc8:	e03c      	b.n	8002e44 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd2:	d121      	bne.n	8002e18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d836      	bhi.n	8002e48 <DMA_CheckFifoParam+0xd8>
 8002dda:	a201      	add	r2, pc, #4	; (adr r2, 8002de0 <DMA_CheckFifoParam+0x70>)
 8002ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de0:	08002df1 	.word	0x08002df1
 8002de4:	08002df7 	.word	0x08002df7
 8002de8:	08002df1 	.word	0x08002df1
 8002dec:	08002e09 	.word	0x08002e09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
      break;
 8002df4:	e02f      	b.n	8002e56 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d024      	beq.n	8002e4c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e06:	e021      	b.n	8002e4c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e10:	d11e      	bne.n	8002e50 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e16:	e01b      	b.n	8002e50 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d902      	bls.n	8002e24 <DMA_CheckFifoParam+0xb4>
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d003      	beq.n	8002e2a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e22:	e018      	b.n	8002e56 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
      break;
 8002e28:	e015      	b.n	8002e56 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00e      	beq.n	8002e54 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
      break;
 8002e3a:	e00b      	b.n	8002e54 <DMA_CheckFifoParam+0xe4>
      break;
 8002e3c:	bf00      	nop
 8002e3e:	e00a      	b.n	8002e56 <DMA_CheckFifoParam+0xe6>
      break;
 8002e40:	bf00      	nop
 8002e42:	e008      	b.n	8002e56 <DMA_CheckFifoParam+0xe6>
      break;
 8002e44:	bf00      	nop
 8002e46:	e006      	b.n	8002e56 <DMA_CheckFifoParam+0xe6>
      break;
 8002e48:	bf00      	nop
 8002e4a:	e004      	b.n	8002e56 <DMA_CheckFifoParam+0xe6>
      break;
 8002e4c:	bf00      	nop
 8002e4e:	e002      	b.n	8002e56 <DMA_CheckFifoParam+0xe6>
      break;   
 8002e50:	bf00      	nop
 8002e52:	e000      	b.n	8002e56 <DMA_CheckFifoParam+0xe6>
      break;
 8002e54:	bf00      	nop
    }
  } 
  
  return status; 
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b089      	sub	sp, #36	; 0x24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
 8002e82:	e175      	b.n	8003170 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e84:	2201      	movs	r2, #1
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	f040 8164 	bne.w	800316a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d00b      	beq.n	8002ec2 <HAL_GPIO_Init+0x5e>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d007      	beq.n	8002ec2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eb6:	2b11      	cmp	r3, #17
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b12      	cmp	r3, #18
 8002ec0:	d130      	bne.n	8002f24 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	2203      	movs	r2, #3
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ef8:	2201      	movs	r2, #1
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 0201 	and.w	r2, r3, #1
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d003      	beq.n	8002f64 <HAL_GPIO_Init+0x100>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b12      	cmp	r3, #18
 8002f62:	d123      	bne.n	8002fac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	08da      	lsrs	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3208      	adds	r2, #8
 8002f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	220f      	movs	r2, #15
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	08da      	lsrs	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3208      	adds	r2, #8
 8002fa6:	69b9      	ldr	r1, [r7, #24]
 8002fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0203 	and.w	r2, r3, #3
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 80be 	beq.w	800316a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fee:	4b65      	ldr	r3, [pc, #404]	; (8003184 <HAL_GPIO_Init+0x320>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	4a64      	ldr	r2, [pc, #400]	; (8003184 <HAL_GPIO_Init+0x320>)
 8002ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffa:	4b62      	ldr	r3, [pc, #392]	; (8003184 <HAL_GPIO_Init+0x320>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003006:	4a60      	ldr	r2, [pc, #384]	; (8003188 <HAL_GPIO_Init+0x324>)
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	089b      	lsrs	r3, r3, #2
 800300c:	3302      	adds	r3, #2
 800300e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	220f      	movs	r2, #15
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a57      	ldr	r2, [pc, #348]	; (800318c <HAL_GPIO_Init+0x328>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d037      	beq.n	80030a2 <HAL_GPIO_Init+0x23e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a56      	ldr	r2, [pc, #344]	; (8003190 <HAL_GPIO_Init+0x32c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d031      	beq.n	800309e <HAL_GPIO_Init+0x23a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a55      	ldr	r2, [pc, #340]	; (8003194 <HAL_GPIO_Init+0x330>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d02b      	beq.n	800309a <HAL_GPIO_Init+0x236>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a54      	ldr	r2, [pc, #336]	; (8003198 <HAL_GPIO_Init+0x334>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d025      	beq.n	8003096 <HAL_GPIO_Init+0x232>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a53      	ldr	r2, [pc, #332]	; (800319c <HAL_GPIO_Init+0x338>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d01f      	beq.n	8003092 <HAL_GPIO_Init+0x22e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a52      	ldr	r2, [pc, #328]	; (80031a0 <HAL_GPIO_Init+0x33c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d019      	beq.n	800308e <HAL_GPIO_Init+0x22a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a51      	ldr	r2, [pc, #324]	; (80031a4 <HAL_GPIO_Init+0x340>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d013      	beq.n	800308a <HAL_GPIO_Init+0x226>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a50      	ldr	r2, [pc, #320]	; (80031a8 <HAL_GPIO_Init+0x344>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00d      	beq.n	8003086 <HAL_GPIO_Init+0x222>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a4f      	ldr	r2, [pc, #316]	; (80031ac <HAL_GPIO_Init+0x348>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d007      	beq.n	8003082 <HAL_GPIO_Init+0x21e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a4e      	ldr	r2, [pc, #312]	; (80031b0 <HAL_GPIO_Init+0x34c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d101      	bne.n	800307e <HAL_GPIO_Init+0x21a>
 800307a:	2309      	movs	r3, #9
 800307c:	e012      	b.n	80030a4 <HAL_GPIO_Init+0x240>
 800307e:	230a      	movs	r3, #10
 8003080:	e010      	b.n	80030a4 <HAL_GPIO_Init+0x240>
 8003082:	2308      	movs	r3, #8
 8003084:	e00e      	b.n	80030a4 <HAL_GPIO_Init+0x240>
 8003086:	2307      	movs	r3, #7
 8003088:	e00c      	b.n	80030a4 <HAL_GPIO_Init+0x240>
 800308a:	2306      	movs	r3, #6
 800308c:	e00a      	b.n	80030a4 <HAL_GPIO_Init+0x240>
 800308e:	2305      	movs	r3, #5
 8003090:	e008      	b.n	80030a4 <HAL_GPIO_Init+0x240>
 8003092:	2304      	movs	r3, #4
 8003094:	e006      	b.n	80030a4 <HAL_GPIO_Init+0x240>
 8003096:	2303      	movs	r3, #3
 8003098:	e004      	b.n	80030a4 <HAL_GPIO_Init+0x240>
 800309a:	2302      	movs	r3, #2
 800309c:	e002      	b.n	80030a4 <HAL_GPIO_Init+0x240>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_GPIO_Init+0x240>
 80030a2:	2300      	movs	r3, #0
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	f002 0203 	and.w	r2, r2, #3
 80030aa:	0092      	lsls	r2, r2, #2
 80030ac:	4093      	lsls	r3, r2
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80030b4:	4934      	ldr	r1, [pc, #208]	; (8003188 <HAL_GPIO_Init+0x324>)
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	089b      	lsrs	r3, r3, #2
 80030ba:	3302      	adds	r3, #2
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030c2:	4b3c      	ldr	r3, [pc, #240]	; (80031b4 <HAL_GPIO_Init+0x350>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030e6:	4a33      	ldr	r2, [pc, #204]	; (80031b4 <HAL_GPIO_Init+0x350>)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030ec:	4b31      	ldr	r3, [pc, #196]	; (80031b4 <HAL_GPIO_Init+0x350>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003110:	4a28      	ldr	r2, [pc, #160]	; (80031b4 <HAL_GPIO_Init+0x350>)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003116:	4b27      	ldr	r3, [pc, #156]	; (80031b4 <HAL_GPIO_Init+0x350>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	43db      	mvns	r3, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4013      	ands	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800313a:	4a1e      	ldr	r2, [pc, #120]	; (80031b4 <HAL_GPIO_Init+0x350>)
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003140:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <HAL_GPIO_Init+0x350>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003164:	4a13      	ldr	r2, [pc, #76]	; (80031b4 <HAL_GPIO_Init+0x350>)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3301      	adds	r3, #1
 800316e:	61fb      	str	r3, [r7, #28]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2b0f      	cmp	r3, #15
 8003174:	f67f ae86 	bls.w	8002e84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003178:	bf00      	nop
 800317a:	3724      	adds	r7, #36	; 0x24
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	40023800 	.word	0x40023800
 8003188:	40013800 	.word	0x40013800
 800318c:	40020000 	.word	0x40020000
 8003190:	40020400 	.word	0x40020400
 8003194:	40020800 	.word	0x40020800
 8003198:	40020c00 	.word	0x40020c00
 800319c:	40021000 	.word	0x40021000
 80031a0:	40021400 	.word	0x40021400
 80031a4:	40021800 	.word	0x40021800
 80031a8:	40021c00 	.word	0x40021c00
 80031ac:	40022000 	.word	0x40022000
 80031b0:	40022400 	.word	0x40022400
 80031b4:	40013c00 	.word	0x40013c00

080031b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	887b      	ldrh	r3, [r7, #2]
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
 80031d4:	e001      	b.n	80031da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031d6:	2300      	movs	r3, #0
 80031d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031da:	7bfb      	ldrb	r3, [r7, #15]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	807b      	strh	r3, [r7, #2]
 80031f4:	4613      	mov	r3, r2
 80031f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031f8:	787b      	ldrb	r3, [r7, #1]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031fe:	887a      	ldrh	r2, [r7, #2]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003204:	e003      	b.n	800320e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003206:	887b      	ldrh	r3, [r7, #2]
 8003208:	041a      	lsls	r2, r3, #16
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	619a      	str	r2, [r3, #24]
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	460b      	mov	r3, r1
 8003224:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	887b      	ldrh	r3, [r7, #2]
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d004      	beq.n	800323c <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003232:	887b      	ldrh	r3, [r7, #2]
 8003234:	041a      	lsls	r2, r3, #16
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800323a:	e002      	b.n	8003242 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800323c:	887a      	ldrh	r2, [r7, #2]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	619a      	str	r2, [r3, #24]
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003258:	2300      	movs	r3, #0
 800325a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e29b      	b.n	800379e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 8087 	beq.w	8003382 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003274:	4b96      	ldr	r3, [pc, #600]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 030c 	and.w	r3, r3, #12
 800327c:	2b04      	cmp	r3, #4
 800327e:	d00c      	beq.n	800329a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003280:	4b93      	ldr	r3, [pc, #588]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 030c 	and.w	r3, r3, #12
 8003288:	2b08      	cmp	r3, #8
 800328a:	d112      	bne.n	80032b2 <HAL_RCC_OscConfig+0x62>
 800328c:	4b90      	ldr	r3, [pc, #576]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003294:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003298:	d10b      	bne.n	80032b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329a:	4b8d      	ldr	r3, [pc, #564]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d06c      	beq.n	8003380 <HAL_RCC_OscConfig+0x130>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d168      	bne.n	8003380 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e275      	b.n	800379e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ba:	d106      	bne.n	80032ca <HAL_RCC_OscConfig+0x7a>
 80032bc:	4b84      	ldr	r3, [pc, #528]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a83      	ldr	r2, [pc, #524]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 80032c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	e02e      	b.n	8003328 <HAL_RCC_OscConfig+0xd8>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10c      	bne.n	80032ec <HAL_RCC_OscConfig+0x9c>
 80032d2:	4b7f      	ldr	r3, [pc, #508]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a7e      	ldr	r2, [pc, #504]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 80032d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	4b7c      	ldr	r3, [pc, #496]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a7b      	ldr	r2, [pc, #492]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 80032e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	e01d      	b.n	8003328 <HAL_RCC_OscConfig+0xd8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032f4:	d10c      	bne.n	8003310 <HAL_RCC_OscConfig+0xc0>
 80032f6:	4b76      	ldr	r3, [pc, #472]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a75      	ldr	r2, [pc, #468]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 80032fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	4b73      	ldr	r3, [pc, #460]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a72      	ldr	r2, [pc, #456]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e00b      	b.n	8003328 <HAL_RCC_OscConfig+0xd8>
 8003310:	4b6f      	ldr	r3, [pc, #444]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a6e      	ldr	r2, [pc, #440]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 8003316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	4b6c      	ldr	r3, [pc, #432]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a6b      	ldr	r2, [pc, #428]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 8003322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d013      	beq.n	8003358 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fd fcbe 	bl	8000cb0 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003338:	f7fd fcba 	bl	8000cb0 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b64      	cmp	r3, #100	; 0x64
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e229      	b.n	800379e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334a:	4b61      	ldr	r3, [pc, #388]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0xe8>
 8003356:	e014      	b.n	8003382 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fd fcaa 	bl	8000cb0 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003360:	f7fd fca6 	bl	8000cb0 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e215      	b.n	800379e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003372:	4b57      	ldr	r3, [pc, #348]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x110>
 800337e:	e000      	b.n	8003382 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d069      	beq.n	8003462 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800338e:	4b50      	ldr	r3, [pc, #320]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00b      	beq.n	80033b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800339a:	4b4d      	ldr	r3, [pc, #308]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d11c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x190>
 80033a6:	4b4a      	ldr	r3, [pc, #296]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d116      	bne.n	80033e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b2:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d005      	beq.n	80033ca <HAL_RCC_OscConfig+0x17a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d001      	beq.n	80033ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e1e9      	b.n	800379e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ca:	4b41      	ldr	r3, [pc, #260]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	493d      	ldr	r1, [pc, #244]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033de:	e040      	b.n	8003462 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d023      	beq.n	8003430 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e8:	4b39      	ldr	r3, [pc, #228]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a38      	ldr	r2, [pc, #224]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fd fc5c 	bl	8000cb0 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033fc:	f7fd fc58 	bl	8000cb0 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e1c7      	b.n	800379e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340e:	4b30      	ldr	r3, [pc, #192]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341a:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4929      	ldr	r1, [pc, #164]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 800342a:	4313      	orrs	r3, r2
 800342c:	600b      	str	r3, [r1, #0]
 800342e:	e018      	b.n	8003462 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003430:	4b27      	ldr	r3, [pc, #156]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a26      	ldr	r2, [pc, #152]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 8003436:	f023 0301 	bic.w	r3, r3, #1
 800343a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fd fc38 	bl	8000cb0 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003444:	f7fd fc34 	bl	8000cb0 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e1a3      	b.n	800379e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003456:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d038      	beq.n	80034e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d019      	beq.n	80034aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003476:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 8003478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347a:	4a15      	ldr	r2, [pc, #84]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003482:	f7fd fc15 	bl	8000cb0 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348a:	f7fd fc11 	bl	8000cb0 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e180      	b.n	800379e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 800349e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x23a>
 80034a8:	e01a      	b.n	80034e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034aa:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 80034ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ae:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <HAL_RCC_OscConfig+0x280>)
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b6:	f7fd fbfb 	bl	8000cb0 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034bc:	e00a      	b.n	80034d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034be:	f7fd fbf7 	bl	8000cb0 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d903      	bls.n	80034d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e166      	b.n	800379e <HAL_RCC_OscConfig+0x54e>
 80034d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d4:	4b92      	ldr	r3, [pc, #584]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 80034d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1ee      	bne.n	80034be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80a4 	beq.w	8003636 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ee:	4b8c      	ldr	r3, [pc, #560]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10d      	bne.n	8003516 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fa:	4b89      	ldr	r3, [pc, #548]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	4a88      	ldr	r2, [pc, #544]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 8003500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003504:	6413      	str	r3, [r2, #64]	; 0x40
 8003506:	4b86      	ldr	r3, [pc, #536]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003512:	2301      	movs	r3, #1
 8003514:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003516:	4b83      	ldr	r3, [pc, #524]	; (8003724 <HAL_RCC_OscConfig+0x4d4>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351e:	2b00      	cmp	r3, #0
 8003520:	d118      	bne.n	8003554 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003522:	4b80      	ldr	r3, [pc, #512]	; (8003724 <HAL_RCC_OscConfig+0x4d4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a7f      	ldr	r2, [pc, #508]	; (8003724 <HAL_RCC_OscConfig+0x4d4>)
 8003528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800352c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800352e:	f7fd fbbf 	bl	8000cb0 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003536:	f7fd fbbb 	bl	8000cb0 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b64      	cmp	r3, #100	; 0x64
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e12a      	b.n	800379e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003548:	4b76      	ldr	r3, [pc, #472]	; (8003724 <HAL_RCC_OscConfig+0x4d4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f0      	beq.n	8003536 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d106      	bne.n	800356a <HAL_RCC_OscConfig+0x31a>
 800355c:	4b70      	ldr	r3, [pc, #448]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	4a6f      	ldr	r2, [pc, #444]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6713      	str	r3, [r2, #112]	; 0x70
 8003568:	e02d      	b.n	80035c6 <HAL_RCC_OscConfig+0x376>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10c      	bne.n	800358c <HAL_RCC_OscConfig+0x33c>
 8003572:	4b6b      	ldr	r3, [pc, #428]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	4a6a      	ldr	r2, [pc, #424]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 8003578:	f023 0301 	bic.w	r3, r3, #1
 800357c:	6713      	str	r3, [r2, #112]	; 0x70
 800357e:	4b68      	ldr	r3, [pc, #416]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	4a67      	ldr	r2, [pc, #412]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 8003584:	f023 0304 	bic.w	r3, r3, #4
 8003588:	6713      	str	r3, [r2, #112]	; 0x70
 800358a:	e01c      	b.n	80035c6 <HAL_RCC_OscConfig+0x376>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b05      	cmp	r3, #5
 8003592:	d10c      	bne.n	80035ae <HAL_RCC_OscConfig+0x35e>
 8003594:	4b62      	ldr	r3, [pc, #392]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 8003596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003598:	4a61      	ldr	r2, [pc, #388]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 800359a:	f043 0304 	orr.w	r3, r3, #4
 800359e:	6713      	str	r3, [r2, #112]	; 0x70
 80035a0:	4b5f      	ldr	r3, [pc, #380]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	4a5e      	ldr	r2, [pc, #376]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6713      	str	r3, [r2, #112]	; 0x70
 80035ac:	e00b      	b.n	80035c6 <HAL_RCC_OscConfig+0x376>
 80035ae:	4b5c      	ldr	r3, [pc, #368]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 80035b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b2:	4a5b      	ldr	r2, [pc, #364]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ba:	4b59      	ldr	r3, [pc, #356]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	4a58      	ldr	r2, [pc, #352]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 80035c0:	f023 0304 	bic.w	r3, r3, #4
 80035c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d015      	beq.n	80035fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ce:	f7fd fb6f 	bl	8000cb0 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d4:	e00a      	b.n	80035ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d6:	f7fd fb6b 	bl	8000cb0 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e0d8      	b.n	800379e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ec:	4b4c      	ldr	r3, [pc, #304]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0ee      	beq.n	80035d6 <HAL_RCC_OscConfig+0x386>
 80035f8:	e014      	b.n	8003624 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fa:	f7fd fb59 	bl	8000cb0 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003600:	e00a      	b.n	8003618 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fd fb55 	bl	8000cb0 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e0c2      	b.n	800379e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003618:	4b41      	ldr	r3, [pc, #260]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1ee      	bne.n	8003602 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d105      	bne.n	8003636 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362a:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	4a3c      	ldr	r2, [pc, #240]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 8003630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003634:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 80ae 	beq.w	800379c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003640:	4b37      	ldr	r3, [pc, #220]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 030c 	and.w	r3, r3, #12
 8003648:	2b08      	cmp	r3, #8
 800364a:	d06d      	beq.n	8003728 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d14b      	bne.n	80036ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003654:	4b32      	ldr	r3, [pc, #200]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a31      	ldr	r2, [pc, #196]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 800365a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800365e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fd fb26 	bl	8000cb0 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003668:	f7fd fb22 	bl	8000cb0 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e091      	b.n	800379e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367a:	4b29      	ldr	r3, [pc, #164]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69da      	ldr	r2, [r3, #28]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	019b      	lsls	r3, r3, #6
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	085b      	lsrs	r3, r3, #1
 800369e:	3b01      	subs	r3, #1
 80036a0:	041b      	lsls	r3, r3, #16
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	061b      	lsls	r3, r3, #24
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	071b      	lsls	r3, r3, #28
 80036b2:	491b      	ldr	r1, [pc, #108]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b8:	4b19      	ldr	r3, [pc, #100]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a18      	ldr	r2, [pc, #96]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 80036be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fd faf4 	bl	8000cb0 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fd faf0 	bl	8000cb0 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e05f      	b.n	800379e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036de:	4b10      	ldr	r3, [pc, #64]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0x47c>
 80036ea:	e057      	b.n	800379c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a0b      	ldr	r2, [pc, #44]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 80036f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7fd fada 	bl	8000cb0 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003700:	f7fd fad6 	bl	8000cb0 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e045      	b.n	800379e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003712:	4b03      	ldr	r3, [pc, #12]	; (8003720 <HAL_RCC_OscConfig+0x4d0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x4b0>
 800371e:	e03d      	b.n	800379c <HAL_RCC_OscConfig+0x54c>
 8003720:	40023800 	.word	0x40023800
 8003724:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003728:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <HAL_RCC_OscConfig+0x558>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d030      	beq.n	8003798 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003740:	429a      	cmp	r2, r3
 8003742:	d129      	bne.n	8003798 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374e:	429a      	cmp	r2, r3
 8003750:	d122      	bne.n	8003798 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003758:	4013      	ands	r3, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800375e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003760:	4293      	cmp	r3, r2
 8003762:	d119      	bne.n	8003798 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	3b01      	subs	r3, #1
 8003772:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d10f      	bne.n	8003798 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d107      	bne.n	8003798 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d001      	beq.n	800379c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800

080037ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0d0      	b.n	8003966 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037c4:	4b6a      	ldr	r3, [pc, #424]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d910      	bls.n	80037f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b67      	ldr	r3, [pc, #412]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 020f 	bic.w	r2, r3, #15
 80037da:	4965      	ldr	r1, [pc, #404]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e2:	4b63      	ldr	r3, [pc, #396]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0b8      	b.n	8003966 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d020      	beq.n	8003842 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800380c:	4b59      	ldr	r3, [pc, #356]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	4a58      	ldr	r2, [pc, #352]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 8003812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003816:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003824:	4b53      	ldr	r3, [pc, #332]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	4a52      	ldr	r2, [pc, #328]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 800382a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800382e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003830:	4b50      	ldr	r3, [pc, #320]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	494d      	ldr	r1, [pc, #308]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 800383e:	4313      	orrs	r3, r2
 8003840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d040      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d107      	bne.n	8003866 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003856:	4b47      	ldr	r3, [pc, #284]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d115      	bne.n	800388e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e07f      	b.n	8003966 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d107      	bne.n	800387e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386e:	4b41      	ldr	r3, [pc, #260]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e073      	b.n	8003966 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387e:	4b3d      	ldr	r3, [pc, #244]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e06b      	b.n	8003966 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800388e:	4b39      	ldr	r3, [pc, #228]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f023 0203 	bic.w	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4936      	ldr	r1, [pc, #216]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 800389c:	4313      	orrs	r3, r2
 800389e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a0:	f7fd fa06 	bl	8000cb0 <HAL_GetTick>
 80038a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a6:	e00a      	b.n	80038be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a8:	f7fd fa02 	bl	8000cb0 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e053      	b.n	8003966 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038be:	4b2d      	ldr	r3, [pc, #180]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 020c 	and.w	r2, r3, #12
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d1eb      	bne.n	80038a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038d0:	4b27      	ldr	r3, [pc, #156]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d210      	bcs.n	8003900 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b24      	ldr	r3, [pc, #144]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 020f 	bic.w	r2, r3, #15
 80038e6:	4922      	ldr	r1, [pc, #136]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ee:	4b20      	ldr	r3, [pc, #128]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e032      	b.n	8003966 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800390c:	4b19      	ldr	r3, [pc, #100]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	4916      	ldr	r1, [pc, #88]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 800391a:	4313      	orrs	r3, r2
 800391c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d009      	beq.n	800393e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800392a:	4b12      	ldr	r3, [pc, #72]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	490e      	ldr	r1, [pc, #56]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 800393a:	4313      	orrs	r3, r2
 800393c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800393e:	f000 f821 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 8003942:	4601      	mov	r1, r0
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	091b      	lsrs	r3, r3, #4
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	4a0a      	ldr	r2, [pc, #40]	; (8003978 <HAL_RCC_ClockConfig+0x1cc>)
 8003950:	5cd3      	ldrb	r3, [r2, r3]
 8003952:	fa21 f303 	lsr.w	r3, r1, r3
 8003956:	4a09      	ldr	r2, [pc, #36]	; (800397c <HAL_RCC_ClockConfig+0x1d0>)
 8003958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800395a:	4b09      	ldr	r3, [pc, #36]	; (8003980 <HAL_RCC_ClockConfig+0x1d4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7fd f962 	bl	8000c28 <HAL_InitTick>

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40023c00 	.word	0x40023c00
 8003974:	40023800 	.word	0x40023800
 8003978:	08006c38 	.word	0x08006c38
 800397c:	20000010 	.word	0x20000010
 8003980:	20000008 	.word	0x20000008

08003984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	2300      	movs	r3, #0
 8003994:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800399a:	4b63      	ldr	r3, [pc, #396]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d007      	beq.n	80039b6 <HAL_RCC_GetSysClockFreq+0x32>
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d008      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0x38>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f040 80b4 	bne.w	8003b18 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039b0:	4b5e      	ldr	r3, [pc, #376]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80039b2:	60bb      	str	r3, [r7, #8]
      break;
 80039b4:	e0b3      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039b6:	4b5e      	ldr	r3, [pc, #376]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80039b8:	60bb      	str	r3, [r7, #8]
      break;
 80039ba:	e0b0      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039bc:	4b5a      	ldr	r3, [pc, #360]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039c4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039c6:	4b58      	ldr	r3, [pc, #352]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d04a      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039d2:	4b55      	ldr	r3, [pc, #340]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	099b      	lsrs	r3, r3, #6
 80039d8:	f04f 0400 	mov.w	r4, #0
 80039dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	ea03 0501 	and.w	r5, r3, r1
 80039e8:	ea04 0602 	and.w	r6, r4, r2
 80039ec:	4629      	mov	r1, r5
 80039ee:	4632      	mov	r2, r6
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	f04f 0400 	mov.w	r4, #0
 80039f8:	0154      	lsls	r4, r2, #5
 80039fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039fe:	014b      	lsls	r3, r1, #5
 8003a00:	4619      	mov	r1, r3
 8003a02:	4622      	mov	r2, r4
 8003a04:	1b49      	subs	r1, r1, r5
 8003a06:	eb62 0206 	sbc.w	r2, r2, r6
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	f04f 0400 	mov.w	r4, #0
 8003a12:	0194      	lsls	r4, r2, #6
 8003a14:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a18:	018b      	lsls	r3, r1, #6
 8003a1a:	1a5b      	subs	r3, r3, r1
 8003a1c:	eb64 0402 	sbc.w	r4, r4, r2
 8003a20:	f04f 0100 	mov.w	r1, #0
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	00e2      	lsls	r2, r4, #3
 8003a2a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a2e:	00d9      	lsls	r1, r3, #3
 8003a30:	460b      	mov	r3, r1
 8003a32:	4614      	mov	r4, r2
 8003a34:	195b      	adds	r3, r3, r5
 8003a36:	eb44 0406 	adc.w	r4, r4, r6
 8003a3a:	f04f 0100 	mov.w	r1, #0
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	0262      	lsls	r2, r4, #9
 8003a44:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a48:	0259      	lsls	r1, r3, #9
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4614      	mov	r4, r2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	4621      	mov	r1, r4
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f04f 0400 	mov.w	r4, #0
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4623      	mov	r3, r4
 8003a5c:	f7fc fbec 	bl	8000238 <__aeabi_uldivmod>
 8003a60:	4603      	mov	r3, r0
 8003a62:	460c      	mov	r4, r1
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	e049      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a68:	4b2f      	ldr	r3, [pc, #188]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	099b      	lsrs	r3, r3, #6
 8003a6e:	f04f 0400 	mov.w	r4, #0
 8003a72:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	ea03 0501 	and.w	r5, r3, r1
 8003a7e:	ea04 0602 	and.w	r6, r4, r2
 8003a82:	4629      	mov	r1, r5
 8003a84:	4632      	mov	r2, r6
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	f04f 0400 	mov.w	r4, #0
 8003a8e:	0154      	lsls	r4, r2, #5
 8003a90:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a94:	014b      	lsls	r3, r1, #5
 8003a96:	4619      	mov	r1, r3
 8003a98:	4622      	mov	r2, r4
 8003a9a:	1b49      	subs	r1, r1, r5
 8003a9c:	eb62 0206 	sbc.w	r2, r2, r6
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	f04f 0400 	mov.w	r4, #0
 8003aa8:	0194      	lsls	r4, r2, #6
 8003aaa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003aae:	018b      	lsls	r3, r1, #6
 8003ab0:	1a5b      	subs	r3, r3, r1
 8003ab2:	eb64 0402 	sbc.w	r4, r4, r2
 8003ab6:	f04f 0100 	mov.w	r1, #0
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	00e2      	lsls	r2, r4, #3
 8003ac0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ac4:	00d9      	lsls	r1, r3, #3
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4614      	mov	r4, r2
 8003aca:	195b      	adds	r3, r3, r5
 8003acc:	eb44 0406 	adc.w	r4, r4, r6
 8003ad0:	f04f 0100 	mov.w	r1, #0
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	02a2      	lsls	r2, r4, #10
 8003ada:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003ade:	0299      	lsls	r1, r3, #10
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4614      	mov	r4, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f04f 0400 	mov.w	r4, #0
 8003aee:	461a      	mov	r2, r3
 8003af0:	4623      	mov	r3, r4
 8003af2:	f7fc fba1 	bl	8000238 <__aeabi_uldivmod>
 8003af6:	4603      	mov	r3, r0
 8003af8:	460c      	mov	r4, r1
 8003afa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003afc:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	0c1b      	lsrs	r3, r3, #16
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	3301      	adds	r3, #1
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b14:	60bb      	str	r3, [r7, #8]
      break;
 8003b16:	e002      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b18:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b1a:	60bb      	str	r3, [r7, #8]
      break;
 8003b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	00f42400 	.word	0x00f42400
 8003b30:	007a1200 	.word	0x007a1200

08003b34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b38:	4b03      	ldr	r3, [pc, #12]	; (8003b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	20000010 	.word	0x20000010

08003b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b50:	f7ff fff0 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b54:	4601      	mov	r1, r0
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	0a9b      	lsrs	r3, r3, #10
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4a03      	ldr	r2, [pc, #12]	; (8003b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b62:	5cd3      	ldrb	r3, [r2, r3]
 8003b64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	08006c48 	.word	0x08006c48

08003b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b78:	f7ff ffdc 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b7c:	4601      	mov	r1, r0
 8003b7e:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	0b5b      	lsrs	r3, r3, #13
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	4a03      	ldr	r2, [pc, #12]	; (8003b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b8a:	5cd3      	ldrb	r3, [r2, r3]
 8003b8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40023800 	.word	0x40023800
 8003b98:	08006c48 	.word	0x08006c48

08003b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d012      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bc4:	4b69      	ldr	r3, [pc, #420]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4a68      	ldr	r2, [pc, #416]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003bce:	6093      	str	r3, [r2, #8]
 8003bd0:	4b66      	ldr	r3, [pc, #408]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd8:	4964      	ldr	r1, [pc, #400]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003be6:	2301      	movs	r3, #1
 8003be8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d017      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bf6:	4b5d      	ldr	r3, [pc, #372]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c04:	4959      	ldr	r1, [pc, #356]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c14:	d101      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c16:	2301      	movs	r3, #1
 8003c18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c22:	2301      	movs	r3, #1
 8003c24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d017      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c32:	4b4e      	ldr	r3, [pc, #312]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	494a      	ldr	r1, [pc, #296]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c50:	d101      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c52:	2301      	movs	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 808b 	beq.w	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c80:	4b3a      	ldr	r3, [pc, #232]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	4a39      	ldr	r2, [pc, #228]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c8c:	4b37      	ldr	r3, [pc, #220]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c98:	4b35      	ldr	r3, [pc, #212]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a34      	ldr	r2, [pc, #208]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca4:	f7fd f804 	bl	8000cb0 <HAL_GetTick>
 8003ca8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cac:	f7fd f800 	bl	8000cb0 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	; 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e38d      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cbe:	4b2c      	ldr	r3, [pc, #176]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cca:	4b28      	ldr	r3, [pc, #160]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d035      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d02e      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ce8:	4b20      	ldr	r3, [pc, #128]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	4a1d      	ldr	r2, [pc, #116]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cfc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cfe:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	4a1a      	ldr	r2, [pc, #104]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d0a:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d10:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d114      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fc ffc8 	bl	8000cb0 <HAL_GetTick>
 8003d20:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d22:	e00a      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d24:	f7fc ffc4 	bl	8000cb0 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e34f      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0ee      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d52:	d111      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d60:	4b04      	ldr	r3, [pc, #16]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d62:	400b      	ands	r3, r1
 8003d64:	4901      	ldr	r1, [pc, #4]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	608b      	str	r3, [r1, #8]
 8003d6a:	e00b      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40007000 	.word	0x40007000
 8003d74:	0ffffcff 	.word	0x0ffffcff
 8003d78:	4bb3      	ldr	r3, [pc, #716]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4ab2      	ldr	r2, [pc, #712]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d7e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d82:	6093      	str	r3, [r2, #8]
 8003d84:	4bb0      	ldr	r3, [pc, #704]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d90:	49ad      	ldr	r1, [pc, #692]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0310 	and.w	r3, r3, #16
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d010      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003da2:	4ba9      	ldr	r3, [pc, #676]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003da8:	4aa7      	ldr	r2, [pc, #668]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003daa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003db2:	4ba5      	ldr	r3, [pc, #660]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	49a2      	ldr	r1, [pc, #648]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dd0:	4b9d      	ldr	r3, [pc, #628]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dde:	499a      	ldr	r1, [pc, #616]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003df2:	4b95      	ldr	r3, [pc, #596]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e00:	4991      	ldr	r1, [pc, #580]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e14:	4b8c      	ldr	r3, [pc, #560]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e22:	4989      	ldr	r1, [pc, #548]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e36:	4b84      	ldr	r3, [pc, #528]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	4980      	ldr	r1, [pc, #512]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e58:	4b7b      	ldr	r3, [pc, #492]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5e:	f023 0203 	bic.w	r2, r3, #3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	4978      	ldr	r1, [pc, #480]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e7a:	4b73      	ldr	r3, [pc, #460]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e80:	f023 020c 	bic.w	r2, r3, #12
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e88:	496f      	ldr	r1, [pc, #444]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e9c:	4b6a      	ldr	r3, [pc, #424]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eaa:	4967      	ldr	r1, [pc, #412]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ebe:	4b62      	ldr	r3, [pc, #392]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ecc:	495e      	ldr	r1, [pc, #376]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ee0:	4b59      	ldr	r3, [pc, #356]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eee:	4956      	ldr	r1, [pc, #344]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f02:	4b51      	ldr	r3, [pc, #324]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f10:	494d      	ldr	r1, [pc, #308]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f24:	4b48      	ldr	r3, [pc, #288]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f32:	4945      	ldr	r1, [pc, #276]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f46:	4b40      	ldr	r3, [pc, #256]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f54:	493c      	ldr	r1, [pc, #240]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f68:	4b37      	ldr	r3, [pc, #220]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f76:	4934      	ldr	r1, [pc, #208]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d011      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f8a:	4b2f      	ldr	r3, [pc, #188]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f90:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f98:	492b      	ldr	r1, [pc, #172]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fa8:	d101      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003faa:	2301      	movs	r3, #1
 8003fac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fca:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd8:	491b      	ldr	r1, [pc, #108]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00b      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fec:	4b16      	ldr	r3, [pc, #88]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ffc:	4912      	ldr	r1, [pc, #72]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00b      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004010:	4b0d      	ldr	r3, [pc, #52]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004016:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004020:	4909      	ldr	r1, [pc, #36]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00f      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004034:	4b04      	ldr	r3, [pc, #16]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800403a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004044:	e002      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800
 800404c:	4985      	ldr	r1, [pc, #532]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00b      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004060:	4b80      	ldr	r3, [pc, #512]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004066:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004070:	497c      	ldr	r1, [pc, #496]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d005      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004086:	f040 80d6 	bne.w	8004236 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800408a:	4b76      	ldr	r3, [pc, #472]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a75      	ldr	r2, [pc, #468]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004090:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004096:	f7fc fe0b 	bl	8000cb0 <HAL_GetTick>
 800409a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800409c:	e008      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800409e:	f7fc fe07 	bl	8000cb0 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b64      	cmp	r3, #100	; 0x64
 80040aa:	d901      	bls.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e194      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040b0:	4b6c      	ldr	r3, [pc, #432]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1f0      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d021      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x570>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d11d      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040d0:	4b64      	ldr	r3, [pc, #400]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d6:	0c1b      	lsrs	r3, r3, #16
 80040d8:	f003 0303 	and.w	r3, r3, #3
 80040dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040de:	4b61      	ldr	r3, [pc, #388]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e4:	0e1b      	lsrs	r3, r3, #24
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	019a      	lsls	r2, r3, #6
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	041b      	lsls	r3, r3, #16
 80040f6:	431a      	orrs	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	061b      	lsls	r3, r3, #24
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	071b      	lsls	r3, r3, #28
 8004104:	4957      	ldr	r1, [pc, #348]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d004      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004120:	d00a      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800412a:	2b00      	cmp	r3, #0
 800412c:	d02e      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004136:	d129      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004138:	4b4a      	ldr	r3, [pc, #296]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800413a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800413e:	0c1b      	lsrs	r3, r3, #16
 8004140:	f003 0303 	and.w	r3, r3, #3
 8004144:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004146:	4b47      	ldr	r3, [pc, #284]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414c:	0f1b      	lsrs	r3, r3, #28
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	019a      	lsls	r2, r3, #6
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	041b      	lsls	r3, r3, #16
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	061b      	lsls	r3, r3, #24
 8004166:	431a      	orrs	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	071b      	lsls	r3, r3, #28
 800416c:	493d      	ldr	r1, [pc, #244]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004174:	4b3b      	ldr	r3, [pc, #236]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800417a:	f023 021f 	bic.w	r2, r3, #31
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	3b01      	subs	r3, #1
 8004184:	4937      	ldr	r1, [pc, #220]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01d      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004198:	4b32      	ldr	r3, [pc, #200]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800419a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800419e:	0e1b      	lsrs	r3, r3, #24
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041a6:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ac:	0f1b      	lsrs	r3, r3, #28
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	019a      	lsls	r2, r3, #6
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	041b      	lsls	r3, r3, #16
 80041c0:	431a      	orrs	r2, r3
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	061b      	lsls	r3, r3, #24
 80041c6:	431a      	orrs	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	071b      	lsls	r3, r3, #28
 80041cc:	4925      	ldr	r1, [pc, #148]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d011      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	019a      	lsls	r2, r3, #6
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	041b      	lsls	r3, r3, #16
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	061b      	lsls	r3, r3, #24
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	071b      	lsls	r3, r3, #28
 80041fc:	4919      	ldr	r1, [pc, #100]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004204:	4b17      	ldr	r3, [pc, #92]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a16      	ldr	r2, [pc, #88]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800420a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800420e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004210:	f7fc fd4e 	bl	8000cb0 <HAL_GetTick>
 8004214:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004216:	e008      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004218:	f7fc fd4a 	bl	8000cb0 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b64      	cmp	r3, #100	; 0x64
 8004224:	d901      	bls.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e0d7      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800422a:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b01      	cmp	r3, #1
 800423a:	f040 80cd 	bne.w	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a08      	ldr	r2, [pc, #32]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800424a:	f7fc fd31 	bl	8000cb0 <HAL_GetTick>
 800424e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004250:	e00a      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004252:	f7fc fd2d 	bl	8000cb0 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b64      	cmp	r3, #100	; 0x64
 800425e:	d903      	bls.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e0ba      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004264:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004268:	4b5e      	ldr	r3, [pc, #376]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004274:	d0ed      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d009      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004292:	2b00      	cmp	r3, #0
 8004294:	d02e      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	2b00      	cmp	r3, #0
 800429c:	d12a      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800429e:	4b51      	ldr	r3, [pc, #324]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	0c1b      	lsrs	r3, r3, #16
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042ac:	4b4d      	ldr	r3, [pc, #308]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b2:	0f1b      	lsrs	r3, r3, #28
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	019a      	lsls	r2, r3, #6
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	041b      	lsls	r3, r3, #16
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	061b      	lsls	r3, r3, #24
 80042cc:	431a      	orrs	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	071b      	lsls	r3, r3, #28
 80042d2:	4944      	ldr	r1, [pc, #272]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042da:	4b42      	ldr	r3, [pc, #264]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80042dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	3b01      	subs	r3, #1
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	493d      	ldr	r1, [pc, #244]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d022      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004304:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004308:	d11d      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800430a:	4b36      	ldr	r3, [pc, #216]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800430c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004310:	0e1b      	lsrs	r3, r3, #24
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004318:	4b32      	ldr	r3, [pc, #200]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431e:	0f1b      	lsrs	r3, r3, #28
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	019a      	lsls	r2, r3, #6
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	041b      	lsls	r3, r3, #16
 8004332:	431a      	orrs	r2, r3
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	061b      	lsls	r3, r3, #24
 8004338:	431a      	orrs	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	071b      	lsls	r3, r3, #28
 800433e:	4929      	ldr	r1, [pc, #164]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d028      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004352:	4b24      	ldr	r3, [pc, #144]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004358:	0e1b      	lsrs	r3, r3, #24
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004360:	4b20      	ldr	r3, [pc, #128]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	0c1b      	lsrs	r3, r3, #16
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	019a      	lsls	r2, r3, #6
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	041b      	lsls	r3, r3, #16
 8004378:	431a      	orrs	r2, r3
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	061b      	lsls	r3, r3, #24
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	071b      	lsls	r3, r3, #28
 8004386:	4917      	ldr	r1, [pc, #92]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800438e:	4b15      	ldr	r3, [pc, #84]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004394:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	4911      	ldr	r1, [pc, #68]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80043a4:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a0e      	ldr	r2, [pc, #56]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b0:	f7fc fc7e 	bl	8000cb0 <HAL_GetTick>
 80043b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043b6:	e008      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043b8:	f7fc fc7a 	bl	8000cb0 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b64      	cmp	r3, #100	; 0x64
 80043c4:	d901      	bls.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e007      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043ca:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043d6:	d1ef      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3720      	adds	r7, #32
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40023800 	.word	0x40023800

080043e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e01d      	b.n	8004436 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f002 f9f4 	bl	80067fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3304      	adds	r3, #4
 8004424:	4619      	mov	r1, r3
 8004426:	4610      	mov	r0, r2
 8004428:	f000 fa40 	bl	80048ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0201 	orr.w	r2, r2, #1
 8004456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <HAL_TIM_Base_Start_IT+0x50>)
 8004460:	4013      	ands	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b06      	cmp	r3, #6
 8004468:	d00b      	beq.n	8004482 <HAL_TIM_Base_Start_IT+0x42>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004470:	d007      	beq.n	8004482 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0201 	orr.w	r2, r2, #1
 8004480:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	00010007 	.word	0x00010007

08004494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d122      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d11b      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0202 	mvn.w	r2, #2
 80044c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f9ca 	bl	8004870 <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f9bc 	bl	800485c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f9cd 	bl	8004884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d122      	bne.n	8004544 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b04      	cmp	r3, #4
 800450a:	d11b      	bne.n	8004544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0204 	mvn.w	r2, #4
 8004514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2202      	movs	r2, #2
 800451a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9a0 	bl	8004870 <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f992 	bl	800485c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f9a3 	bl	8004884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b08      	cmp	r3, #8
 8004550:	d122      	bne.n	8004598 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b08      	cmp	r3, #8
 800455e:	d11b      	bne.n	8004598 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0208 	mvn.w	r2, #8
 8004568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2204      	movs	r2, #4
 800456e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f976 	bl	8004870 <HAL_TIM_IC_CaptureCallback>
 8004584:	e005      	b.n	8004592 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f968 	bl	800485c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f979 	bl	8004884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b10      	cmp	r3, #16
 80045a4:	d122      	bne.n	80045ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	2b10      	cmp	r3, #16
 80045b2:	d11b      	bne.n	80045ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0210 	mvn.w	r2, #16
 80045bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2208      	movs	r2, #8
 80045c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f94c 	bl	8004870 <HAL_TIM_IC_CaptureCallback>
 80045d8:	e005      	b.n	80045e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f93e 	bl	800485c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f94f 	bl	8004884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d10e      	bne.n	8004618 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b01      	cmp	r3, #1
 8004606:	d107      	bne.n	8004618 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f06f 0201 	mvn.w	r2, #1
 8004610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f918 	bl	8004848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d10e      	bne.n	8004644 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004630:	2b80      	cmp	r3, #128	; 0x80
 8004632:	d107      	bne.n	8004644 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800463c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fb06 	bl	8004c50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004652:	d10e      	bne.n	8004672 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465e:	2b80      	cmp	r3, #128	; 0x80
 8004660:	d107      	bne.n	8004672 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800466a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 faf9 	bl	8004c64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467c:	2b40      	cmp	r3, #64	; 0x40
 800467e:	d10e      	bne.n	800469e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b40      	cmp	r3, #64	; 0x40
 800468c:	d107      	bne.n	800469e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f8fd 	bl	8004898 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d10e      	bne.n	80046ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d107      	bne.n	80046ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f06f 0220 	mvn.w	r2, #32
 80046c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fab9 	bl	8004c3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_TIM_ConfigClockSource+0x18>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e0a6      	b.n	800483a <HAL_TIM_ConfigClockSource+0x166>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4b4f      	ldr	r3, [pc, #316]	; (8004844 <HAL_TIM_ConfigClockSource+0x170>)
 8004708:	4013      	ands	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004712:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b40      	cmp	r3, #64	; 0x40
 8004722:	d067      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0x120>
 8004724:	2b40      	cmp	r3, #64	; 0x40
 8004726:	d80b      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x6c>
 8004728:	2b10      	cmp	r3, #16
 800472a:	d073      	beq.n	8004814 <HAL_TIM_ConfigClockSource+0x140>
 800472c:	2b10      	cmp	r3, #16
 800472e:	d802      	bhi.n	8004736 <HAL_TIM_ConfigClockSource+0x62>
 8004730:	2b00      	cmp	r3, #0
 8004732:	d06f      	beq.n	8004814 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004734:	e078      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004736:	2b20      	cmp	r3, #32
 8004738:	d06c      	beq.n	8004814 <HAL_TIM_ConfigClockSource+0x140>
 800473a:	2b30      	cmp	r3, #48	; 0x30
 800473c:	d06a      	beq.n	8004814 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800473e:	e073      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004740:	2b70      	cmp	r3, #112	; 0x70
 8004742:	d00d      	beq.n	8004760 <HAL_TIM_ConfigClockSource+0x8c>
 8004744:	2b70      	cmp	r3, #112	; 0x70
 8004746:	d804      	bhi.n	8004752 <HAL_TIM_ConfigClockSource+0x7e>
 8004748:	2b50      	cmp	r3, #80	; 0x50
 800474a:	d033      	beq.n	80047b4 <HAL_TIM_ConfigClockSource+0xe0>
 800474c:	2b60      	cmp	r3, #96	; 0x60
 800474e:	d041      	beq.n	80047d4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004750:	e06a      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004756:	d066      	beq.n	8004826 <HAL_TIM_ConfigClockSource+0x152>
 8004758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475c:	d017      	beq.n	800478e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800475e:	e063      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6818      	ldr	r0, [r3, #0]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	6899      	ldr	r1, [r3, #8]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f000 f9b6 	bl	8004ae0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004782:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	609a      	str	r2, [r3, #8]
      break;
 800478c:	e04c      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6899      	ldr	r1, [r3, #8]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f000 f99f 	bl	8004ae0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047b0:	609a      	str	r2, [r3, #8]
      break;
 80047b2:	e039      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	6859      	ldr	r1, [r3, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	461a      	mov	r2, r3
 80047c2:	f000 f913 	bl	80049ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2150      	movs	r1, #80	; 0x50
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 f96c 	bl	8004aaa <TIM_ITRx_SetConfig>
      break;
 80047d2:	e029      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	6859      	ldr	r1, [r3, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	461a      	mov	r2, r3
 80047e2:	f000 f932 	bl	8004a4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2160      	movs	r1, #96	; 0x60
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 f95c 	bl	8004aaa <TIM_ITRx_SetConfig>
      break;
 80047f2:	e019      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6859      	ldr	r1, [r3, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	461a      	mov	r2, r3
 8004802:	f000 f8f3 	bl	80049ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2140      	movs	r1, #64	; 0x40
 800480c:	4618      	mov	r0, r3
 800480e:	f000 f94c 	bl	8004aaa <TIM_ITRx_SetConfig>
      break;
 8004812:	e009      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4619      	mov	r1, r3
 800481e:	4610      	mov	r0, r2
 8004820:	f000 f943 	bl	8004aaa <TIM_ITRx_SetConfig>
      break;
 8004824:	e000      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	fffeff88 	.word	0xfffeff88

08004848 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a40      	ldr	r2, [pc, #256]	; (80049c0 <TIM_Base_SetConfig+0x114>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d013      	beq.n	80048ec <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ca:	d00f      	beq.n	80048ec <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a3d      	ldr	r2, [pc, #244]	; (80049c4 <TIM_Base_SetConfig+0x118>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00b      	beq.n	80048ec <TIM_Base_SetConfig+0x40>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a3c      	ldr	r2, [pc, #240]	; (80049c8 <TIM_Base_SetConfig+0x11c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d007      	beq.n	80048ec <TIM_Base_SetConfig+0x40>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a3b      	ldr	r2, [pc, #236]	; (80049cc <TIM_Base_SetConfig+0x120>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d003      	beq.n	80048ec <TIM_Base_SetConfig+0x40>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a3a      	ldr	r2, [pc, #232]	; (80049d0 <TIM_Base_SetConfig+0x124>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d108      	bne.n	80048fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2f      	ldr	r2, [pc, #188]	; (80049c0 <TIM_Base_SetConfig+0x114>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d02b      	beq.n	800495e <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490c:	d027      	beq.n	800495e <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2c      	ldr	r2, [pc, #176]	; (80049c4 <TIM_Base_SetConfig+0x118>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d023      	beq.n	800495e <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a2b      	ldr	r2, [pc, #172]	; (80049c8 <TIM_Base_SetConfig+0x11c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d01f      	beq.n	800495e <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a2a      	ldr	r2, [pc, #168]	; (80049cc <TIM_Base_SetConfig+0x120>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d01b      	beq.n	800495e <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a29      	ldr	r2, [pc, #164]	; (80049d0 <TIM_Base_SetConfig+0x124>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d017      	beq.n	800495e <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a28      	ldr	r2, [pc, #160]	; (80049d4 <TIM_Base_SetConfig+0x128>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a27      	ldr	r2, [pc, #156]	; (80049d8 <TIM_Base_SetConfig+0x12c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00f      	beq.n	800495e <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a26      	ldr	r2, [pc, #152]	; (80049dc <TIM_Base_SetConfig+0x130>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00b      	beq.n	800495e <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a25      	ldr	r2, [pc, #148]	; (80049e0 <TIM_Base_SetConfig+0x134>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d007      	beq.n	800495e <TIM_Base_SetConfig+0xb2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a24      	ldr	r2, [pc, #144]	; (80049e4 <TIM_Base_SetConfig+0x138>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d003      	beq.n	800495e <TIM_Base_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a23      	ldr	r2, [pc, #140]	; (80049e8 <TIM_Base_SetConfig+0x13c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d108      	bne.n	8004970 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a0a      	ldr	r2, [pc, #40]	; (80049c0 <TIM_Base_SetConfig+0x114>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d003      	beq.n	80049a4 <TIM_Base_SetConfig+0xf8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a0c      	ldr	r2, [pc, #48]	; (80049d0 <TIM_Base_SetConfig+0x124>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d103      	bne.n	80049ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	615a      	str	r2, [r3, #20]
}
 80049b2:	bf00      	nop
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40010000 	.word	0x40010000
 80049c4:	40000400 	.word	0x40000400
 80049c8:	40000800 	.word	0x40000800
 80049cc:	40000c00 	.word	0x40000c00
 80049d0:	40010400 	.word	0x40010400
 80049d4:	40014000 	.word	0x40014000
 80049d8:	40014400 	.word	0x40014400
 80049dc:	40014800 	.word	0x40014800
 80049e0:	40001800 	.word	0x40001800
 80049e4:	40001c00 	.word	0x40001c00
 80049e8:	40002000 	.word	0x40002000

080049ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	f023 0201 	bic.w	r2, r3, #1
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f023 030a 	bic.w	r3, r3, #10
 8004a28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	621a      	str	r2, [r3, #32]
}
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b087      	sub	sp, #28
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	f023 0210 	bic.w	r2, r3, #16
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	031b      	lsls	r3, r3, #12
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	621a      	str	r2, [r3, #32]
}
 8004a9e:	bf00      	nop
 8004aa0:	371c      	adds	r7, #28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b085      	sub	sp, #20
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f043 0307 	orr.w	r3, r3, #7
 8004acc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	609a      	str	r2, [r3, #8]
}
 8004ad4:	bf00      	nop
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004afa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	021a      	lsls	r2, r3, #8
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	431a      	orrs	r2, r3
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	609a      	str	r2, [r3, #8]
}
 8004b14:	bf00      	nop
 8004b16:	371c      	adds	r7, #28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e06d      	b.n	8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a30      	ldr	r2, [pc, #192]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d004      	beq.n	8004b6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a2f      	ldr	r2, [pc, #188]	; (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d108      	bne.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a20      	ldr	r2, [pc, #128]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d022      	beq.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004baa:	d01d      	beq.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a1d      	ldr	r2, [pc, #116]	; (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d018      	beq.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a1c      	ldr	r2, [pc, #112]	; (8004c2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d013      	beq.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1a      	ldr	r2, [pc, #104]	; (8004c30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00e      	beq.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a15      	ldr	r2, [pc, #84]	; (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d009      	beq.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a16      	ldr	r2, [pc, #88]	; (8004c34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d004      	beq.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a15      	ldr	r2, [pc, #84]	; (8004c38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d10c      	bne.n	8004c02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	40010000 	.word	0x40010000
 8004c24:	40010400 	.word	0x40010400
 8004c28:	40000400 	.word	0x40000400
 8004c2c:	40000800 	.word	0x40000800
 8004c30:	40000c00 	.word	0x40000c00
 8004c34:	40014000 	.word	0x40014000
 8004c38:	40001800 	.word	0x40001800

08004c3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e040      	b.n	8004d0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f001 fdd2 	bl	8006844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2224      	movs	r2, #36	; 0x24
 8004ca4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0201 	bic.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 faae 	bl	8005218 <UART_SetConfig>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e022      	b.n	8004d0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fd4c 	bl	800576c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fdd3 	bl	80058b0 <UART_CheckIdleState>
 8004d0a:	4603      	mov	r3, r0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d164      	bne.n	8004df4 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <HAL_UART_Transmit_DMA+0x22>
 8004d30:	88fb      	ldrh	r3, [r7, #6]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e05d      	b.n	8004df6 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_UART_Transmit_DMA+0x34>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e056      	b.n	8004df6 <HAL_UART_Transmit_DMA+0xe2>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	88fa      	ldrh	r2, [r7, #6]
 8004d5a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	88fa      	ldrh	r2, [r7, #6]
 8004d62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2221      	movs	r2, #33	; 0x21
 8004d70:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d02a      	beq.n	8004dd0 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d7e:	4a20      	ldr	r2, [pc, #128]	; (8004e00 <HAL_UART_Transmit_DMA+0xec>)
 8004d80:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d86:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <HAL_UART_Transmit_DMA+0xf0>)
 8004d88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d8e:	4a1e      	ldr	r2, [pc, #120]	; (8004e08 <HAL_UART_Transmit_DMA+0xf4>)
 8004d90:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d96:	2200      	movs	r2, #0
 8004d98:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da2:	4619      	mov	r1, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3328      	adds	r3, #40	; 0x28
 8004daa:	461a      	mov	r2, r3
 8004dac:	88fb      	ldrh	r3, [r7, #6]
 8004dae:	f7fd fd6f 	bl	8002890 <HAL_DMA_Start_IT>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00b      	beq.n	8004dd0 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2210      	movs	r2, #16
 8004dbc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e012      	b.n	8004df6 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2240      	movs	r2, #64	; 0x40
 8004dd6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689a      	ldr	r2, [r3, #8]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dee:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004df0:	2300      	movs	r3, #0
 8004df2:	e000      	b.n	8004df6 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8004df4:	2302      	movs	r3, #2
  }
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	08005a9b 	.word	0x08005a9b
 8004e04:	08005aeb 	.word	0x08005aeb
 8004e08:	08005b87 	.word	0x08005b87

08004e0c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	4613      	mov	r3, r2
 8004e18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	d16c      	bne.n	8004efc <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <HAL_UART_Receive_DMA+0x22>
 8004e28:	88fb      	ldrh	r3, [r7, #6]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e065      	b.n	8004efe <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_UART_Receive_DMA+0x34>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e05e      	b.n	8004efe <HAL_UART_Receive_DMA+0xf2>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	88fa      	ldrh	r2, [r7, #6]
 8004e52:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2222      	movs	r2, #34	; 0x22
 8004e60:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d02a      	beq.n	8004ec0 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e6e:	4a26      	ldr	r2, [pc, #152]	; (8004f08 <HAL_UART_Receive_DMA+0xfc>)
 8004e70:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e76:	4a25      	ldr	r2, [pc, #148]	; (8004f0c <HAL_UART_Receive_DMA+0x100>)
 8004e78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e7e:	4a24      	ldr	r2, [pc, #144]	; (8004f10 <HAL_UART_Receive_DMA+0x104>)
 8004e80:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e86:	2200      	movs	r2, #0
 8004e88:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3324      	adds	r3, #36	; 0x24
 8004e94:	4619      	mov	r1, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	f7fd fcf7 	bl	8002890 <HAL_DMA_Start_IT>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00b      	beq.n	8004ec0 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2210      	movs	r2, #16
 8004eac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e01e      	b.n	8004efe <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ed6:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ef6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	e000      	b.n	8004efe <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
  }
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	08005b07 	.word	0x08005b07
 8004f0c:	08005b6b 	.word	0x08005b6b
 8004f10:	08005b87 	.word	0x08005b87

08004f14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d113      	bne.n	8004f6c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00e      	beq.n	8004f6c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d009      	beq.n	8004f6c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 8114 	beq.w	800518a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	4798      	blx	r3
      }
      return;
 8004f6a:	e10e      	b.n	800518a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 80d6 	beq.w	8005120 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d105      	bne.n	8004f8a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 80cb 	beq.w	8005120 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00e      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x9e>
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d009      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004faa:	f043 0201 	orr.w	r2, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00e      	beq.n	8004fda <HAL_UART_IRQHandler+0xc6>
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d009      	beq.n	8004fda <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fd2:	f043 0204 	orr.w	r2, r3, #4
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00e      	beq.n	8005002 <HAL_UART_IRQHandler+0xee>
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d009      	beq.n	8005002 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ffa:	f043 0202 	orr.w	r2, r3, #2
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	d013      	beq.n	8005034 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d104      	bne.n	8005020 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800501c:	2b00      	cmp	r3, #0
 800501e:	d009      	beq.n	8005034 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2208      	movs	r2, #8
 8005026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800502c:	f043 0208 	orr.w	r2, r3, #8
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00f      	beq.n	800505e <HAL_UART_IRQHandler+0x14a>
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00a      	beq.n	800505e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005050:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005056:	f043 0220 	orr.w	r2, r3, #32
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 8093 	beq.w	800518e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00c      	beq.n	800508c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b00      	cmp	r3, #0
 800507a:	d007      	beq.n	800508c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005090:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509c:	2b40      	cmp	r3, #64	; 0x40
 800509e:	d004      	beq.n	80050aa <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d031      	beq.n	800510e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fcd5 	bl	8005a5a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ba:	2b40      	cmp	r3, #64	; 0x40
 80050bc:	d123      	bne.n	8005106 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050cc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d013      	beq.n	80050fe <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050da:	4a30      	ldr	r2, [pc, #192]	; (800519c <HAL_UART_IRQHandler+0x288>)
 80050dc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fd fc34 	bl	8002950 <HAL_DMA_Abort_IT>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d016      	beq.n	800511c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80050f8:	4610      	mov	r0, r2
 80050fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050fc:	e00e      	b.n	800511c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f876 	bl	80051f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005104:	e00a      	b.n	800511c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f872 	bl	80051f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800510c:	e006      	b.n	800511c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f86e 	bl	80051f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800511a:	e038      	b.n	800518e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800511c:	bf00      	nop
    return;
 800511e:	e036      	b.n	800518e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00d      	beq.n	8005146 <HAL_UART_IRQHandler+0x232>
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d008      	beq.n	8005146 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800513c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f860 	bl	8005204 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005144:	e026      	b.n	8005194 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00d      	beq.n	800516c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005156:	2b00      	cmp	r3, #0
 8005158:	d008      	beq.n	800516c <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800515e:	2b00      	cmp	r3, #0
 8005160:	d017      	beq.n	8005192 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	4798      	blx	r3
    }
    return;
 800516a:	e012      	b.n	8005192 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00e      	beq.n	8005194 <HAL_UART_IRQHandler+0x280>
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d009      	beq.n	8005194 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fd52 	bl	8005c2a <UART_EndTransmit_IT>
    return;
 8005186:	bf00      	nop
 8005188:	e004      	b.n	8005194 <HAL_UART_IRQHandler+0x280>
      return;
 800518a:	bf00      	nop
 800518c:	e002      	b.n	8005194 <HAL_UART_IRQHandler+0x280>
    return;
 800518e:	bf00      	nop
 8005190:	e000      	b.n	8005194 <HAL_UART_IRQHandler+0x280>
    return;
 8005192:	bf00      	nop
  }

}
 8005194:	3720      	adds	r7, #32
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	08005bff 	.word	0x08005bff

080051a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005220:	2300      	movs	r3, #0
 8005222:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	4bb1      	ldr	r3, [pc, #708]	; (800550c <UART_SetConfig+0x2f4>)
 8005248:	4013      	ands	r3, r2
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	6939      	ldr	r1, [r7, #16]
 8005250:	430b      	orrs	r3, r1
 8005252:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	430a      	orrs	r2, r1
 800528c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a9f      	ldr	r2, [pc, #636]	; (8005510 <UART_SetConfig+0x2f8>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d121      	bne.n	80052dc <UART_SetConfig+0xc4>
 8005298:	4b9e      	ldr	r3, [pc, #632]	; (8005514 <UART_SetConfig+0x2fc>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d816      	bhi.n	80052d4 <UART_SetConfig+0xbc>
 80052a6:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <UART_SetConfig+0x94>)
 80052a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ac:	080052bd 	.word	0x080052bd
 80052b0:	080052c9 	.word	0x080052c9
 80052b4:	080052c3 	.word	0x080052c3
 80052b8:	080052cf 	.word	0x080052cf
 80052bc:	2301      	movs	r3, #1
 80052be:	77fb      	strb	r3, [r7, #31]
 80052c0:	e151      	b.n	8005566 <UART_SetConfig+0x34e>
 80052c2:	2302      	movs	r3, #2
 80052c4:	77fb      	strb	r3, [r7, #31]
 80052c6:	e14e      	b.n	8005566 <UART_SetConfig+0x34e>
 80052c8:	2304      	movs	r3, #4
 80052ca:	77fb      	strb	r3, [r7, #31]
 80052cc:	e14b      	b.n	8005566 <UART_SetConfig+0x34e>
 80052ce:	2308      	movs	r3, #8
 80052d0:	77fb      	strb	r3, [r7, #31]
 80052d2:	e148      	b.n	8005566 <UART_SetConfig+0x34e>
 80052d4:	2310      	movs	r3, #16
 80052d6:	77fb      	strb	r3, [r7, #31]
 80052d8:	bf00      	nop
 80052da:	e144      	b.n	8005566 <UART_SetConfig+0x34e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a8d      	ldr	r2, [pc, #564]	; (8005518 <UART_SetConfig+0x300>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d134      	bne.n	8005350 <UART_SetConfig+0x138>
 80052e6:	4b8b      	ldr	r3, [pc, #556]	; (8005514 <UART_SetConfig+0x2fc>)
 80052e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ec:	f003 030c 	and.w	r3, r3, #12
 80052f0:	2b0c      	cmp	r3, #12
 80052f2:	d829      	bhi.n	8005348 <UART_SetConfig+0x130>
 80052f4:	a201      	add	r2, pc, #4	; (adr r2, 80052fc <UART_SetConfig+0xe4>)
 80052f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fa:	bf00      	nop
 80052fc:	08005331 	.word	0x08005331
 8005300:	08005349 	.word	0x08005349
 8005304:	08005349 	.word	0x08005349
 8005308:	08005349 	.word	0x08005349
 800530c:	0800533d 	.word	0x0800533d
 8005310:	08005349 	.word	0x08005349
 8005314:	08005349 	.word	0x08005349
 8005318:	08005349 	.word	0x08005349
 800531c:	08005337 	.word	0x08005337
 8005320:	08005349 	.word	0x08005349
 8005324:	08005349 	.word	0x08005349
 8005328:	08005349 	.word	0x08005349
 800532c:	08005343 	.word	0x08005343
 8005330:	2300      	movs	r3, #0
 8005332:	77fb      	strb	r3, [r7, #31]
 8005334:	e117      	b.n	8005566 <UART_SetConfig+0x34e>
 8005336:	2302      	movs	r3, #2
 8005338:	77fb      	strb	r3, [r7, #31]
 800533a:	e114      	b.n	8005566 <UART_SetConfig+0x34e>
 800533c:	2304      	movs	r3, #4
 800533e:	77fb      	strb	r3, [r7, #31]
 8005340:	e111      	b.n	8005566 <UART_SetConfig+0x34e>
 8005342:	2308      	movs	r3, #8
 8005344:	77fb      	strb	r3, [r7, #31]
 8005346:	e10e      	b.n	8005566 <UART_SetConfig+0x34e>
 8005348:	2310      	movs	r3, #16
 800534a:	77fb      	strb	r3, [r7, #31]
 800534c:	bf00      	nop
 800534e:	e10a      	b.n	8005566 <UART_SetConfig+0x34e>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a71      	ldr	r2, [pc, #452]	; (800551c <UART_SetConfig+0x304>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d120      	bne.n	800539c <UART_SetConfig+0x184>
 800535a:	4b6e      	ldr	r3, [pc, #440]	; (8005514 <UART_SetConfig+0x2fc>)
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005360:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005364:	2b10      	cmp	r3, #16
 8005366:	d00f      	beq.n	8005388 <UART_SetConfig+0x170>
 8005368:	2b10      	cmp	r3, #16
 800536a:	d802      	bhi.n	8005372 <UART_SetConfig+0x15a>
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <UART_SetConfig+0x164>
 8005370:	e010      	b.n	8005394 <UART_SetConfig+0x17c>
 8005372:	2b20      	cmp	r3, #32
 8005374:	d005      	beq.n	8005382 <UART_SetConfig+0x16a>
 8005376:	2b30      	cmp	r3, #48	; 0x30
 8005378:	d009      	beq.n	800538e <UART_SetConfig+0x176>
 800537a:	e00b      	b.n	8005394 <UART_SetConfig+0x17c>
 800537c:	2300      	movs	r3, #0
 800537e:	77fb      	strb	r3, [r7, #31]
 8005380:	e0f1      	b.n	8005566 <UART_SetConfig+0x34e>
 8005382:	2302      	movs	r3, #2
 8005384:	77fb      	strb	r3, [r7, #31]
 8005386:	e0ee      	b.n	8005566 <UART_SetConfig+0x34e>
 8005388:	2304      	movs	r3, #4
 800538a:	77fb      	strb	r3, [r7, #31]
 800538c:	e0eb      	b.n	8005566 <UART_SetConfig+0x34e>
 800538e:	2308      	movs	r3, #8
 8005390:	77fb      	strb	r3, [r7, #31]
 8005392:	e0e8      	b.n	8005566 <UART_SetConfig+0x34e>
 8005394:	2310      	movs	r3, #16
 8005396:	77fb      	strb	r3, [r7, #31]
 8005398:	bf00      	nop
 800539a:	e0e4      	b.n	8005566 <UART_SetConfig+0x34e>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a5f      	ldr	r2, [pc, #380]	; (8005520 <UART_SetConfig+0x308>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d120      	bne.n	80053e8 <UART_SetConfig+0x1d0>
 80053a6:	4b5b      	ldr	r3, [pc, #364]	; (8005514 <UART_SetConfig+0x2fc>)
 80053a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053b0:	2b40      	cmp	r3, #64	; 0x40
 80053b2:	d00f      	beq.n	80053d4 <UART_SetConfig+0x1bc>
 80053b4:	2b40      	cmp	r3, #64	; 0x40
 80053b6:	d802      	bhi.n	80053be <UART_SetConfig+0x1a6>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <UART_SetConfig+0x1b0>
 80053bc:	e010      	b.n	80053e0 <UART_SetConfig+0x1c8>
 80053be:	2b80      	cmp	r3, #128	; 0x80
 80053c0:	d005      	beq.n	80053ce <UART_SetConfig+0x1b6>
 80053c2:	2bc0      	cmp	r3, #192	; 0xc0
 80053c4:	d009      	beq.n	80053da <UART_SetConfig+0x1c2>
 80053c6:	e00b      	b.n	80053e0 <UART_SetConfig+0x1c8>
 80053c8:	2300      	movs	r3, #0
 80053ca:	77fb      	strb	r3, [r7, #31]
 80053cc:	e0cb      	b.n	8005566 <UART_SetConfig+0x34e>
 80053ce:	2302      	movs	r3, #2
 80053d0:	77fb      	strb	r3, [r7, #31]
 80053d2:	e0c8      	b.n	8005566 <UART_SetConfig+0x34e>
 80053d4:	2304      	movs	r3, #4
 80053d6:	77fb      	strb	r3, [r7, #31]
 80053d8:	e0c5      	b.n	8005566 <UART_SetConfig+0x34e>
 80053da:	2308      	movs	r3, #8
 80053dc:	77fb      	strb	r3, [r7, #31]
 80053de:	e0c2      	b.n	8005566 <UART_SetConfig+0x34e>
 80053e0:	2310      	movs	r3, #16
 80053e2:	77fb      	strb	r3, [r7, #31]
 80053e4:	bf00      	nop
 80053e6:	e0be      	b.n	8005566 <UART_SetConfig+0x34e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a4d      	ldr	r2, [pc, #308]	; (8005524 <UART_SetConfig+0x30c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d124      	bne.n	800543c <UART_SetConfig+0x224>
 80053f2:	4b48      	ldr	r3, [pc, #288]	; (8005514 <UART_SetConfig+0x2fc>)
 80053f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005400:	d012      	beq.n	8005428 <UART_SetConfig+0x210>
 8005402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005406:	d802      	bhi.n	800540e <UART_SetConfig+0x1f6>
 8005408:	2b00      	cmp	r3, #0
 800540a:	d007      	beq.n	800541c <UART_SetConfig+0x204>
 800540c:	e012      	b.n	8005434 <UART_SetConfig+0x21c>
 800540e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005412:	d006      	beq.n	8005422 <UART_SetConfig+0x20a>
 8005414:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005418:	d009      	beq.n	800542e <UART_SetConfig+0x216>
 800541a:	e00b      	b.n	8005434 <UART_SetConfig+0x21c>
 800541c:	2300      	movs	r3, #0
 800541e:	77fb      	strb	r3, [r7, #31]
 8005420:	e0a1      	b.n	8005566 <UART_SetConfig+0x34e>
 8005422:	2302      	movs	r3, #2
 8005424:	77fb      	strb	r3, [r7, #31]
 8005426:	e09e      	b.n	8005566 <UART_SetConfig+0x34e>
 8005428:	2304      	movs	r3, #4
 800542a:	77fb      	strb	r3, [r7, #31]
 800542c:	e09b      	b.n	8005566 <UART_SetConfig+0x34e>
 800542e:	2308      	movs	r3, #8
 8005430:	77fb      	strb	r3, [r7, #31]
 8005432:	e098      	b.n	8005566 <UART_SetConfig+0x34e>
 8005434:	2310      	movs	r3, #16
 8005436:	77fb      	strb	r3, [r7, #31]
 8005438:	bf00      	nop
 800543a:	e094      	b.n	8005566 <UART_SetConfig+0x34e>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a39      	ldr	r2, [pc, #228]	; (8005528 <UART_SetConfig+0x310>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d124      	bne.n	8005490 <UART_SetConfig+0x278>
 8005446:	4b33      	ldr	r3, [pc, #204]	; (8005514 <UART_SetConfig+0x2fc>)
 8005448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005454:	d012      	beq.n	800547c <UART_SetConfig+0x264>
 8005456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545a:	d802      	bhi.n	8005462 <UART_SetConfig+0x24a>
 800545c:	2b00      	cmp	r3, #0
 800545e:	d007      	beq.n	8005470 <UART_SetConfig+0x258>
 8005460:	e012      	b.n	8005488 <UART_SetConfig+0x270>
 8005462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005466:	d006      	beq.n	8005476 <UART_SetConfig+0x25e>
 8005468:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800546c:	d009      	beq.n	8005482 <UART_SetConfig+0x26a>
 800546e:	e00b      	b.n	8005488 <UART_SetConfig+0x270>
 8005470:	2301      	movs	r3, #1
 8005472:	77fb      	strb	r3, [r7, #31]
 8005474:	e077      	b.n	8005566 <UART_SetConfig+0x34e>
 8005476:	2302      	movs	r3, #2
 8005478:	77fb      	strb	r3, [r7, #31]
 800547a:	e074      	b.n	8005566 <UART_SetConfig+0x34e>
 800547c:	2304      	movs	r3, #4
 800547e:	77fb      	strb	r3, [r7, #31]
 8005480:	e071      	b.n	8005566 <UART_SetConfig+0x34e>
 8005482:	2308      	movs	r3, #8
 8005484:	77fb      	strb	r3, [r7, #31]
 8005486:	e06e      	b.n	8005566 <UART_SetConfig+0x34e>
 8005488:	2310      	movs	r3, #16
 800548a:	77fb      	strb	r3, [r7, #31]
 800548c:	bf00      	nop
 800548e:	e06a      	b.n	8005566 <UART_SetConfig+0x34e>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a25      	ldr	r2, [pc, #148]	; (800552c <UART_SetConfig+0x314>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d124      	bne.n	80054e4 <UART_SetConfig+0x2cc>
 800549a:	4b1e      	ldr	r3, [pc, #120]	; (8005514 <UART_SetConfig+0x2fc>)
 800549c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80054a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a8:	d012      	beq.n	80054d0 <UART_SetConfig+0x2b8>
 80054aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ae:	d802      	bhi.n	80054b6 <UART_SetConfig+0x29e>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d007      	beq.n	80054c4 <UART_SetConfig+0x2ac>
 80054b4:	e012      	b.n	80054dc <UART_SetConfig+0x2c4>
 80054b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ba:	d006      	beq.n	80054ca <UART_SetConfig+0x2b2>
 80054bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054c0:	d009      	beq.n	80054d6 <UART_SetConfig+0x2be>
 80054c2:	e00b      	b.n	80054dc <UART_SetConfig+0x2c4>
 80054c4:	2300      	movs	r3, #0
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e04d      	b.n	8005566 <UART_SetConfig+0x34e>
 80054ca:	2302      	movs	r3, #2
 80054cc:	77fb      	strb	r3, [r7, #31]
 80054ce:	e04a      	b.n	8005566 <UART_SetConfig+0x34e>
 80054d0:	2304      	movs	r3, #4
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	e047      	b.n	8005566 <UART_SetConfig+0x34e>
 80054d6:	2308      	movs	r3, #8
 80054d8:	77fb      	strb	r3, [r7, #31]
 80054da:	e044      	b.n	8005566 <UART_SetConfig+0x34e>
 80054dc:	2310      	movs	r3, #16
 80054de:	77fb      	strb	r3, [r7, #31]
 80054e0:	bf00      	nop
 80054e2:	e040      	b.n	8005566 <UART_SetConfig+0x34e>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a11      	ldr	r2, [pc, #68]	; (8005530 <UART_SetConfig+0x318>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d139      	bne.n	8005562 <UART_SetConfig+0x34a>
 80054ee:	4b09      	ldr	r3, [pc, #36]	; (8005514 <UART_SetConfig+0x2fc>)
 80054f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80054f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054fc:	d027      	beq.n	800554e <UART_SetConfig+0x336>
 80054fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005502:	d817      	bhi.n	8005534 <UART_SetConfig+0x31c>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01c      	beq.n	8005542 <UART_SetConfig+0x32a>
 8005508:	e027      	b.n	800555a <UART_SetConfig+0x342>
 800550a:	bf00      	nop
 800550c:	efff69f3 	.word	0xefff69f3
 8005510:	40011000 	.word	0x40011000
 8005514:	40023800 	.word	0x40023800
 8005518:	40004400 	.word	0x40004400
 800551c:	40004800 	.word	0x40004800
 8005520:	40004c00 	.word	0x40004c00
 8005524:	40005000 	.word	0x40005000
 8005528:	40011400 	.word	0x40011400
 800552c:	40007800 	.word	0x40007800
 8005530:	40007c00 	.word	0x40007c00
 8005534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005538:	d006      	beq.n	8005548 <UART_SetConfig+0x330>
 800553a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800553e:	d009      	beq.n	8005554 <UART_SetConfig+0x33c>
 8005540:	e00b      	b.n	800555a <UART_SetConfig+0x342>
 8005542:	2300      	movs	r3, #0
 8005544:	77fb      	strb	r3, [r7, #31]
 8005546:	e00e      	b.n	8005566 <UART_SetConfig+0x34e>
 8005548:	2302      	movs	r3, #2
 800554a:	77fb      	strb	r3, [r7, #31]
 800554c:	e00b      	b.n	8005566 <UART_SetConfig+0x34e>
 800554e:	2304      	movs	r3, #4
 8005550:	77fb      	strb	r3, [r7, #31]
 8005552:	e008      	b.n	8005566 <UART_SetConfig+0x34e>
 8005554:	2308      	movs	r3, #8
 8005556:	77fb      	strb	r3, [r7, #31]
 8005558:	e005      	b.n	8005566 <UART_SetConfig+0x34e>
 800555a:	2310      	movs	r3, #16
 800555c:	77fb      	strb	r3, [r7, #31]
 800555e:	bf00      	nop
 8005560:	e001      	b.n	8005566 <UART_SetConfig+0x34e>
 8005562:	2310      	movs	r3, #16
 8005564:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800556e:	d17f      	bne.n	8005670 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8005570:	7ffb      	ldrb	r3, [r7, #31]
 8005572:	2b08      	cmp	r3, #8
 8005574:	d85c      	bhi.n	8005630 <UART_SetConfig+0x418>
 8005576:	a201      	add	r2, pc, #4	; (adr r2, 800557c <UART_SetConfig+0x364>)
 8005578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557c:	080055a1 	.word	0x080055a1
 8005580:	080055c1 	.word	0x080055c1
 8005584:	080055e1 	.word	0x080055e1
 8005588:	08005631 	.word	0x08005631
 800558c:	080055f9 	.word	0x080055f9
 8005590:	08005631 	.word	0x08005631
 8005594:	08005631 	.word	0x08005631
 8005598:	08005631 	.word	0x08005631
 800559c:	08005619 	.word	0x08005619
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055a0:	f7fe fad4 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 80055a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	005a      	lsls	r2, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	085b      	lsrs	r3, r3, #1
 80055b0:	441a      	add	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	61bb      	str	r3, [r7, #24]
        break;
 80055be:	e03a      	b.n	8005636 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055c0:	f7fe fad8 	bl	8003b74 <HAL_RCC_GetPCLK2Freq>
 80055c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	005a      	lsls	r2, r3, #1
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	085b      	lsrs	r3, r3, #1
 80055d0:	441a      	add	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055da:	b29b      	uxth	r3, r3
 80055dc:	61bb      	str	r3, [r7, #24]
        break;
 80055de:	e02a      	b.n	8005636 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	085a      	lsrs	r2, r3, #1
 80055e6:	4b5f      	ldr	r3, [pc, #380]	; (8005764 <UART_SetConfig+0x54c>)
 80055e8:	4413      	add	r3, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6852      	ldr	r2, [r2, #4]
 80055ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	61bb      	str	r3, [r7, #24]
        break;
 80055f6:	e01e      	b.n	8005636 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055f8:	f7fe f9c4 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 80055fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	005a      	lsls	r2, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	085b      	lsrs	r3, r3, #1
 8005608:	441a      	add	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005612:	b29b      	uxth	r3, r3
 8005614:	61bb      	str	r3, [r7, #24]
        break;
 8005616:	e00e      	b.n	8005636 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	085b      	lsrs	r3, r3, #1
 800561e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	fbb2 f3f3 	udiv	r3, r2, r3
 800562a:	b29b      	uxth	r3, r3
 800562c:	61bb      	str	r3, [r7, #24]
        break;
 800562e:	e002      	b.n	8005636 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	75fb      	strb	r3, [r7, #23]
        break;
 8005634:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	2b0f      	cmp	r3, #15
 800563a:	d916      	bls.n	800566a <UART_SetConfig+0x452>
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005642:	d212      	bcs.n	800566a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f023 030f 	bic.w	r3, r3, #15
 800564c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	085b      	lsrs	r3, r3, #1
 8005652:	b29b      	uxth	r3, r3
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	b29a      	uxth	r2, r3
 800565a:	897b      	ldrh	r3, [r7, #10]
 800565c:	4313      	orrs	r3, r2
 800565e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	897a      	ldrh	r2, [r7, #10]
 8005666:	60da      	str	r2, [r3, #12]
 8005668:	e070      	b.n	800574c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	75fb      	strb	r3, [r7, #23]
 800566e:	e06d      	b.n	800574c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8005670:	7ffb      	ldrb	r3, [r7, #31]
 8005672:	2b08      	cmp	r3, #8
 8005674:	d859      	bhi.n	800572a <UART_SetConfig+0x512>
 8005676:	a201      	add	r2, pc, #4	; (adr r2, 800567c <UART_SetConfig+0x464>)
 8005678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056bf 	.word	0x080056bf
 8005684:	080056dd 	.word	0x080056dd
 8005688:	0800572b 	.word	0x0800572b
 800568c:	080056f5 	.word	0x080056f5
 8005690:	0800572b 	.word	0x0800572b
 8005694:	0800572b 	.word	0x0800572b
 8005698:	0800572b 	.word	0x0800572b
 800569c:	08005713 	.word	0x08005713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a0:	f7fe fa54 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 80056a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	085a      	lsrs	r2, r3, #1
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	441a      	add	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	61bb      	str	r3, [r7, #24]
        break;
 80056bc:	e038      	b.n	8005730 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056be:	f7fe fa59 	bl	8003b74 <HAL_RCC_GetPCLK2Freq>
 80056c2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	085a      	lsrs	r2, r3, #1
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	441a      	add	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	61bb      	str	r3, [r7, #24]
        break;
 80056da:	e029      	b.n	8005730 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	085a      	lsrs	r2, r3, #1
 80056e2:	4b21      	ldr	r3, [pc, #132]	; (8005768 <UART_SetConfig+0x550>)
 80056e4:	4413      	add	r3, r2
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6852      	ldr	r2, [r2, #4]
 80056ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	61bb      	str	r3, [r7, #24]
        break;
 80056f2:	e01d      	b.n	8005730 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056f4:	f7fe f946 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 80056f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	085a      	lsrs	r2, r3, #1
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	441a      	add	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	fbb2 f3f3 	udiv	r3, r2, r3
 800570c:	b29b      	uxth	r3, r3
 800570e:	61bb      	str	r3, [r7, #24]
        break;
 8005710:	e00e      	b.n	8005730 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	085b      	lsrs	r3, r3, #1
 8005718:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	fbb2 f3f3 	udiv	r3, r2, r3
 8005724:	b29b      	uxth	r3, r3
 8005726:	61bb      	str	r3, [r7, #24]
        break;
 8005728:	e002      	b.n	8005730 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	75fb      	strb	r3, [r7, #23]
        break;
 800572e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	2b0f      	cmp	r3, #15
 8005734:	d908      	bls.n	8005748 <UART_SetConfig+0x530>
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800573c:	d204      	bcs.n	8005748 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	60da      	str	r2, [r3, #12]
 8005746:	e001      	b.n	800574c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005758:	7dfb      	ldrb	r3, [r7, #23]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3720      	adds	r7, #32
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	01e84800 	.word	0x01e84800
 8005768:	00f42400 	.word	0x00f42400

0800576c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00a      	beq.n	8005796 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00a      	beq.n	80057da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01a      	beq.n	8005882 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800586a:	d10a      	bne.n	8005882 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	605a      	str	r2, [r3, #4]
  }
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80058be:	f7fb f9f7 	bl	8000cb0 <HAL_GetTick>
 80058c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	d10e      	bne.n	80058f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f82a 	bl	800593a <UART_WaitOnFlagUntilTimeout>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e020      	b.n	8005932 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d10e      	bne.n	800591c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f814 	bl	800593a <UART_WaitOnFlagUntilTimeout>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e00a      	b.n	8005932 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	603b      	str	r3, [r7, #0]
 8005946:	4613      	mov	r3, r2
 8005948:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800594a:	e05d      	b.n	8005a08 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005952:	d059      	beq.n	8005a08 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005954:	f7fb f9ac 	bl	8000cb0 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	429a      	cmp	r2, r3
 8005962:	d302      	bcc.n	800596a <UART_WaitOnFlagUntilTimeout+0x30>
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d11b      	bne.n	80059a2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005978:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0201 	bic.w	r2, r2, #1
 8005988:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2220      	movs	r2, #32
 800598e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2220      	movs	r2, #32
 8005994:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e042      	b.n	8005a28 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d02b      	beq.n	8005a08 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059be:	d123      	bne.n	8005a08 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059c8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0201 	bic.w	r2, r2, #1
 80059e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2220      	movs	r2, #32
 80059ee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2220      	movs	r2, #32
 80059fa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e00f      	b.n	8005a28 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69da      	ldr	r2, [r3, #28]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	4013      	ands	r3, r2
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	bf0c      	ite	eq
 8005a18:	2301      	moveq	r3, #1
 8005a1a:	2300      	movne	r3, #0
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	461a      	mov	r2, r3
 8005a20:	79fb      	ldrb	r3, [r7, #7]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d092      	beq.n	800594c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005a46:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a70:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0201 	bic.w	r2, r2, #1
 8005a80:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2220      	movs	r2, #32
 8005a86:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ab0:	d014      	beq.n	8005adc <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ac8:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ad8:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ada:	e002      	b.n	8005ae2 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f7ff fb5f 	bl	80051a0 <HAL_UART_TxCpltCallback>
}
 8005ae2:	bf00      	nop
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b084      	sub	sp, #16
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f7ff fb5b 	bl	80051b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005afe:	bf00      	nop
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b1c:	d01e      	beq.n	8005b5c <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b34:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0201 	bic.w	r2, r2, #1
 8005b44:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b54:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f7ff fb33 	bl	80051c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b62:	bf00      	nop
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f7ff fb2f 	bl	80051dc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b7e:	bf00      	nop
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b086      	sub	sp, #24
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b92:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b98:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005baa:	2b80      	cmp	r3, #128	; 0x80
 8005bac:	d109      	bne.n	8005bc2 <UART_DMAError+0x3c>
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	2b21      	cmp	r3, #33	; 0x21
 8005bb2:	d106      	bne.n	8005bc2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005bbc:	6978      	ldr	r0, [r7, #20]
 8005bbe:	f7ff ff37 	bl	8005a30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bcc:	2b40      	cmp	r3, #64	; 0x40
 8005bce:	d109      	bne.n	8005be4 <UART_DMAError+0x5e>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b22      	cmp	r3, #34	; 0x22
 8005bd4:	d106      	bne.n	8005be4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005bde:	6978      	ldr	r0, [r7, #20]
 8005be0:	f7ff ff3b 	bl	8005a5a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005be8:	f043 0210 	orr.w	r2, r3, #16
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bf0:	6978      	ldr	r0, [r7, #20]
 8005bf2:	f7ff fafd 	bl	80051f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bf6:	bf00      	nop
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b084      	sub	sp, #16
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f7ff fae7 	bl	80051f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c22:	bf00      	nop
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b082      	sub	sp, #8
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c40:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7ff faa6 	bl	80051a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c54:	bf00      	nop
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <control_motors>:
 * y el status (variables del main), y se va a encargar de controlar
 * los motores y actualizar la misma */
 extern UART_HandleTypeDef huart3;

void control_motors(int throttle,int direction,int brake)
{
 8005c5c:	b590      	push	{r4, r7, lr}
 8005c5e:	b08b      	sub	sp, #44	; 0x2c
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
	/*control_nodos es una variable se encarga de enviar la controlword a cada nodo, el contador va a controlar la data a pedir de los nodos*/
	static uint8_t nodo=MOTOR1,control_nodos[2],contador[2];
	static int tickstart;
	uint32_t Id;
	uint8_t buffer_analisis[8],i=0,bytes;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t pedal1,pedal2;

	//	ANALIZO MENSAJE CAN-- SI HAY
	//Armo un buffer de lectura, luego bajo el flag y analizo el mensaje
	if(FLAG_CAN==PENDING)
 8005c6e:	4b82      	ldr	r3, [pc, #520]	; (8005e78 <control_motors+0x21c>)
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d12a      	bne.n	8005ccc <control_motors+0x70>
	{
	FLAG_CAN=READING;
 8005c76:	4b80      	ldr	r3, [pc, #512]	; (8005e78 <control_motors+0x21c>)
 8005c78:	2202      	movs	r2, #2
 8005c7a:	701a      	strb	r2, [r3, #0]
	Id=pRxHeader.StdId;
 8005c7c:	4b7f      	ldr	r3, [pc, #508]	; (8005e7c <control_motors+0x220>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	623b      	str	r3, [r7, #32]
	bytes=pRxHeader.DLC;
 8005c82:	4b7e      	ldr	r3, [pc, #504]	; (8005e7c <control_motors+0x220>)
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	77fb      	strb	r3, [r7, #31]
	for(i=1;i<8;i++)
 8005c88:	2301      	movs	r3, #1
 8005c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c8e:	e00f      	b.n	8005cb0 <control_motors+0x54>
	{
		buffer_analisis[i]=buffer_Rx_msg[i];
 8005c90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c98:	4979      	ldr	r1, [pc, #484]	; (8005e80 <control_motors+0x224>)
 8005c9a:	5c8a      	ldrb	r2, [r1, r2]
 8005c9c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005ca0:	440b      	add	r3, r1
 8005ca2:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i=1;i<8;i++)
 8005ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005caa:	3301      	adds	r3, #1
 8005cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cb4:	2b07      	cmp	r3, #7
 8005cb6:	d9eb      	bls.n	8005c90 <control_motors+0x34>
	}

	FLAG_CAN=READY;								//bajo el flag
 8005cb8:	4b6f      	ldr	r3, [pc, #444]	; (8005e78 <control_motors+0x21c>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	701a      	strb	r2, [r3, #0]
	analize_CAN_Rx(Id,bytes,buffer_analisis);
 8005cbe:	f107 0214 	add.w	r2, r7, #20
 8005cc2:	7ffb      	ldrb	r3, [r7, #31]
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	6a38      	ldr	r0, [r7, #32]
 8005cc8:	f7fa fd9e 	bl	8000808 <analize_CAN_Rx>
	}

	if(FLAG_USART==49)					// SI TENGO PEDIDO DE ENVIO UART LO REALIZO
 8005ccc:	4b6d      	ldr	r3, [pc, #436]	; (8005e84 <control_motors+0x228>)
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b31      	cmp	r3, #49	; 0x31
 8005cd2:	d104      	bne.n	8005cde <control_motors+0x82>
	{
		preparo_y_envio_data_uart(); 	//primero acomodo y elijo la info a enviar
 8005cd4:	f000 fc38 	bl	8006548 <preparo_y_envio_data_uart>
		FLAG_USART=0;
 8005cd8:	4b6a      	ldr	r3, [pc, #424]	; (8005e84 <control_motors+0x228>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	701a      	strb	r2, [r3, #0]
	}

	// tiempos
	/* debo seleccionar alternadamente el motor a controlar, arranco la variable en 155 para
	 * saber que es la primera vez que la inicio y despues la alterno entre los nodos*/
	switch (status[nodo-1])
 8005cde:	4b6a      	ldr	r3, [pc, #424]	; (8005e88 <control_motors+0x22c>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	4a69      	ldr	r2, [pc, #420]	; (8005e8c <control_motors+0x230>)
 8005ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cea:	2b05      	cmp	r3, #5
 8005cec:	f200 80b0 	bhi.w	8005e50 <control_motors+0x1f4>
 8005cf0:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <control_motors+0x9c>)
 8005cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf6:	bf00      	nop
 8005cf8:	08005d11 	.word	0x08005d11
 8005cfc:	08005e51 	.word	0x08005e51
 8005d00:	08005d43 	.word	0x08005d43
 8005d04:	08005d71 	.word	0x08005d71
 8005d08:	08005da7 	.word	0x08005da7
 8005d0c:	08005e13 	.word	0x08005e13
	{
		case(INITIALIZATION):		// configuro ambos nodos y arranco mi base de tiempo.
			control_nodos[0]=NOTSEND;
 8005d10:	4b5f      	ldr	r3, [pc, #380]	; (8005e90 <control_motors+0x234>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	701a      	strb	r2, [r3, #0]
			control_nodos[1]=NOTSEND;
 8005d16:	4b5e      	ldr	r3, [pc, #376]	; (8005e90 <control_motors+0x234>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	705a      	strb	r2, [r3, #1]
			contador[0]=1;
 8005d1c:	4b5d      	ldr	r3, [pc, #372]	; (8005e94 <control_motors+0x238>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	701a      	strb	r2, [r3, #0]
			contador[1]=1;
 8005d22:	4b5c      	ldr	r3, [pc, #368]	; (8005e94 <control_motors+0x238>)
 8005d24:	2201      	movs	r2, #1
 8005d26:	705a      	strb	r2, [r3, #1]
			status[0]=WFBOOTUP;
 8005d28:	4b58      	ldr	r3, [pc, #352]	; (8005e8c <control_motors+0x230>)
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	801a      	strh	r2, [r3, #0]
			status[1]=WFBOOTUP;
 8005d2e:	4b57      	ldr	r3, [pc, #348]	; (8005e8c <control_motors+0x230>)
 8005d30:	2201      	movs	r2, #1
 8005d32:	805a      	strh	r2, [r3, #2]
			tickstart= HAL_GetTick();
 8005d34:	f7fa ffbc 	bl	8000cb0 <HAL_GetTick>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	4b56      	ldr	r3, [pc, #344]	; (8005e98 <control_motors+0x23c>)
 8005d3e:	601a      	str	r2, [r3, #0]
			break;
 8005d40:	e086      	b.n	8005e50 <control_motors+0x1f4>
		case(WFBOOTUP):
				//ESTOY ESPERANDO QUE LOS NODOS ESTEN READY
				break;

		case(GOTOPREOPERATIONAL):
				if (status[0]==GOTOPREOPERATIONAL && status[1]==GOTOPREOPERATIONAL)		// Si estan ambos iniciados
 8005d42:	4b52      	ldr	r3, [pc, #328]	; (8005e8c <control_motors+0x230>)
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d17d      	bne.n	8005e46 <control_motors+0x1ea>
 8005d4a:	4b50      	ldr	r3, [pc, #320]	; (8005e8c <control_motors+0x230>)
 8005d4c:	885b      	ldrh	r3, [r3, #2]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d179      	bne.n	8005e46 <control_motors+0x1ea>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);		// prendo led verde
 8005d52:	2201      	movs	r2, #1
 8005d54:	2101      	movs	r1, #1
 8005d56:	4851      	ldr	r0, [pc, #324]	; (8005e9c <control_motors+0x240>)
 8005d58:	f7fd fa46 	bl	80031e8 <HAL_GPIO_WritePin>
					send_NMT(PREOPERATIONAL);
 8005d5c:	2003      	movs	r0, #3
 8005d5e:	f7fa fef1 	bl	8000b44 <send_NMT>
					status[0]=PREOPERATIONAL;
 8005d62:	4b4a      	ldr	r3, [pc, #296]	; (8005e8c <control_motors+0x230>)
 8005d64:	2203      	movs	r2, #3
 8005d66:	801a      	strh	r2, [r3, #0]
					status[1]=PREOPERATIONAL;
 8005d68:	4b48      	ldr	r3, [pc, #288]	; (8005e8c <control_motors+0x230>)
 8005d6a:	2203      	movs	r2, #3
 8005d6c:	805a      	strh	r2, [r3, #2]
				}
				break;
 8005d6e:	e06a      	b.n	8005e46 <control_motors+0x1ea>
		case(PREOPERATIONAL):

					if(FLAG_OP==1)
 8005d70:	4b4b      	ldr	r3, [pc, #300]	; (8005ea0 <control_motors+0x244>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d168      	bne.n	8005e4a <control_motors+0x1ee>
					{
						if(send_NMT(START)!=HAL_OK)
 8005d78:	2001      	movs	r0, #1
 8005d7a:	f7fa fee3 	bl	8000b44 <send_NMT>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <control_motors+0x12e>
						{
							Error_Handler();
 8005d84:	f000 fbd4 	bl	8006530 <Error_Handler>
							return;
 8005d88:	e073      	b.n	8005e72 <control_motors+0x216>
						}

						HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);				// enciendo luz azul en caso operacional
 8005d8a:	2180      	movs	r1, #128	; 0x80
 8005d8c:	4843      	ldr	r0, [pc, #268]	; (8005e9c <control_motors+0x240>)
 8005d8e:	f7fd fa44 	bl	800321a <HAL_GPIO_TogglePin>
						status[0]=OPERATIONAL;
 8005d92:	4b3e      	ldr	r3, [pc, #248]	; (8005e8c <control_motors+0x230>)
 8005d94:	2204      	movs	r2, #4
 8005d96:	801a      	strh	r2, [r3, #0]
						status[1]=OPERATIONAL;
 8005d98:	4b3c      	ldr	r3, [pc, #240]	; (8005e8c <control_motors+0x230>)
 8005d9a:	2204      	movs	r2, #4
 8005d9c:	805a      	strh	r2, [r3, #2]
						FLAG_OP=0;											// UNA VEZ ENVIADO EL MSJ NMT BAJO EL FLAG
 8005d9e:	4b40      	ldr	r3, [pc, #256]	; (8005ea0 <control_motors+0x244>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]
					}


			break;
 8005da4:	e051      	b.n	8005e4a <control_motors+0x1ee>
	/*Caso OPERATIONAL y Ctrl WORD enviada:*/
		case(OPERATIONAL):
					if(control_nodos[nodo-1]==NOTSEND)
 8005da6:	4b38      	ldr	r3, [pc, #224]	; (8005e88 <control_motors+0x22c>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	4a38      	ldr	r2, [pc, #224]	; (8005e90 <control_motors+0x234>)
 8005dae:	5cd3      	ldrb	r3, [r2, r3]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d112      	bne.n	8005dda <control_motors+0x17e>
					{
						control_nodos[nodo-1]= change_state(nodo,OPERATIONAL,status[nodo-1] );
 8005db4:	4b34      	ldr	r3, [pc, #208]	; (8005e88 <control_motors+0x22c>)
 8005db6:	7818      	ldrb	r0, [r3, #0]
 8005db8:	4b33      	ldr	r3, [pc, #204]	; (8005e88 <control_motors+0x22c>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	4a33      	ldr	r2, [pc, #204]	; (8005e8c <control_motors+0x230>)
 8005dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	4b30      	ldr	r3, [pc, #192]	; (8005e88 <control_motors+0x22c>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	1e5c      	subs	r4, r3, #1
 8005dcc:	2104      	movs	r1, #4
 8005dce:	f7fa fee0 	bl	8000b92 <change_state>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	4b2e      	ldr	r3, [pc, #184]	; (8005e90 <control_motors+0x234>)
 8005dd8:	551a      	strb	r2, [r3, r4]
					}

				if(run_motor_n(ADC_val[0],ADC_val[1])!=HAL_OK)
 8005dda:	4b32      	ldr	r3, [pc, #200]	; (8005ea4 <control_motors+0x248>)
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4b31      	ldr	r3, [pc, #196]	; (8005ea4 <control_motors+0x248>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	4619      	mov	r1, r3
 8005de4:	4610      	mov	r0, r2
 8005de6:	f7fa fc1f 	bl	8000628 <run_motor_n>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <control_motors+0x19a>
					{
						Error_Handler();
 8005df0:	f000 fb9e 	bl	8006530 <Error_Handler>
						return;
 8005df4:	e03d      	b.n	8005e72 <control_motors+0x216>
					}

					if(FLAG_OP==1)
 8005df6:	4b2a      	ldr	r3, [pc, #168]	; (8005ea0 <control_motors+0x244>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d127      	bne.n	8005e4e <control_motors+0x1f2>
					{
						status[0]=STOPPED;
 8005dfe:	4b23      	ldr	r3, [pc, #140]	; (8005e8c <control_motors+0x230>)
 8005e00:	2205      	movs	r2, #5
 8005e02:	801a      	strh	r2, [r3, #0]
						status[1]=STOPPED;
 8005e04:	4b21      	ldr	r3, [pc, #132]	; (8005e8c <control_motors+0x230>)
 8005e06:	2205      	movs	r2, #5
 8005e08:	805a      	strh	r2, [r3, #2]
						FLAG_OP=0;
 8005e0a:	4b25      	ldr	r3, [pc, #148]	; (8005ea0 <control_motors+0x244>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	701a      	strb	r2, [r3, #0]
					}
					break;
 8005e10:	e01d      	b.n	8005e4e <control_motors+0x1f2>
		case(STOPPED):
				control_nodos[0]=NOTSEND;
 8005e12:	4b1f      	ldr	r3, [pc, #124]	; (8005e90 <control_motors+0x234>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	701a      	strb	r2, [r3, #0]
				control_nodos[1]=NOTSEND;
 8005e18:	4b1d      	ldr	r3, [pc, #116]	; (8005e90 <control_motors+0x234>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	705a      	strb	r2, [r3, #1]
				status[0]=PREOPERATIONAL;
 8005e1e:	4b1b      	ldr	r3, [pc, #108]	; (8005e8c <control_motors+0x230>)
 8005e20:	2203      	movs	r2, #3
 8005e22:	801a      	strh	r2, [r3, #0]
				status[1]=PREOPERATIONAL;
 8005e24:	4b19      	ldr	r3, [pc, #100]	; (8005e8c <control_motors+0x230>)
 8005e26:	2203      	movs	r2, #3
 8005e28:	805a      	strh	r2, [r3, #2]
				if(send_NMT(RESTART)!=HAL_OK)
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	f7fa fe8a 	bl	8000b44 <send_NMT>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <control_motors+0x1e0>
				{
					Error_Handler();
 8005e36:	f000 fb7b 	bl	8006530 <Error_Handler>
					return;
 8005e3a:	e01a      	b.n	8005e72 <control_motors+0x216>
				}
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8005e3c:	2180      	movs	r1, #128	; 0x80
 8005e3e:	4817      	ldr	r0, [pc, #92]	; (8005e9c <control_motors+0x240>)
 8005e40:	f7fd f9eb 	bl	800321a <HAL_GPIO_TogglePin>
				break;
 8005e44:	e004      	b.n	8005e50 <control_motors+0x1f4>
				break;
 8005e46:	bf00      	nop
 8005e48:	e002      	b.n	8005e50 <control_motors+0x1f4>
			break;
 8005e4a:	bf00      	nop
 8005e4c:	e000      	b.n	8005e50 <control_motors+0x1f4>
					break;
 8005e4e:	bf00      	nop
	}
	/*Reseteo Variable control en el caso de volver a preoperational*/
	/* controlo alternadamente motor 1 y motor 2 --- RESETEO VARUABLES
	 *
	 */
	if(nodo==MOTOR1)
 8005e50:	4b0d      	ldr	r3, [pc, #52]	; (8005e88 <control_motors+0x22c>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d103      	bne.n	8005e60 <control_motors+0x204>
	{
		nodo=MOTOR2;
 8005e58:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <control_motors+0x22c>)
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	e006      	b.n	8005e6e <control_motors+0x212>
	}
	else if (nodo==MOTOR2)
 8005e60:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <control_motors+0x22c>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d102      	bne.n	8005e6e <control_motors+0x212>
	{
		nodo=MOTOR1;
 8005e68:	4b07      	ldr	r3, [pc, #28]	; (8005e88 <control_motors+0x22c>)
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	701a      	strb	r2, [r3, #0]
	}

	//PIDO INFO (CONSTANTEMENTE)---ciclos¿?7
	ask_for_info();
 8005e6e:	f7fa fdbf 	bl	80009f0 <ask_for_info>

 }
 8005e72:	372c      	adds	r7, #44	; 0x2c
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd90      	pop	{r4, r7, pc}
 8005e78:	200001f0 	.word	0x200001f0
 8005e7c:	2000031c 	.word	0x2000031c
 8005e80:	200002bc 	.word	0x200002bc
 8005e84:	20000364 	.word	0x20000364
 8005e88:	2000000d 	.word	0x2000000d
 8005e8c:	2000036c 	.word	0x2000036c
 8005e90:	20000040 	.word	0x20000040
 8005e94:	20000044 	.word	0x20000044
 8005e98:	20000048 	.word	0x20000048
 8005e9c:	40020400 	.word	0x40020400
 8005ea0:	20000094 	.word	0x20000094
 8005ea4:	200002cc 	.word	0x200002cc

08005ea8 <mysystem_start>:

extern short int velocity[2],DcLink[2],DcCurrent[2],MotorTemp[2],MotorCrr[2],Torque[2],VelocityAVG[2],ControllerTemp[2],VelocityAct[2];
CAN_FilterTypeDef sFilterConfig;

void mysystem_start(void)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
	/*Inicio configuracion CAN*/

	  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8005eac:	2102      	movs	r1, #2
 8005eae:	4843      	ldr	r0, [pc, #268]	; (8005fbc <mysystem_start+0x114>)
 8005eb0:	f7fc f8d5 	bl	800205e <HAL_CAN_ActivateNotification>
	  HAL_CAN_Start(&hcan1);
 8005eb4:	4841      	ldr	r0, [pc, #260]	; (8005fbc <mysystem_start+0x114>)
 8005eb6:	f7fb fe7d 	bl	8001bb4 <HAL_CAN_Start>

		/*Inicio configuracion Filtro can*/
	 sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8005eba:	4b41      	ldr	r3, [pc, #260]	; (8005fc0 <mysystem_start+0x118>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	611a      	str	r2, [r3, #16]
	 sFilterConfig.FilterIdHigh=0x245<<5;
 8005ec0:	4b3f      	ldr	r3, [pc, #252]	; (8005fc0 <mysystem_start+0x118>)
 8005ec2:	f644 02a0 	movw	r2, #18592	; 0x48a0
 8005ec6:	601a      	str	r2, [r3, #0]
	 sFilterConfig.FilterIdLow=0;
 8005ec8:	4b3d      	ldr	r3, [pc, #244]	; (8005fc0 <mysystem_start+0x118>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	605a      	str	r2, [r3, #4]
	 sFilterConfig.FilterMaskIdHigh=0;
 8005ece:	4b3c      	ldr	r3, [pc, #240]	; (8005fc0 <mysystem_start+0x118>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	609a      	str	r2, [r3, #8]
	 sFilterConfig.FilterMaskIdLow=0;
 8005ed4:	4b3a      	ldr	r3, [pc, #232]	; (8005fc0 <mysystem_start+0x118>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	60da      	str	r2, [r3, #12]
	 sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8005eda:	4b39      	ldr	r3, [pc, #228]	; (8005fc0 <mysystem_start+0x118>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	61da      	str	r2, [r3, #28]
	 sFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 8005ee0:	4b37      	ldr	r3, [pc, #220]	; (8005fc0 <mysystem_start+0x118>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	621a      	str	r2, [r3, #32]

	 HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8005ee6:	4936      	ldr	r1, [pc, #216]	; (8005fc0 <mysystem_start+0x118>)
 8005ee8:	4834      	ldr	r0, [pc, #208]	; (8005fbc <mysystem_start+0x114>)
 8005eea:	f7fb fd77 	bl	80019dc <HAL_CAN_ConfigFilter>

	 /*Inicio ADC con DMA */
	  HAL_ADC_Start_DMA(&hadc1,ADC_val, ENTRADAS_ADC);
 8005eee:	2202      	movs	r2, #2
 8005ef0:	4934      	ldr	r1, [pc, #208]	; (8005fc4 <mysystem_start+0x11c>)
 8005ef2:	4835      	ldr	r0, [pc, #212]	; (8005fc8 <mysystem_start+0x120>)
 8005ef4:	f7fb f890 	bl	8001018 <HAL_ADC_Start_DMA>

	  /*TIMER 2 PARA FUNCIONES.
	   * (Creo que no lo uso al final se puede eliminar
	   * */
	  HAL_TIM_Base_Start_IT(&htim2);
 8005ef8:	4834      	ldr	r0, [pc, #208]	; (8005fcc <mysystem_start+0x124>)
 8005efa:	f7fe faa1 	bl	8004440 <HAL_TIM_Base_Start_IT>

	  FLAG_USART=0;
 8005efe:	4b34      	ldr	r3, [pc, #208]	; (8005fd0 <mysystem_start+0x128>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	701a      	strb	r2, [r3, #0]
	  /*Inicio USART3*/
	  HAL_UART_Receive_DMA(&huart3,&FLAG_USART,1);
 8005f04:	2201      	movs	r2, #1
 8005f06:	4932      	ldr	r1, [pc, #200]	; (8005fd0 <mysystem_start+0x128>)
 8005f08:	4832      	ldr	r0, [pc, #200]	; (8005fd4 <mysystem_start+0x12c>)
 8005f0a:	f7fe ff7f 	bl	8004e0c <HAL_UART_Receive_DMA>


		/*Inicio mis variables y FLAGS*/
	  status[0]= INITIALIZATION;
 8005f0e:	4b32      	ldr	r3, [pc, #200]	; (8005fd8 <mysystem_start+0x130>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	801a      	strh	r2, [r3, #0]
	  status[1]= INITIALIZATION;
 8005f14:	4b30      	ldr	r3, [pc, #192]	; (8005fd8 <mysystem_start+0x130>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	805a      	strh	r2, [r3, #2]
	  FLAG_OP=0;
 8005f1a:	4b30      	ldr	r3, [pc, #192]	; (8005fdc <mysystem_start+0x134>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	701a      	strb	r2, [r3, #0]
	  FLAG_CAN=0;
 8005f20:	4b2f      	ldr	r3, [pc, #188]	; (8005fe0 <mysystem_start+0x138>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	701a      	strb	r2, [r3, #0]


	  /// esto es para prueba con software, se tiene que borrar
	  velocity[0]=0xffff;
 8005f26:	4b2f      	ldr	r3, [pc, #188]	; (8005fe4 <mysystem_start+0x13c>)
 8005f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f2c:	801a      	strh	r2, [r3, #0]
	  velocity[1]=0xffff;
 8005f2e:	4b2d      	ldr	r3, [pc, #180]	; (8005fe4 <mysystem_start+0x13c>)
 8005f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f34:	805a      	strh	r2, [r3, #2]
	  DcLink[0]=0xffff;
 8005f36:	4b2c      	ldr	r3, [pc, #176]	; (8005fe8 <mysystem_start+0x140>)
 8005f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f3c:	801a      	strh	r2, [r3, #0]
	  DcLink[1]=0xffff;
 8005f3e:	4b2a      	ldr	r3, [pc, #168]	; (8005fe8 <mysystem_start+0x140>)
 8005f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f44:	805a      	strh	r2, [r3, #2]
	  DcCurrent[0]=0xffff;
 8005f46:	4b29      	ldr	r3, [pc, #164]	; (8005fec <mysystem_start+0x144>)
 8005f48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f4c:	801a      	strh	r2, [r3, #0]
	  DcCurrent[1]=0xffff;
 8005f4e:	4b27      	ldr	r3, [pc, #156]	; (8005fec <mysystem_start+0x144>)
 8005f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f54:	805a      	strh	r2, [r3, #2]
	  MotorTemp[0]=0xffff;
 8005f56:	4b26      	ldr	r3, [pc, #152]	; (8005ff0 <mysystem_start+0x148>)
 8005f58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f5c:	801a      	strh	r2, [r3, #0]
	  MotorTemp[1]=0xffff;
 8005f5e:	4b24      	ldr	r3, [pc, #144]	; (8005ff0 <mysystem_start+0x148>)
 8005f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f64:	805a      	strh	r2, [r3, #2]
	  MotorCrr[0]=0xffff;
 8005f66:	4b23      	ldr	r3, [pc, #140]	; (8005ff4 <mysystem_start+0x14c>)
 8005f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f6c:	801a      	strh	r2, [r3, #0]
	  MotorCrr[1]=0xffff;
 8005f6e:	4b21      	ldr	r3, [pc, #132]	; (8005ff4 <mysystem_start+0x14c>)
 8005f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f74:	805a      	strh	r2, [r3, #2]
	  Torque[0]=0xffff;
 8005f76:	4b20      	ldr	r3, [pc, #128]	; (8005ff8 <mysystem_start+0x150>)
 8005f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f7c:	801a      	strh	r2, [r3, #0]
	  Torque[1]=0xffff;
 8005f7e:	4b1e      	ldr	r3, [pc, #120]	; (8005ff8 <mysystem_start+0x150>)
 8005f80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f84:	805a      	strh	r2, [r3, #2]
	  VelocityAVG[0]=0xffff;
 8005f86:	4b1d      	ldr	r3, [pc, #116]	; (8005ffc <mysystem_start+0x154>)
 8005f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f8c:	801a      	strh	r2, [r3, #0]
	  VelocityAVG[1]=0xffff;
 8005f8e:	4b1b      	ldr	r3, [pc, #108]	; (8005ffc <mysystem_start+0x154>)
 8005f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f94:	805a      	strh	r2, [r3, #2]
	  ControllerTemp[0]=0xffff;
 8005f96:	4b1a      	ldr	r3, [pc, #104]	; (8006000 <mysystem_start+0x158>)
 8005f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f9c:	801a      	strh	r2, [r3, #0]
	  ControllerTemp[1]=0xffff;
 8005f9e:	4b18      	ldr	r3, [pc, #96]	; (8006000 <mysystem_start+0x158>)
 8005fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fa4:	805a      	strh	r2, [r3, #2]
	  VelocityAct[0]=0xffff;
 8005fa6:	4b17      	ldr	r3, [pc, #92]	; (8006004 <mysystem_start+0x15c>)
 8005fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fac:	801a      	strh	r2, [r3, #0]
	  VelocityAct[1]=0xffff;
 8005fae:	4b15      	ldr	r3, [pc, #84]	; (8006004 <mysystem_start+0x15c>)
 8005fb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fb4:	805a      	strh	r2, [r3, #2]
}
 8005fb6:	bf00      	nop
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	2000033c 	.word	0x2000033c
 8005fc0:	2000006c 	.word	0x2000006c
 8005fc4:	200002cc 	.word	0x200002cc
 8005fc8:	20000200 	.word	0x20000200
 8005fcc:	200002dc 	.word	0x200002dc
 8005fd0:	20000364 	.word	0x20000364
 8005fd4:	200000f8 	.word	0x200000f8
 8005fd8:	2000036c 	.word	0x2000036c
 8005fdc:	20000094 	.word	0x20000094
 8005fe0:	200001f0 	.word	0x200001f0
 8005fe4:	200002b4 	.word	0x200002b4
 8005fe8:	20000180 	.word	0x20000180
 8005fec:	200002c4 	.word	0x200002c4
 8005ff0:	20000378 	.word	0x20000378
 8005ff4:	2000024c 	.word	0x2000024c
 8005ff8:	20000178 	.word	0x20000178
 8005ffc:	20000370 	.word	0x20000370
 8006000:	200001f8 	.word	0x200001f8
 8006004:	200002d4 	.word	0x200002d4

08006008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800600c:	f7fa fdfe 	bl	8000c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006010:	f000 f82e 	bl	8006070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006014:	f000 fa04 	bl	8006420 <MX_GPIO_Init>
  MX_DMA_Init();
 8006018:	f000 f9c8 	bl	80063ac <MX_DMA_Init>
  MX_CAN1_Init();
 800601c:	f000 f912 	bl	8006244 <MX_CAN1_Init>
  MX_ADC1_Init();
 8006020:	f000 f8b0 	bl	8006184 <MX_ADC1_Init>
  MX_TIM2_Init();
 8006024:	f000 f944 	bl	80062b0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8006028:	f000 f990 	bl	800634c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  mysystem_start();
 800602c:	f7ff ff3c 	bl	8005ea8 <mysystem_start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
      {
	  direction=ADC_val[1];
 8006030:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <main+0x58>)
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	461a      	mov	r2, r3
 8006036:	4b0b      	ldr	r3, [pc, #44]	; (8006064 <main+0x5c>)
 8006038:	601a      	str	r2, [r3, #0]
	  throttle=ADC_val[0];
 800603a:	4b09      	ldr	r3, [pc, #36]	; (8006060 <main+0x58>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	4b09      	ldr	r3, [pc, #36]	; (8006068 <main+0x60>)
 8006042:	601a      	str	r2, [r3, #0]
	  brake=0;
 8006044:	4b09      	ldr	r3, [pc, #36]	; (800606c <main+0x64>)
 8006046:	2200      	movs	r2, #0
 8006048:	601a      	str	r2, [r3, #0]

	  control_motors(throttle,direction,brake);
 800604a:	4b07      	ldr	r3, [pc, #28]	; (8006068 <main+0x60>)
 800604c:	6818      	ldr	r0, [r3, #0]
 800604e:	4b05      	ldr	r3, [pc, #20]	; (8006064 <main+0x5c>)
 8006050:	6819      	ldr	r1, [r3, #0]
 8006052:	4b06      	ldr	r3, [pc, #24]	; (800606c <main+0x64>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	f7ff fe00 	bl	8005c5c <control_motors>
	  direction=ADC_val[1];
 800605c:	e7e8      	b.n	8006030 <main+0x28>
 800605e:	bf00      	nop
 8006060:	200002cc 	.word	0x200002cc
 8006064:	200001f4 	.word	0x200001f4
 8006068:	200001e8 	.word	0x200001e8
 800606c:	20000368 	.word	0x20000368

08006070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b0b8      	sub	sp, #224	; 0xe0
 8006074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006076:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800607a:	2234      	movs	r2, #52	; 0x34
 800607c:	2100      	movs	r1, #0
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fdc2 	bl	8006c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006084:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	605a      	str	r2, [r3, #4]
 800608e:	609a      	str	r2, [r3, #8]
 8006090:	60da      	str	r2, [r3, #12]
 8006092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006094:	f107 0308 	add.w	r3, r7, #8
 8006098:	2290      	movs	r2, #144	; 0x90
 800609a:	2100      	movs	r1, #0
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fdb3 	bl	8006c08 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80060a2:	4b36      	ldr	r3, [pc, #216]	; (800617c <SystemClock_Config+0x10c>)
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	4a35      	ldr	r2, [pc, #212]	; (800617c <SystemClock_Config+0x10c>)
 80060a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ac:	6413      	str	r3, [r2, #64]	; 0x40
 80060ae:	4b33      	ldr	r3, [pc, #204]	; (800617c <SystemClock_Config+0x10c>)
 80060b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b6:	607b      	str	r3, [r7, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80060ba:	4b31      	ldr	r3, [pc, #196]	; (8006180 <SystemClock_Config+0x110>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80060c2:	4a2f      	ldr	r2, [pc, #188]	; (8006180 <SystemClock_Config+0x110>)
 80060c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	4b2d      	ldr	r3, [pc, #180]	; (8006180 <SystemClock_Config+0x110>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80060d2:	603b      	str	r3, [r7, #0]
 80060d4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80060d6:	2301      	movs	r3, #1
 80060d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80060dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80060e4:	2302      	movs	r3, #2
 80060e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80060ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80060ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80060f2:	2304      	movs	r3, #4
 80060f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80060f8:	2360      	movs	r3, #96	; 0x60
 80060fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80060fe:	2302      	movs	r3, #2
 8006100:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006104:	2304      	movs	r3, #4
 8006106:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800610a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800610e:	4618      	mov	r0, r3
 8006110:	f7fd f89e 	bl	8003250 <HAL_RCC_OscConfig>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800611a:	f000 fa09 	bl	8006530 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800611e:	230f      	movs	r3, #15
 8006120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006124:	2302      	movs	r3, #2
 8006126:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800612a:	2300      	movs	r3, #0
 800612c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006130:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006134:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8006138:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800613c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006140:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006144:	2103      	movs	r1, #3
 8006146:	4618      	mov	r0, r3
 8006148:	f7fd fb30 	bl	80037ac <HAL_RCC_ClockConfig>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8006152:	f000 f9ed 	bl	8006530 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006156:	f44f 7380 	mov.w	r3, #256	; 0x100
 800615a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800615c:	2300      	movs	r3, #0
 800615e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006160:	f107 0308 	add.w	r3, r7, #8
 8006164:	4618      	mov	r0, r3
 8006166:	f7fd fd19 	bl	8003b9c <HAL_RCCEx_PeriphCLKConfig>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8006170:	f000 f9de 	bl	8006530 <Error_Handler>
  }
}
 8006174:	bf00      	nop
 8006176:	37e0      	adds	r7, #224	; 0xe0
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40023800 	.word	0x40023800
 8006180:	40007000 	.word	0x40007000

08006184 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800618a:	463b      	mov	r3, r7
 800618c:	2200      	movs	r2, #0
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	605a      	str	r2, [r3, #4]
 8006192:	609a      	str	r2, [r3, #8]
 8006194:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8006196:	4b28      	ldr	r3, [pc, #160]	; (8006238 <MX_ADC1_Init+0xb4>)
 8006198:	4a28      	ldr	r2, [pc, #160]	; (800623c <MX_ADC1_Init+0xb8>)
 800619a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800619c:	4b26      	ldr	r3, [pc, #152]	; (8006238 <MX_ADC1_Init+0xb4>)
 800619e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80061a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80061a4:	4b24      	ldr	r3, [pc, #144]	; (8006238 <MX_ADC1_Init+0xb4>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80061aa:	4b23      	ldr	r3, [pc, #140]	; (8006238 <MX_ADC1_Init+0xb4>)
 80061ac:	2201      	movs	r2, #1
 80061ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80061b0:	4b21      	ldr	r3, [pc, #132]	; (8006238 <MX_ADC1_Init+0xb4>)
 80061b2:	2201      	movs	r2, #1
 80061b4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80061b6:	4b20      	ldr	r3, [pc, #128]	; (8006238 <MX_ADC1_Init+0xb4>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80061be:	4b1e      	ldr	r3, [pc, #120]	; (8006238 <MX_ADC1_Init+0xb4>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80061c4:	4b1c      	ldr	r3, [pc, #112]	; (8006238 <MX_ADC1_Init+0xb4>)
 80061c6:	4a1e      	ldr	r2, [pc, #120]	; (8006240 <MX_ADC1_Init+0xbc>)
 80061c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80061ca:	4b1b      	ldr	r3, [pc, #108]	; (8006238 <MX_ADC1_Init+0xb4>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80061d0:	4b19      	ldr	r3, [pc, #100]	; (8006238 <MX_ADC1_Init+0xb4>)
 80061d2:	2202      	movs	r2, #2
 80061d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80061d6:	4b18      	ldr	r3, [pc, #96]	; (8006238 <MX_ADC1_Init+0xb4>)
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80061de:	4b16      	ldr	r3, [pc, #88]	; (8006238 <MX_ADC1_Init+0xb4>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80061e4:	4814      	ldr	r0, [pc, #80]	; (8006238 <MX_ADC1_Init+0xb4>)
 80061e6:	f7fa fd91 	bl	8000d0c <HAL_ADC_Init>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80061f0:	f000 f99e 	bl	8006530 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80061f4:	2306      	movs	r3, #6
 80061f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80061f8:	2301      	movs	r3, #1
 80061fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80061fc:	2301      	movs	r3, #1
 80061fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006200:	463b      	mov	r3, r7
 8006202:	4619      	mov	r1, r3
 8006204:	480c      	ldr	r0, [pc, #48]	; (8006238 <MX_ADC1_Init+0xb4>)
 8006206:	f7fb f81d 	bl	8001244 <HAL_ADC_ConfigChannel>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8006210:	f000 f98e 	bl	8006530 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8006214:	2309      	movs	r3, #9
 8006216:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8006218:	2302      	movs	r3, #2
 800621a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800621c:	463b      	mov	r3, r7
 800621e:	4619      	mov	r1, r3
 8006220:	4805      	ldr	r0, [pc, #20]	; (8006238 <MX_ADC1_Init+0xb4>)
 8006222:	f7fb f80f 	bl	8001244 <HAL_ADC_ConfigChannel>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800622c:	f000 f980 	bl	8006530 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006230:	bf00      	nop
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	20000200 	.word	0x20000200
 800623c:	40012000 	.word	0x40012000
 8006240:	0f000001 	.word	0x0f000001

08006244 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8006248:	4b17      	ldr	r3, [pc, #92]	; (80062a8 <MX_CAN1_Init+0x64>)
 800624a:	4a18      	ldr	r2, [pc, #96]	; (80062ac <MX_CAN1_Init+0x68>)
 800624c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800624e:	4b16      	ldr	r3, [pc, #88]	; (80062a8 <MX_CAN1_Init+0x64>)
 8006250:	2203      	movs	r2, #3
 8006252:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006254:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <MX_CAN1_Init+0x64>)
 8006256:	2200      	movs	r2, #0
 8006258:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800625a:	4b13      	ldr	r3, [pc, #76]	; (80062a8 <MX_CAN1_Init+0x64>)
 800625c:	2200      	movs	r2, #0
 800625e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8006260:	4b11      	ldr	r3, [pc, #68]	; (80062a8 <MX_CAN1_Init+0x64>)
 8006262:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8006266:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8006268:	4b0f      	ldr	r3, [pc, #60]	; (80062a8 <MX_CAN1_Init+0x64>)
 800626a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800626e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006270:	4b0d      	ldr	r3, [pc, #52]	; (80062a8 <MX_CAN1_Init+0x64>)
 8006272:	2200      	movs	r2, #0
 8006274:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8006276:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <MX_CAN1_Init+0x64>)
 8006278:	2200      	movs	r2, #0
 800627a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 800627c:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <MX_CAN1_Init+0x64>)
 800627e:	2201      	movs	r2, #1
 8006280:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8006282:	4b09      	ldr	r3, [pc, #36]	; (80062a8 <MX_CAN1_Init+0x64>)
 8006284:	2201      	movs	r2, #1
 8006286:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006288:	4b07      	ldr	r3, [pc, #28]	; (80062a8 <MX_CAN1_Init+0x64>)
 800628a:	2200      	movs	r2, #0
 800628c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800628e:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <MX_CAN1_Init+0x64>)
 8006290:	2200      	movs	r2, #0
 8006292:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006294:	4804      	ldr	r0, [pc, #16]	; (80062a8 <MX_CAN1_Init+0x64>)
 8006296:	f7fb faa5 	bl	80017e4 <HAL_CAN_Init>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80062a0:	f000 f946 	bl	8006530 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80062a4:	bf00      	nop
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	2000033c 	.word	0x2000033c
 80062ac:	40006400 	.word	0x40006400

080062b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b088      	sub	sp, #32
 80062b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062b6:	f107 0310 	add.w	r3, r7, #16
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	605a      	str	r2, [r3, #4]
 80062c0:	609a      	str	r2, [r3, #8]
 80062c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062c4:	1d3b      	adds	r3, r7, #4
 80062c6:	2200      	movs	r2, #0
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	605a      	str	r2, [r3, #4]
 80062cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80062ce:	4b1e      	ldr	r3, [pc, #120]	; (8006348 <MX_TIM2_Init+0x98>)
 80062d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80062d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 80062d6:	4b1c      	ldr	r3, [pc, #112]	; (8006348 <MX_TIM2_Init+0x98>)
 80062d8:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80062dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062de:	4b1a      	ldr	r3, [pc, #104]	; (8006348 <MX_TIM2_Init+0x98>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 80062e4:	4b18      	ldr	r3, [pc, #96]	; (8006348 <MX_TIM2_Init+0x98>)
 80062e6:	f240 12f3 	movw	r2, #499	; 0x1f3
 80062ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062ec:	4b16      	ldr	r3, [pc, #88]	; (8006348 <MX_TIM2_Init+0x98>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062f2:	4b15      	ldr	r3, [pc, #84]	; (8006348 <MX_TIM2_Init+0x98>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80062f8:	4813      	ldr	r0, [pc, #76]	; (8006348 <MX_TIM2_Init+0x98>)
 80062fa:	f7fe f875 	bl	80043e8 <HAL_TIM_Base_Init>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d001      	beq.n	8006308 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8006304:	f000 f914 	bl	8006530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800630c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800630e:	f107 0310 	add.w	r3, r7, #16
 8006312:	4619      	mov	r1, r3
 8006314:	480c      	ldr	r0, [pc, #48]	; (8006348 <MX_TIM2_Init+0x98>)
 8006316:	f7fe f9dd 	bl	80046d4 <HAL_TIM_ConfigClockSource>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8006320:	f000 f906 	bl	8006530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006324:	2300      	movs	r3, #0
 8006326:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006328:	2300      	movs	r3, #0
 800632a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800632c:	1d3b      	adds	r3, r7, #4
 800632e:	4619      	mov	r1, r3
 8006330:	4805      	ldr	r0, [pc, #20]	; (8006348 <MX_TIM2_Init+0x98>)
 8006332:	f7fe fbf5 	bl	8004b20 <HAL_TIMEx_MasterConfigSynchronization>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800633c:	f000 f8f8 	bl	8006530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006340:	bf00      	nop
 8006342:	3720      	adds	r7, #32
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	200002dc 	.word	0x200002dc

0800634c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006350:	4b14      	ldr	r3, [pc, #80]	; (80063a4 <MX_USART3_UART_Init+0x58>)
 8006352:	4a15      	ldr	r2, [pc, #84]	; (80063a8 <MX_USART3_UART_Init+0x5c>)
 8006354:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006356:	4b13      	ldr	r3, [pc, #76]	; (80063a4 <MX_USART3_UART_Init+0x58>)
 8006358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800635c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800635e:	4b11      	ldr	r3, [pc, #68]	; (80063a4 <MX_USART3_UART_Init+0x58>)
 8006360:	2200      	movs	r2, #0
 8006362:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006364:	4b0f      	ldr	r3, [pc, #60]	; (80063a4 <MX_USART3_UART_Init+0x58>)
 8006366:	2200      	movs	r2, #0
 8006368:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800636a:	4b0e      	ldr	r3, [pc, #56]	; (80063a4 <MX_USART3_UART_Init+0x58>)
 800636c:	2200      	movs	r2, #0
 800636e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006370:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <MX_USART3_UART_Init+0x58>)
 8006372:	220c      	movs	r2, #12
 8006374:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006376:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <MX_USART3_UART_Init+0x58>)
 8006378:	2200      	movs	r2, #0
 800637a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800637c:	4b09      	ldr	r3, [pc, #36]	; (80063a4 <MX_USART3_UART_Init+0x58>)
 800637e:	2200      	movs	r2, #0
 8006380:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006382:	4b08      	ldr	r3, [pc, #32]	; (80063a4 <MX_USART3_UART_Init+0x58>)
 8006384:	2200      	movs	r2, #0
 8006386:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006388:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <MX_USART3_UART_Init+0x58>)
 800638a:	2200      	movs	r2, #0
 800638c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800638e:	4805      	ldr	r0, [pc, #20]	; (80063a4 <MX_USART3_UART_Init+0x58>)
 8006390:	f7fe fc72 	bl	8004c78 <HAL_UART_Init>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800639a:	f000 f8c9 	bl	8006530 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800639e:	bf00      	nop
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	200000f8 	.word	0x200000f8
 80063a8:	40004800 	.word	0x40004800

080063ac <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80063b2:	4b1a      	ldr	r3, [pc, #104]	; (800641c <MX_DMA_Init+0x70>)
 80063b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b6:	4a19      	ldr	r2, [pc, #100]	; (800641c <MX_DMA_Init+0x70>)
 80063b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80063bc:	6313      	str	r3, [r2, #48]	; 0x30
 80063be:	4b17      	ldr	r3, [pc, #92]	; (800641c <MX_DMA_Init+0x70>)
 80063c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063c6:	607b      	str	r3, [r7, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80063ca:	4b14      	ldr	r3, [pc, #80]	; (800641c <MX_DMA_Init+0x70>)
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	4a13      	ldr	r2, [pc, #76]	; (800641c <MX_DMA_Init+0x70>)
 80063d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063d4:	6313      	str	r3, [r2, #48]	; 0x30
 80063d6:	4b11      	ldr	r3, [pc, #68]	; (800641c <MX_DMA_Init+0x70>)
 80063d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063de:	603b      	str	r3, [r7, #0]
 80063e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80063e2:	2200      	movs	r2, #0
 80063e4:	2100      	movs	r1, #0
 80063e6:	200c      	movs	r0, #12
 80063e8:	f7fc f96d 	bl	80026c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80063ec:	200c      	movs	r0, #12
 80063ee:	f7fc f986 	bl	80026fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80063f2:	2200      	movs	r2, #0
 80063f4:	2100      	movs	r1, #0
 80063f6:	200e      	movs	r0, #14
 80063f8:	f7fc f965 	bl	80026c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80063fc:	200e      	movs	r0, #14
 80063fe:	f7fc f97e 	bl	80026fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8006402:	2200      	movs	r2, #0
 8006404:	2100      	movs	r1, #0
 8006406:	2038      	movs	r0, #56	; 0x38
 8006408:	f7fc f95d 	bl	80026c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800640c:	2038      	movs	r0, #56	; 0x38
 800640e:	f7fc f976 	bl	80026fe <HAL_NVIC_EnableIRQ>

}
 8006412:	bf00      	nop
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	40023800 	.word	0x40023800

08006420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08a      	sub	sp, #40	; 0x28
 8006424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006426:	f107 0314 	add.w	r3, r7, #20
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	605a      	str	r2, [r3, #4]
 8006430:	609a      	str	r2, [r3, #8]
 8006432:	60da      	str	r2, [r3, #12]
 8006434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006436:	4b39      	ldr	r3, [pc, #228]	; (800651c <MX_GPIO_Init+0xfc>)
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	4a38      	ldr	r2, [pc, #224]	; (800651c <MX_GPIO_Init+0xfc>)
 800643c:	f043 0304 	orr.w	r3, r3, #4
 8006440:	6313      	str	r3, [r2, #48]	; 0x30
 8006442:	4b36      	ldr	r3, [pc, #216]	; (800651c <MX_GPIO_Init+0xfc>)
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	613b      	str	r3, [r7, #16]
 800644c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800644e:	4b33      	ldr	r3, [pc, #204]	; (800651c <MX_GPIO_Init+0xfc>)
 8006450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006452:	4a32      	ldr	r2, [pc, #200]	; (800651c <MX_GPIO_Init+0xfc>)
 8006454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006458:	6313      	str	r3, [r2, #48]	; 0x30
 800645a:	4b30      	ldr	r3, [pc, #192]	; (800651c <MX_GPIO_Init+0xfc>)
 800645c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006466:	4b2d      	ldr	r3, [pc, #180]	; (800651c <MX_GPIO_Init+0xfc>)
 8006468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646a:	4a2c      	ldr	r2, [pc, #176]	; (800651c <MX_GPIO_Init+0xfc>)
 800646c:	f043 0301 	orr.w	r3, r3, #1
 8006470:	6313      	str	r3, [r2, #48]	; 0x30
 8006472:	4b2a      	ldr	r3, [pc, #168]	; (800651c <MX_GPIO_Init+0xfc>)
 8006474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	60bb      	str	r3, [r7, #8]
 800647c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800647e:	4b27      	ldr	r3, [pc, #156]	; (800651c <MX_GPIO_Init+0xfc>)
 8006480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006482:	4a26      	ldr	r2, [pc, #152]	; (800651c <MX_GPIO_Init+0xfc>)
 8006484:	f043 0302 	orr.w	r3, r3, #2
 8006488:	6313      	str	r3, [r2, #48]	; 0x30
 800648a:	4b24      	ldr	r3, [pc, #144]	; (800651c <MX_GPIO_Init+0xfc>)
 800648c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	607b      	str	r3, [r7, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006496:	4b21      	ldr	r3, [pc, #132]	; (800651c <MX_GPIO_Init+0xfc>)
 8006498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649a:	4a20      	ldr	r2, [pc, #128]	; (800651c <MX_GPIO_Init+0xfc>)
 800649c:	f043 0308 	orr.w	r3, r3, #8
 80064a0:	6313      	str	r3, [r2, #48]	; 0x30
 80064a2:	4b1e      	ldr	r3, [pc, #120]	; (800651c <MX_GPIO_Init+0xfc>)
 80064a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	603b      	str	r3, [r7, #0]
 80064ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7, GPIO_PIN_RESET);
 80064ae:	2200      	movs	r2, #0
 80064b0:	f24c 0181 	movw	r1, #49281	; 0xc081
 80064b4:	481a      	ldr	r0, [pc, #104]	; (8006520 <MX_GPIO_Init+0x100>)
 80064b6:	f7fc fe97 	bl	80031e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80064ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80064c0:	4b18      	ldr	r3, [pc, #96]	; (8006524 <MX_GPIO_Init+0x104>)
 80064c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064c8:	f107 0314 	add.w	r3, r7, #20
 80064cc:	4619      	mov	r1, r3
 80064ce:	4816      	ldr	r0, [pc, #88]	; (8006528 <MX_GPIO_Init+0x108>)
 80064d0:	f7fc fcc8 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80064d4:	230c      	movs	r3, #12
 80064d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064d8:	2302      	movs	r3, #2
 80064da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064dc:	2300      	movs	r3, #0
 80064de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064e0:	2303      	movs	r3, #3
 80064e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80064e4:	2307      	movs	r3, #7
 80064e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064e8:	f107 0314 	add.w	r3, r7, #20
 80064ec:	4619      	mov	r1, r3
 80064ee:	480f      	ldr	r0, [pc, #60]	; (800652c <MX_GPIO_Init+0x10c>)
 80064f0:	f7fc fcb8 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB15 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7;
 80064f4:	f24c 0381 	movw	r3, #49281	; 0xc081
 80064f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064fa:	2301      	movs	r3, #1
 80064fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064fe:	2300      	movs	r3, #0
 8006500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006502:	2300      	movs	r3, #0
 8006504:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006506:	f107 0314 	add.w	r3, r7, #20
 800650a:	4619      	mov	r1, r3
 800650c:	4804      	ldr	r0, [pc, #16]	; (8006520 <MX_GPIO_Init+0x100>)
 800650e:	f7fc fca9 	bl	8002e64 <HAL_GPIO_Init>

}
 8006512:	bf00      	nop
 8006514:	3728      	adds	r7, #40	; 0x28
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	40023800 	.word	0x40023800
 8006520:	40020400 	.word	0x40020400
 8006524:	10110000 	.word	0x10110000
 8006528:	40020800 	.word	0x40020800
 800652c:	40020000 	.word	0x40020000

08006530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	// enciendo pin rojo si hay algun error
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8006534:	2201      	movs	r2, #1
 8006536:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800653a:	4802      	ldr	r0, [pc, #8]	; (8006544 <Error_Handler+0x14>)
 800653c:	f7fc fe54 	bl	80031e8 <HAL_GPIO_WritePin>
	}*/

  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006540:	bf00      	nop
 8006542:	bd80      	pop	{r7, pc}
 8006544:	40020400 	.word	0x40020400

08006548 <preparo_y_envio_data_uart>:
extern short int velocity[2],DcLink[2],DcCurrent[2],MotorTemp[2],MotorCrr[2],Torque[2],VelocityAVG[2],ControllerTemp[2],VelocityAct[2];
extern int throttle,direction,brake;

//velocidad de motor 1,motor 2, crr 1, crr 2, temp 1 , temp 2 ,torq1 , torq2
void preparo_y_envio_data_uart(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
	uint16_t info_UART[UART_SIZE];

	info_UART[0]=velocity[0];		//Velocidad motor 1
 800654e:	4b20      	ldr	r3, [pc, #128]	; (80065d0 <preparo_y_envio_data_uart+0x88>)
 8006550:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006554:	b29b      	uxth	r3, r3
 8006556:	803b      	strh	r3, [r7, #0]
	info_UART[1]=velocity[1];		//Velocidad motor 2
 8006558:	4b1d      	ldr	r3, [pc, #116]	; (80065d0 <preparo_y_envio_data_uart+0x88>)
 800655a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800655e:	b29b      	uxth	r3, r3
 8006560:	807b      	strh	r3, [r7, #2]
	info_UART[2]=MotorCrr[0];		//corriente motor 1
 8006562:	4b1c      	ldr	r3, [pc, #112]	; (80065d4 <preparo_y_envio_data_uart+0x8c>)
 8006564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006568:	b29b      	uxth	r3, r3
 800656a:	80bb      	strh	r3, [r7, #4]
	info_UART[3]=MotorCrr[1];		//corriente motor 2
 800656c:	4b19      	ldr	r3, [pc, #100]	; (80065d4 <preparo_y_envio_data_uart+0x8c>)
 800656e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006572:	b29b      	uxth	r3, r3
 8006574:	80fb      	strh	r3, [r7, #6]
	info_UART[4]=MotorTemp[0];		//temperatura motor 1
 8006576:	4b18      	ldr	r3, [pc, #96]	; (80065d8 <preparo_y_envio_data_uart+0x90>)
 8006578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800657c:	b29b      	uxth	r3, r3
 800657e:	813b      	strh	r3, [r7, #8]
	info_UART[5]=MotorTemp[1];		//temperatura motor 2
 8006580:	4b15      	ldr	r3, [pc, #84]	; (80065d8 <preparo_y_envio_data_uart+0x90>)
 8006582:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006586:	b29b      	uxth	r3, r3
 8006588:	817b      	strh	r3, [r7, #10]
	info_UART[6]=Torque[0];		//torque motor 1
 800658a:	4b14      	ldr	r3, [pc, #80]	; (80065dc <preparo_y_envio_data_uart+0x94>)
 800658c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006590:	b29b      	uxth	r3, r3
 8006592:	81bb      	strh	r3, [r7, #12]
	info_UART[7]=Torque[1];		//torque motor 2
 8006594:	4b11      	ldr	r3, [pc, #68]	; (80065dc <preparo_y_envio_data_uart+0x94>)
 8006596:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800659a:	b29b      	uxth	r3, r3
 800659c:	81fb      	strh	r3, [r7, #14]
	info_UART[8]=throttle;				//Posicion acelerador
 800659e:	4b10      	ldr	r3, [pc, #64]	; (80065e0 <preparo_y_envio_data_uart+0x98>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	823b      	strh	r3, [r7, #16]
	info_UART[9]=brake;				//Freno
 80065a6:	4b0f      	ldr	r3, [pc, #60]	; (80065e4 <preparo_y_envio_data_uart+0x9c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	827b      	strh	r3, [r7, #18]
	info_UART[10]=direction;			//Volante
 80065ae:	4b0e      	ldr	r3, [pc, #56]	; (80065e8 <preparo_y_envio_data_uart+0xa0>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	82bb      	strh	r3, [r7, #20]
	info_UART[11]=VelocityAct[0];	//VELOCIDAD ACTUAL DEL AUTO, VALOR INVENTADO, MODIFICAR.
 80065b6:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <preparo_y_envio_data_uart+0xa4>)
 80065b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065bc:	b29b      	uxth	r3, r3
 80065be:	82fb      	strh	r3, [r7, #22]

	Pc_Communication(info_UART);	//envio info
 80065c0:	463b      	mov	r3, r7
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fa fb0c 	bl	8000be0 <Pc_Communication>
}
 80065c8:	bf00      	nop
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	200002b4 	.word	0x200002b4
 80065d4:	2000024c 	.word	0x2000024c
 80065d8:	20000378 	.word	0x20000378
 80065dc:	20000178 	.word	0x20000178
 80065e0:	200001e8 	.word	0x200001e8
 80065e4:	20000368 	.word	0x20000368
 80065e8:	200001f4 	.word	0x200001f4
 80065ec:	200002d4 	.word	0x200002d4

080065f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80065f6:	4b0f      	ldr	r3, [pc, #60]	; (8006634 <HAL_MspInit+0x44>)
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	4a0e      	ldr	r2, [pc, #56]	; (8006634 <HAL_MspInit+0x44>)
 80065fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006600:	6413      	str	r3, [r2, #64]	; 0x40
 8006602:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <HAL_MspInit+0x44>)
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800660a:	607b      	str	r3, [r7, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800660e:	4b09      	ldr	r3, [pc, #36]	; (8006634 <HAL_MspInit+0x44>)
 8006610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006612:	4a08      	ldr	r2, [pc, #32]	; (8006634 <HAL_MspInit+0x44>)
 8006614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006618:	6453      	str	r3, [r2, #68]	; 0x44
 800661a:	4b06      	ldr	r3, [pc, #24]	; (8006634 <HAL_MspInit+0x44>)
 800661c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	40023800 	.word	0x40023800

08006638 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b08a      	sub	sp, #40	; 0x28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006640:	f107 0314 	add.w	r3, r7, #20
 8006644:	2200      	movs	r2, #0
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	605a      	str	r2, [r3, #4]
 800664a:	609a      	str	r2, [r3, #8]
 800664c:	60da      	str	r2, [r3, #12]
 800664e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a3d      	ldr	r2, [pc, #244]	; (800674c <HAL_ADC_MspInit+0x114>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d173      	bne.n	8006742 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800665a:	4b3d      	ldr	r3, [pc, #244]	; (8006750 <HAL_ADC_MspInit+0x118>)
 800665c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665e:	4a3c      	ldr	r2, [pc, #240]	; (8006750 <HAL_ADC_MspInit+0x118>)
 8006660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006664:	6453      	str	r3, [r2, #68]	; 0x44
 8006666:	4b3a      	ldr	r3, [pc, #232]	; (8006750 <HAL_ADC_MspInit+0x118>)
 8006668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006672:	4b37      	ldr	r3, [pc, #220]	; (8006750 <HAL_ADC_MspInit+0x118>)
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	4a36      	ldr	r2, [pc, #216]	; (8006750 <HAL_ADC_MspInit+0x118>)
 8006678:	f043 0301 	orr.w	r3, r3, #1
 800667c:	6313      	str	r3, [r2, #48]	; 0x30
 800667e:	4b34      	ldr	r3, [pc, #208]	; (8006750 <HAL_ADC_MspInit+0x118>)
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800668a:	4b31      	ldr	r3, [pc, #196]	; (8006750 <HAL_ADC_MspInit+0x118>)
 800668c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668e:	4a30      	ldr	r2, [pc, #192]	; (8006750 <HAL_ADC_MspInit+0x118>)
 8006690:	f043 0302 	orr.w	r3, r3, #2
 8006694:	6313      	str	r3, [r2, #48]	; 0x30
 8006696:	4b2e      	ldr	r3, [pc, #184]	; (8006750 <HAL_ADC_MspInit+0x118>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	60bb      	str	r3, [r7, #8]
 80066a0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80066a2:	2340      	movs	r3, #64	; 0x40
 80066a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066a6:	2303      	movs	r3, #3
 80066a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066ae:	f107 0314 	add.w	r3, r7, #20
 80066b2:	4619      	mov	r1, r3
 80066b4:	4827      	ldr	r0, [pc, #156]	; (8006754 <HAL_ADC_MspInit+0x11c>)
 80066b6:	f7fc fbd5 	bl	8002e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80066ba:	2302      	movs	r3, #2
 80066bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066be:	2303      	movs	r3, #3
 80066c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066c2:	2300      	movs	r3, #0
 80066c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066c6:	f107 0314 	add.w	r3, r7, #20
 80066ca:	4619      	mov	r1, r3
 80066cc:	4822      	ldr	r0, [pc, #136]	; (8006758 <HAL_ADC_MspInit+0x120>)
 80066ce:	f7fc fbc9 	bl	8002e64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80066d2:	4b22      	ldr	r3, [pc, #136]	; (800675c <HAL_ADC_MspInit+0x124>)
 80066d4:	4a22      	ldr	r2, [pc, #136]	; (8006760 <HAL_ADC_MspInit+0x128>)
 80066d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80066d8:	4b20      	ldr	r3, [pc, #128]	; (800675c <HAL_ADC_MspInit+0x124>)
 80066da:	2200      	movs	r2, #0
 80066dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066de:	4b1f      	ldr	r3, [pc, #124]	; (800675c <HAL_ADC_MspInit+0x124>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80066e4:	4b1d      	ldr	r3, [pc, #116]	; (800675c <HAL_ADC_MspInit+0x124>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80066ea:	4b1c      	ldr	r3, [pc, #112]	; (800675c <HAL_ADC_MspInit+0x124>)
 80066ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80066f2:	4b1a      	ldr	r3, [pc, #104]	; (800675c <HAL_ADC_MspInit+0x124>)
 80066f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80066f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80066fa:	4b18      	ldr	r3, [pc, #96]	; (800675c <HAL_ADC_MspInit+0x124>)
 80066fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006700:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006702:	4b16      	ldr	r3, [pc, #88]	; (800675c <HAL_ADC_MspInit+0x124>)
 8006704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006708:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800670a:	4b14      	ldr	r3, [pc, #80]	; (800675c <HAL_ADC_MspInit+0x124>)
 800670c:	2200      	movs	r2, #0
 800670e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006710:	4b12      	ldr	r3, [pc, #72]	; (800675c <HAL_ADC_MspInit+0x124>)
 8006712:	2200      	movs	r2, #0
 8006714:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006716:	4811      	ldr	r0, [pc, #68]	; (800675c <HAL_ADC_MspInit+0x124>)
 8006718:	f7fc f80c 	bl	8002734 <HAL_DMA_Init>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8006722:	f7ff ff05 	bl	8006530 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a0c      	ldr	r2, [pc, #48]	; (800675c <HAL_ADC_MspInit+0x124>)
 800672a:	639a      	str	r2, [r3, #56]	; 0x38
 800672c:	4a0b      	ldr	r2, [pc, #44]	; (800675c <HAL_ADC_MspInit+0x124>)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006732:	2200      	movs	r2, #0
 8006734:	2100      	movs	r1, #0
 8006736:	2012      	movs	r0, #18
 8006738:	f7fb ffc5 	bl	80026c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800673c:	2012      	movs	r0, #18
 800673e:	f7fb ffde 	bl	80026fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006742:	bf00      	nop
 8006744:	3728      	adds	r7, #40	; 0x28
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	40012000 	.word	0x40012000
 8006750:	40023800 	.word	0x40023800
 8006754:	40020000 	.word	0x40020000
 8006758:	40020400 	.word	0x40020400
 800675c:	20000254 	.word	0x20000254
 8006760:	40026410 	.word	0x40026410

08006764 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b08a      	sub	sp, #40	; 0x28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800676c:	f107 0314 	add.w	r3, r7, #20
 8006770:	2200      	movs	r2, #0
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	605a      	str	r2, [r3, #4]
 8006776:	609a      	str	r2, [r3, #8]
 8006778:	60da      	str	r2, [r3, #12]
 800677a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a1b      	ldr	r2, [pc, #108]	; (80067f0 <HAL_CAN_MspInit+0x8c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d130      	bne.n	80067e8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006786:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <HAL_CAN_MspInit+0x90>)
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	4a1a      	ldr	r2, [pc, #104]	; (80067f4 <HAL_CAN_MspInit+0x90>)
 800678c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006790:	6413      	str	r3, [r2, #64]	; 0x40
 8006792:	4b18      	ldr	r3, [pc, #96]	; (80067f4 <HAL_CAN_MspInit+0x90>)
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800679a:	613b      	str	r3, [r7, #16]
 800679c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800679e:	4b15      	ldr	r3, [pc, #84]	; (80067f4 <HAL_CAN_MspInit+0x90>)
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	4a14      	ldr	r2, [pc, #80]	; (80067f4 <HAL_CAN_MspInit+0x90>)
 80067a4:	f043 0302 	orr.w	r3, r3, #2
 80067a8:	6313      	str	r3, [r2, #48]	; 0x30
 80067aa:	4b12      	ldr	r3, [pc, #72]	; (80067f4 <HAL_CAN_MspInit+0x90>)
 80067ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80067b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80067ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067bc:	2302      	movs	r3, #2
 80067be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067c4:	2303      	movs	r3, #3
 80067c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80067c8:	2309      	movs	r3, #9
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067cc:	f107 0314 	add.w	r3, r7, #20
 80067d0:	4619      	mov	r1, r3
 80067d2:	4809      	ldr	r0, [pc, #36]	; (80067f8 <HAL_CAN_MspInit+0x94>)
 80067d4:	f7fc fb46 	bl	8002e64 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80067d8:	2200      	movs	r2, #0
 80067da:	2100      	movs	r1, #0
 80067dc:	2014      	movs	r0, #20
 80067de:	f7fb ff72 	bl	80026c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80067e2:	2014      	movs	r0, #20
 80067e4:	f7fb ff8b 	bl	80026fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80067e8:	bf00      	nop
 80067ea:	3728      	adds	r7, #40	; 0x28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	40006400 	.word	0x40006400
 80067f4:	40023800 	.word	0x40023800
 80067f8:	40020400 	.word	0x40020400

080067fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800680c:	d113      	bne.n	8006836 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800680e:	4b0c      	ldr	r3, [pc, #48]	; (8006840 <HAL_TIM_Base_MspInit+0x44>)
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	4a0b      	ldr	r2, [pc, #44]	; (8006840 <HAL_TIM_Base_MspInit+0x44>)
 8006814:	f043 0301 	orr.w	r3, r3, #1
 8006818:	6413      	str	r3, [r2, #64]	; 0x40
 800681a:	4b09      	ldr	r3, [pc, #36]	; (8006840 <HAL_TIM_Base_MspInit+0x44>)
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006826:	2200      	movs	r2, #0
 8006828:	2100      	movs	r1, #0
 800682a:	201c      	movs	r0, #28
 800682c:	f7fb ff4b 	bl	80026c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006830:	201c      	movs	r0, #28
 8006832:	f7fb ff64 	bl	80026fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006836:	bf00      	nop
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	40023800 	.word	0x40023800

08006844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b08a      	sub	sp, #40	; 0x28
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800684c:	f107 0314 	add.w	r3, r7, #20
 8006850:	2200      	movs	r2, #0
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	605a      	str	r2, [r3, #4]
 8006856:	609a      	str	r2, [r3, #8]
 8006858:	60da      	str	r2, [r3, #12]
 800685a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a4b      	ldr	r2, [pc, #300]	; (8006990 <HAL_UART_MspInit+0x14c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	f040 8090 	bne.w	8006988 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006868:	4b4a      	ldr	r3, [pc, #296]	; (8006994 <HAL_UART_MspInit+0x150>)
 800686a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686c:	4a49      	ldr	r2, [pc, #292]	; (8006994 <HAL_UART_MspInit+0x150>)
 800686e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006872:	6413      	str	r3, [r2, #64]	; 0x40
 8006874:	4b47      	ldr	r3, [pc, #284]	; (8006994 <HAL_UART_MspInit+0x150>)
 8006876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800687c:	613b      	str	r3, [r7, #16]
 800687e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006880:	4b44      	ldr	r3, [pc, #272]	; (8006994 <HAL_UART_MspInit+0x150>)
 8006882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006884:	4a43      	ldr	r2, [pc, #268]	; (8006994 <HAL_UART_MspInit+0x150>)
 8006886:	f043 0308 	orr.w	r3, r3, #8
 800688a:	6313      	str	r3, [r2, #48]	; 0x30
 800688c:	4b41      	ldr	r3, [pc, #260]	; (8006994 <HAL_UART_MspInit+0x150>)
 800688e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006890:	f003 0308 	and.w	r3, r3, #8
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006898:	f44f 7340 	mov.w	r3, #768	; 0x300
 800689c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800689e:	2302      	movs	r3, #2
 80068a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068a6:	2303      	movs	r3, #3
 80068a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80068aa:	2307      	movs	r3, #7
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80068ae:	f107 0314 	add.w	r3, r7, #20
 80068b2:	4619      	mov	r1, r3
 80068b4:	4838      	ldr	r0, [pc, #224]	; (8006998 <HAL_UART_MspInit+0x154>)
 80068b6:	f7fc fad5 	bl	8002e64 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80068ba:	4b38      	ldr	r3, [pc, #224]	; (800699c <HAL_UART_MspInit+0x158>)
 80068bc:	4a38      	ldr	r2, [pc, #224]	; (80069a0 <HAL_UART_MspInit+0x15c>)
 80068be:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80068c0:	4b36      	ldr	r3, [pc, #216]	; (800699c <HAL_UART_MspInit+0x158>)
 80068c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80068c6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068c8:	4b34      	ldr	r3, [pc, #208]	; (800699c <HAL_UART_MspInit+0x158>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80068ce:	4b33      	ldr	r3, [pc, #204]	; (800699c <HAL_UART_MspInit+0x158>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80068d4:	4b31      	ldr	r3, [pc, #196]	; (800699c <HAL_UART_MspInit+0x158>)
 80068d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068da:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80068dc:	4b2f      	ldr	r3, [pc, #188]	; (800699c <HAL_UART_MspInit+0x158>)
 80068de:	2200      	movs	r2, #0
 80068e0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80068e2:	4b2e      	ldr	r3, [pc, #184]	; (800699c <HAL_UART_MspInit+0x158>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80068e8:	4b2c      	ldr	r3, [pc, #176]	; (800699c <HAL_UART_MspInit+0x158>)
 80068ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068ee:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80068f0:	4b2a      	ldr	r3, [pc, #168]	; (800699c <HAL_UART_MspInit+0x158>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068f6:	4b29      	ldr	r3, [pc, #164]	; (800699c <HAL_UART_MspInit+0x158>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80068fc:	4827      	ldr	r0, [pc, #156]	; (800699c <HAL_UART_MspInit+0x158>)
 80068fe:	f7fb ff19 	bl	8002734 <HAL_DMA_Init>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8006908:	f7ff fe12 	bl	8006530 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a23      	ldr	r2, [pc, #140]	; (800699c <HAL_UART_MspInit+0x158>)
 8006910:	66da      	str	r2, [r3, #108]	; 0x6c
 8006912:	4a22      	ldr	r2, [pc, #136]	; (800699c <HAL_UART_MspInit+0x158>)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8006918:	4b22      	ldr	r3, [pc, #136]	; (80069a4 <HAL_UART_MspInit+0x160>)
 800691a:	4a23      	ldr	r2, [pc, #140]	; (80069a8 <HAL_UART_MspInit+0x164>)
 800691c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800691e:	4b21      	ldr	r3, [pc, #132]	; (80069a4 <HAL_UART_MspInit+0x160>)
 8006920:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006924:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006926:	4b1f      	ldr	r3, [pc, #124]	; (80069a4 <HAL_UART_MspInit+0x160>)
 8006928:	2240      	movs	r2, #64	; 0x40
 800692a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800692c:	4b1d      	ldr	r3, [pc, #116]	; (80069a4 <HAL_UART_MspInit+0x160>)
 800692e:	2200      	movs	r2, #0
 8006930:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006932:	4b1c      	ldr	r3, [pc, #112]	; (80069a4 <HAL_UART_MspInit+0x160>)
 8006934:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006938:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800693a:	4b1a      	ldr	r3, [pc, #104]	; (80069a4 <HAL_UART_MspInit+0x160>)
 800693c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006940:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006942:	4b18      	ldr	r3, [pc, #96]	; (80069a4 <HAL_UART_MspInit+0x160>)
 8006944:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006948:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800694a:	4b16      	ldr	r3, [pc, #88]	; (80069a4 <HAL_UART_MspInit+0x160>)
 800694c:	2200      	movs	r2, #0
 800694e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006950:	4b14      	ldr	r3, [pc, #80]	; (80069a4 <HAL_UART_MspInit+0x160>)
 8006952:	2200      	movs	r2, #0
 8006954:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006956:	4b13      	ldr	r3, [pc, #76]	; (80069a4 <HAL_UART_MspInit+0x160>)
 8006958:	2200      	movs	r2, #0
 800695a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800695c:	4811      	ldr	r0, [pc, #68]	; (80069a4 <HAL_UART_MspInit+0x160>)
 800695e:	f7fb fee9 	bl	8002734 <HAL_DMA_Init>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8006968:	f7ff fde2 	bl	8006530 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a0d      	ldr	r2, [pc, #52]	; (80069a4 <HAL_UART_MspInit+0x160>)
 8006970:	669a      	str	r2, [r3, #104]	; 0x68
 8006972:	4a0c      	ldr	r2, [pc, #48]	; (80069a4 <HAL_UART_MspInit+0x160>)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006978:	2200      	movs	r2, #0
 800697a:	2100      	movs	r1, #0
 800697c:	2027      	movs	r0, #39	; 0x27
 800697e:	f7fb fea2 	bl	80026c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006982:	2027      	movs	r0, #39	; 0x27
 8006984:	f7fb febb 	bl	80026fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006988:	bf00      	nop
 800698a:	3728      	adds	r7, #40	; 0x28
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	40004800 	.word	0x40004800
 8006994:	40023800 	.word	0x40023800
 8006998:	40020c00 	.word	0x40020c00
 800699c:	20000098 	.word	0x20000098
 80069a0:	40026028 	.word	0x40026028
 80069a4:	20000188 	.word	0x20000188
 80069a8:	40026058 	.word	0x40026058

080069ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80069b0:	bf00      	nop
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069ba:	b480      	push	{r7}
 80069bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069be:	e7fe      	b.n	80069be <HardFault_Handler+0x4>

080069c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80069c0:	b480      	push	{r7}
 80069c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80069c4:	e7fe      	b.n	80069c4 <MemManage_Handler+0x4>

080069c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80069c6:	b480      	push	{r7}
 80069c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80069ca:	e7fe      	b.n	80069ca <BusFault_Handler+0x4>

080069cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80069d0:	e7fe      	b.n	80069d0 <UsageFault_Handler+0x4>

080069d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069d2:	b480      	push	{r7}
 80069d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80069d6:	bf00      	nop
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80069e4:	bf00      	nop
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80069ee:	b480      	push	{r7}
 80069f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80069f2:	bf00      	nop
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a00:	f7fa f942 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a04:	bf00      	nop
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006a0c:	4802      	ldr	r0, [pc, #8]	; (8006a18 <DMA1_Stream1_IRQHandler+0x10>)
 8006a0e:	f7fb ffc1 	bl	8002994 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006a12:	bf00      	nop
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20000098 	.word	0x20000098

08006a1c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006a20:	4802      	ldr	r0, [pc, #8]	; (8006a2c <DMA1_Stream3_IRQHandler+0x10>)
 8006a22:	f7fb ffb7 	bl	8002994 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8006a26:	bf00      	nop
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20000188 	.word	0x20000188

08006a30 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006a34:	4802      	ldr	r0, [pc, #8]	; (8006a40 <ADC_IRQHandler+0x10>)
 8006a36:	f7fa f9ad 	bl	8000d94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006a3a:	bf00      	nop
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20000200 	.word	0x20000200

08006a44 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006a48:	4806      	ldr	r0, [pc, #24]	; (8006a64 <CAN1_RX0_IRQHandler+0x20>)
 8006a4a:	f7fb fb2e 	bl	80020aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  //inicial
  //if(FLAG_CAN==READY)
  //{
  HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0 , &pRxHeader, buffer_Rx_msg);
 8006a4e:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <CAN1_RX0_IRQHandler+0x24>)
 8006a50:	4a06      	ldr	r2, [pc, #24]	; (8006a6c <CAN1_RX0_IRQHandler+0x28>)
 8006a52:	2100      	movs	r1, #0
 8006a54:	4803      	ldr	r0, [pc, #12]	; (8006a64 <CAN1_RX0_IRQHandler+0x20>)
 8006a56:	f7fb f9f0 	bl	8001e3a <HAL_CAN_GetRxMessage>
  FLAG_CAN=PENDING;
 8006a5a:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <CAN1_RX0_IRQHandler+0x2c>)
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	701a      	strb	r2, [r3, #0]
  //else
  //{
  //	  Error_Handler();
  //}
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006a60:	bf00      	nop
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	2000033c 	.word	0x2000033c
 8006a68:	200002bc 	.word	0x200002bc
 8006a6c:	2000031c 	.word	0x2000031c
 8006a70:	200001f0 	.word	0x200001f0

08006a74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	static char now,last;
	now=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8006a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a7c:	4811      	ldr	r0, [pc, #68]	; (8006ac4 <TIM2_IRQHandler+0x50>)
 8006a7e:	f7fc fb9b 	bl	80031b8 <HAL_GPIO_ReadPin>
 8006a82:	4603      	mov	r3, r0
 8006a84:	461a      	mov	r2, r3
 8006a86:	4b10      	ldr	r3, [pc, #64]	; (8006ac8 <TIM2_IRQHandler+0x54>)
 8006a88:	701a      	strb	r2, [r3, #0]
	if (now==1 && (now^last))   /// Doy un pulso
 8006a8a:	4b0f      	ldr	r3, [pc, #60]	; (8006ac8 <TIM2_IRQHandler+0x54>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d10f      	bne.n	8006ab2 <TIM2_IRQHandler+0x3e>
 8006a92:	4b0d      	ldr	r3, [pc, #52]	; (8006ac8 <TIM2_IRQHandler+0x54>)
 8006a94:	781a      	ldrb	r2, [r3, #0]
 8006a96:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <TIM2_IRQHandler+0x58>)
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d009      	beq.n	8006ab2 <TIM2_IRQHandler+0x3e>
	{
		FLAG_OP = !FLAG_OP;
 8006a9e:	4b0c      	ldr	r3, [pc, #48]	; (8006ad0 <TIM2_IRQHandler+0x5c>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	bf0c      	ite	eq
 8006aa6:	2301      	moveq	r3, #1
 8006aa8:	2300      	movne	r3, #0
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	461a      	mov	r2, r3
 8006aae:	4b08      	ldr	r3, [pc, #32]	; (8006ad0 <TIM2_IRQHandler+0x5c>)
 8006ab0:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006ab2:	4808      	ldr	r0, [pc, #32]	; (8006ad4 <TIM2_IRQHandler+0x60>)
 8006ab4:	f7fd fcee 	bl	8004494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  last=now;
 8006ab8:	4b03      	ldr	r3, [pc, #12]	; (8006ac8 <TIM2_IRQHandler+0x54>)
 8006aba:	781a      	ldrb	r2, [r3, #0]
 8006abc:	4b03      	ldr	r3, [pc, #12]	; (8006acc <TIM2_IRQHandler+0x58>)
 8006abe:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8006ac0:	bf00      	nop
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	40020800 	.word	0x40020800
 8006ac8:	2000004c 	.word	0x2000004c
 8006acc:	2000004d 	.word	0x2000004d
 8006ad0:	20000094 	.word	0x20000094
 8006ad4:	200002dc 	.word	0x200002dc

08006ad8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006adc:	4802      	ldr	r0, [pc, #8]	; (8006ae8 <USART3_IRQHandler+0x10>)
 8006ade:	f7fe fa19 	bl	8004f14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006ae2:	bf00      	nop
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	200000f8 	.word	0x200000f8

08006aec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006af0:	4802      	ldr	r0, [pc, #8]	; (8006afc <DMA2_Stream0_IRQHandler+0x10>)
 8006af2:	f7fb ff4f 	bl	8002994 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
 // throttle=(int)promedio(ADC_val[0]);
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006af6:	bf00      	nop
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000254 	.word	0x20000254

08006b00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b04:	4b15      	ldr	r3, [pc, #84]	; (8006b5c <SystemInit+0x5c>)
 8006b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0a:	4a14      	ldr	r2, [pc, #80]	; (8006b5c <SystemInit+0x5c>)
 8006b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006b14:	4b12      	ldr	r3, [pc, #72]	; (8006b60 <SystemInit+0x60>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a11      	ldr	r2, [pc, #68]	; (8006b60 <SystemInit+0x60>)
 8006b1a:	f043 0301 	orr.w	r3, r3, #1
 8006b1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006b20:	4b0f      	ldr	r3, [pc, #60]	; (8006b60 <SystemInit+0x60>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006b26:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <SystemInit+0x60>)
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	490d      	ldr	r1, [pc, #52]	; (8006b60 <SystemInit+0x60>)
 8006b2c:	4b0d      	ldr	r3, [pc, #52]	; (8006b64 <SystemInit+0x64>)
 8006b2e:	4013      	ands	r3, r2
 8006b30:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006b32:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <SystemInit+0x60>)
 8006b34:	4a0c      	ldr	r2, [pc, #48]	; (8006b68 <SystemInit+0x68>)
 8006b36:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006b38:	4b09      	ldr	r3, [pc, #36]	; (8006b60 <SystemInit+0x60>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a08      	ldr	r2, [pc, #32]	; (8006b60 <SystemInit+0x60>)
 8006b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006b44:	4b06      	ldr	r3, [pc, #24]	; (8006b60 <SystemInit+0x60>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006b4a:	4b04      	ldr	r3, [pc, #16]	; (8006b5c <SystemInit+0x5c>)
 8006b4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b50:	609a      	str	r2, [r3, #8]
#endif
}
 8006b52:	bf00      	nop
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	e000ed00 	.word	0xe000ed00
 8006b60:	40023800 	.word	0x40023800
 8006b64:	fef6ffff 	.word	0xfef6ffff
 8006b68:	24003010 	.word	0x24003010

08006b6c <Reset_Handler>:
 8006b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ba4 <LoopFillZerobss+0x14>
 8006b70:	2100      	movs	r1, #0
 8006b72:	e003      	b.n	8006b7c <LoopCopyDataInit>

08006b74 <CopyDataInit>:
 8006b74:	4b0c      	ldr	r3, [pc, #48]	; (8006ba8 <LoopFillZerobss+0x18>)
 8006b76:	585b      	ldr	r3, [r3, r1]
 8006b78:	5043      	str	r3, [r0, r1]
 8006b7a:	3104      	adds	r1, #4

08006b7c <LoopCopyDataInit>:
 8006b7c:	480b      	ldr	r0, [pc, #44]	; (8006bac <LoopFillZerobss+0x1c>)
 8006b7e:	4b0c      	ldr	r3, [pc, #48]	; (8006bb0 <LoopFillZerobss+0x20>)
 8006b80:	1842      	adds	r2, r0, r1
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d3f6      	bcc.n	8006b74 <CopyDataInit>
 8006b86:	4a0b      	ldr	r2, [pc, #44]	; (8006bb4 <LoopFillZerobss+0x24>)
 8006b88:	e002      	b.n	8006b90 <LoopFillZerobss>

08006b8a <FillZerobss>:
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f842 3b04 	str.w	r3, [r2], #4

08006b90 <LoopFillZerobss>:
 8006b90:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <LoopFillZerobss+0x28>)
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d3f9      	bcc.n	8006b8a <FillZerobss>
 8006b96:	f7ff ffb3 	bl	8006b00 <SystemInit>
 8006b9a:	f000 f811 	bl	8006bc0 <__libc_init_array>
 8006b9e:	f7ff fa33 	bl	8006008 <main>
 8006ba2:	4770      	bx	lr
 8006ba4:	20080000 	.word	0x20080000
 8006ba8:	08006c60 	.word	0x08006c60
 8006bac:	20000000 	.word	0x20000000
 8006bb0:	20000014 	.word	0x20000014
 8006bb4:	20000014 	.word	0x20000014
 8006bb8:	20000380 	.word	0x20000380

08006bbc <CAN1_RX1_IRQHandler>:
 8006bbc:	e7fe      	b.n	8006bbc <CAN1_RX1_IRQHandler>
	...

08006bc0 <__libc_init_array>:
 8006bc0:	b570      	push	{r4, r5, r6, lr}
 8006bc2:	4e0d      	ldr	r6, [pc, #52]	; (8006bf8 <__libc_init_array+0x38>)
 8006bc4:	4c0d      	ldr	r4, [pc, #52]	; (8006bfc <__libc_init_array+0x3c>)
 8006bc6:	1ba4      	subs	r4, r4, r6
 8006bc8:	10a4      	asrs	r4, r4, #2
 8006bca:	2500      	movs	r5, #0
 8006bcc:	42a5      	cmp	r5, r4
 8006bce:	d109      	bne.n	8006be4 <__libc_init_array+0x24>
 8006bd0:	4e0b      	ldr	r6, [pc, #44]	; (8006c00 <__libc_init_array+0x40>)
 8006bd2:	4c0c      	ldr	r4, [pc, #48]	; (8006c04 <__libc_init_array+0x44>)
 8006bd4:	f000 f820 	bl	8006c18 <_init>
 8006bd8:	1ba4      	subs	r4, r4, r6
 8006bda:	10a4      	asrs	r4, r4, #2
 8006bdc:	2500      	movs	r5, #0
 8006bde:	42a5      	cmp	r5, r4
 8006be0:	d105      	bne.n	8006bee <__libc_init_array+0x2e>
 8006be2:	bd70      	pop	{r4, r5, r6, pc}
 8006be4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006be8:	4798      	blx	r3
 8006bea:	3501      	adds	r5, #1
 8006bec:	e7ee      	b.n	8006bcc <__libc_init_array+0xc>
 8006bee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bf2:	4798      	blx	r3
 8006bf4:	3501      	adds	r5, #1
 8006bf6:	e7f2      	b.n	8006bde <__libc_init_array+0x1e>
 8006bf8:	08006c58 	.word	0x08006c58
 8006bfc:	08006c58 	.word	0x08006c58
 8006c00:	08006c58 	.word	0x08006c58
 8006c04:	08006c5c 	.word	0x08006c5c

08006c08 <memset>:
 8006c08:	4402      	add	r2, r0
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d100      	bne.n	8006c12 <memset+0xa>
 8006c10:	4770      	bx	lr
 8006c12:	f803 1b01 	strb.w	r1, [r3], #1
 8006c16:	e7f9      	b.n	8006c0c <memset+0x4>

08006c18 <_init>:
 8006c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1a:	bf00      	nop
 8006c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1e:	bc08      	pop	{r3}
 8006c20:	469e      	mov	lr, r3
 8006c22:	4770      	bx	lr

08006c24 <_fini>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	bf00      	nop
 8006c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2a:	bc08      	pop	{r3}
 8006c2c:	469e      	mov	lr, r3
 8006c2e:	4770      	bx	lr

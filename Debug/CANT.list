
CANT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006810  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006a08  08006a08  00016a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a28  08006a28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a28  08006a28  00016a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a30  08006a30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a30  08006a30  00016a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a34  08006a34  00016a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  2000000c  08006a44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08006a44  00020358  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001383b  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028cb  00000000  00000000  00033875  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001048  00000000  00000000  00036140  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef0  00000000  00000000  00037188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002889e  00000000  00000000  00038078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e826  00000000  00000000  00060916  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd873  00000000  00000000  0006f13c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016c9af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004388  00000000  00000000  0016ca2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080069f0 	.word	0x080069f0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080069f0 	.word	0x080069f0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <run_motor_n>:

/*La funcion pone en movimiento el motor del nodo indicado, debe recibir
 *  el valor del nodo (1 o 2), el valor al cual se desea mover y el estado del nodo,
 *  si el nodo no se encuentra en estado operacional no se realiza accion*/
int run_motor_n(uint16_t node,uint32_t in,uint16_t state)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08a      	sub	sp, #40	; 0x28
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	6039      	str	r1, [r7, #0]
 8000542:	80fb      	strh	r3, [r7, #6]
 8000544:	4613      	mov	r3, r2
 8000546:	80bb      	strh	r3, [r7, #4]
//	if(state==OPERATIONAL)
//	{
		// Actualizo valor de Velocidad
		uint8_t VEL[8]; //velocidad a enviar por can.
					int v=(in)*(5000/4095);
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	627b      	str	r3, [r7, #36]	; 0x24
					uint32_t a=((v)&(0x000000FF));
 800054c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800054e:	b2db      	uxtb	r3, r3
 8000550:	623b      	str	r3, [r7, #32]
					uint32_t b=((v)&(0x0000FF00))>>(8);
 8000552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000554:	121b      	asrs	r3, r3, #8
 8000556:	b2db      	uxtb	r3, r3
 8000558:	61fb      	str	r3, [r7, #28]
					uint32_t c=((v)&(0x00FF0000))>>(16);
 800055a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800055c:	141b      	asrs	r3, r3, #16
 800055e:	b2db      	uxtb	r3, r3
 8000560:	61bb      	str	r3, [r7, #24]
					uint32_t d=((v)&(0xFF000000))>>(24);
 8000562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000564:	0e1b      	lsrs	r3, r3, #24
 8000566:	617b      	str	r3, [r7, #20]
		VEL[0]=0x23;
 8000568:	2323      	movs	r3, #35	; 0x23
 800056a:	733b      	strb	r3, [r7, #12]
		VEL[1]=0xff;
 800056c:	23ff      	movs	r3, #255	; 0xff
 800056e:	737b      	strb	r3, [r7, #13]
		VEL[2]=0x60;
 8000570:	2360      	movs	r3, #96	; 0x60
 8000572:	73bb      	strb	r3, [r7, #14]
		VEL[3]=0x00;  	 		//subindex
 8000574:	2300      	movs	r3, #0
 8000576:	73fb      	strb	r3, [r7, #15]
		VEL[4]=a;
 8000578:	6a3b      	ldr	r3, [r7, #32]
 800057a:	b2db      	uxtb	r3, r3
 800057c:	743b      	strb	r3, [r7, #16]
		VEL[5]=b;
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	747b      	strb	r3, [r7, #17]
		VEL[6]=c;
 8000584:	69bb      	ldr	r3, [r7, #24]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	74bb      	strb	r3, [r7, #18]
		VEL[7]=d;
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	74fb      	strb	r3, [r7, #19]
		if(can1_Tx(0x600+node,VEL,8)!=HAL_OK)
 8000590:	88fb      	ldrh	r3, [r7, #6]
 8000592:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000596:	b29b      	uxth	r3, r3
 8000598:	f107 010c 	add.w	r1, r7, #12
 800059c:	2208      	movs	r2, #8
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f9bc 	bl	800091c <can1_Tx>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d003      	beq.n	80005b2 <run_motor_n+0x7a>
				{
					Error_Handler();
 80005aa:	f005 fe99 	bl	80062e0 <Error_Handler>
					return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
 80005b0:	e000      	b.n	80005b4 <run_motor_n+0x7c>
				}
//		}
	return HAL_OK;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3728      	adds	r7, #40	; 0x28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <send_ctrlwrd_1>:

int send_ctrlwrd_1(uint16_t node)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	80fb      	strh	r3, [r7, #6]
	uint8_t CTRL_WORD[8]; // activar motores
	CTRL_WORD[0]=0x2B;
 80005c6:	232b      	movs	r3, #43	; 0x2b
 80005c8:	723b      	strb	r3, [r7, #8]
	CTRL_WORD[1]=0x40;
 80005ca:	2340      	movs	r3, #64	; 0x40
 80005cc:	727b      	strb	r3, [r7, #9]
	CTRL_WORD[2]=0x60;
 80005ce:	2360      	movs	r3, #96	; 0x60
 80005d0:	72bb      	strb	r3, [r7, #10]
	CTRL_WORD[3]=0x00;
 80005d2:	2300      	movs	r3, #0
 80005d4:	72fb      	strb	r3, [r7, #11]
	CTRL_WORD[4]=0x06;
 80005d6:	2306      	movs	r3, #6
 80005d8:	733b      	strb	r3, [r7, #12]
	CTRL_WORD[5]=0x00;
 80005da:	2300      	movs	r3, #0
 80005dc:	737b      	strb	r3, [r7, #13]
	CTRL_WORD[6]=0x00;
 80005de:	2300      	movs	r3, #0
 80005e0:	73bb      	strb	r3, [r7, #14]
	CTRL_WORD[7]=0x00;
 80005e2:	2300      	movs	r3, #0
 80005e4:	73fb      	strb	r3, [r7, #15]
	if(can1_Tx(0x600+node,CTRL_WORD,8)!=HAL_OK)
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	f107 0108 	add.w	r1, r7, #8
 80005f2:	2208      	movs	r2, #8
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 f991 	bl	800091c <can1_Tx>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d003      	beq.n	8000608 <send_ctrlwrd_1+0x4c>
	{
		Error_Handler();
 8000600:	f005 fe6e 	bl	80062e0 <Error_Handler>
		return HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	e000      	b.n	800060a <send_ctrlwrd_1+0x4e>
	}
	return HAL_OK;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <send_ctrlword_2>:

int send_ctrlword_2(uint16_t node)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b084      	sub	sp, #16
 8000616:	af00      	add	r7, sp, #0
 8000618:	4603      	mov	r3, r0
 800061a:	80fb      	strh	r3, [r7, #6]
	uint8_t CTRL_WORD[8]; // activar motores

	CTRL_WORD[0]=0x2B;
 800061c:	232b      	movs	r3, #43	; 0x2b
 800061e:	723b      	strb	r3, [r7, #8]
	CTRL_WORD[1]=0x40;
 8000620:	2340      	movs	r3, #64	; 0x40
 8000622:	727b      	strb	r3, [r7, #9]
	CTRL_WORD[2]=0x60;
 8000624:	2360      	movs	r3, #96	; 0x60
 8000626:	72bb      	strb	r3, [r7, #10]
	CTRL_WORD[3]=0x00;
 8000628:	2300      	movs	r3, #0
 800062a:	72fb      	strb	r3, [r7, #11]
	CTRL_WORD[4]=0x0F;
 800062c:	230f      	movs	r3, #15
 800062e:	733b      	strb	r3, [r7, #12]
	CTRL_WORD[5]=0x00;
 8000630:	2300      	movs	r3, #0
 8000632:	737b      	strb	r3, [r7, #13]
	CTRL_WORD[6]=0x00;
 8000634:	2300      	movs	r3, #0
 8000636:	73bb      	strb	r3, [r7, #14]
	CTRL_WORD[7]=0x00;
 8000638:	2300      	movs	r3, #0
 800063a:	73fb      	strb	r3, [r7, #15]

	if(can1_Tx(0x600+node,CTRL_WORD,8)!=HAL_OK)
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000642:	b29b      	uxth	r3, r3
 8000644:	f107 0108 	add.w	r1, r7, #8
 8000648:	2208      	movs	r2, #8
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f966 	bl	800091c <can1_Tx>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d003      	beq.n	800065e <send_ctrlword_2+0x4c>
	{
		Error_Handler();
 8000656:	f005 fe43 	bl	80062e0 <Error_Handler>
		return HAL_ERROR;
 800065a:	2301      	movs	r3, #1
 800065c:	e000      	b.n	8000660 <send_ctrlword_2+0x4e>
	}
	return HAL_OK;
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <analize_CAN_Rx>:

// Recibo Mensaje-- debo pasarle las variables donde voy a guardar el ID, y el mensaje:
int analize_CAN_Rx(CAN_RxHeaderTypeDef header,uint8_t mensaje [])
{
 8000668:	b084      	sub	sp, #16
 800066a:	b480      	push	{r7}
 800066c:	b089      	sub	sp, #36	; 0x24
 800066e:	af00      	add	r7, sp, #0
 8000670:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000674:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t info=0,volatil=0;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
	uint16_t Id,bytes,index,subindex;
	uint8_t n,ccs,e,s,contador,nodo;

	Id=header.StdId;
 8000680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000682:	827b      	strh	r3, [r7, #18]
	bytes=header.DLC;
 8000684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000686:	823b      	strh	r3, [r7, #16]
	/*Vamos a analizar casos: mensaje de bootup, y mensaje sdo, podriamos agregar tpdo en un futuro*/
	/*ORDEN DE REVISION: MENSAJES DE MAYOR A MENOR ID*/
		if(Id-0x700>0)
 8000688:	8a7b      	ldrh	r3, [r7, #18]
 800068a:	f5a3 63e0 	sub.w	r3, r3, #1792	; 0x700
 800068e:	2b00      	cmp	r3, #0
 8000690:	dd08      	ble.n	80006a4 <analize_CAN_Rx+0x3c>
		{
			nodo=Id-0x700;
 8000692:	8a7b      	ldrh	r3, [r7, #18]
 8000694:	73fb      	strb	r3, [r7, #15]
			status[nodo-1]=PREOPERATIONAL;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	3b01      	subs	r3, #1
 800069a:	4a64      	ldr	r2, [pc, #400]	; (800082c <analize_CAN_Rx+0x1c4>)
 800069c:	2102      	movs	r1, #2
 800069e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006a2:	e0ba      	b.n	800081a <analize_CAN_Rx+0x1b2>
		}
		// con revisar que sea mayor a cero  me alcanza porque sino hubiese entrado en el caso anterior
		else if (Id-580>0)
 80006a4:	8a7b      	ldrh	r3, [r7, #18]
 80006a6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	f340 80b5 	ble.w	800081a <analize_CAN_Rx+0x1b2>
			// primero debo analizar el byte de comando
			// Analisis CANOPEN
		{
		nodo=Id-0x580;
 80006b0:	8a7b      	ldrh	r3, [r7, #18]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	3b80      	subs	r3, #128	; 0x80
 80006b6:	73fb      	strb	r3, [r7, #15]
		index= (mensaje[1]<<(8))|mensaje[2]	;
 80006b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006ba:	3301      	adds	r3, #1
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	021b      	lsls	r3, r3, #8
 80006c0:	b21a      	sxth	r2, r3
 80006c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006c4:	3302      	adds	r3, #2
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b21b      	sxth	r3, r3
 80006ca:	4313      	orrs	r3, r2
 80006cc:	b21b      	sxth	r3, r3
 80006ce:	81bb      	strh	r3, [r7, #12]
		subindex=mensaje[3];
 80006d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006d2:	3303      	adds	r3, #3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	817b      	strh	r3, [r7, #10]
		ccs=(mensaje[0]&ccs_MSK);
 80006d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	f023 031f 	bic.w	r3, r3, #31
 80006e0:	727b      	strb	r3, [r7, #9]
		n=(mensaje[0]&n_MSK);
 80006e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	f003 030c 	and.w	r3, r3, #12
 80006ea:	723b      	strb	r3, [r7, #8]
		e=(mensaje[0]&e_MSK);
 80006ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	f003 0302 	and.w	r3, r3, #2
 80006f4:	71fb      	strb	r3, [r7, #7]
		s=(mensaje[0]&s_MSK);
 80006f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	71bb      	strb	r3, [r7, #6]
			for(contador=(1+n);contador<(bytes-3);contador++)
 8000700:	7a3b      	ldrb	r3, [r7, #8]
 8000702:	3301      	adds	r3, #1
 8000704:	76fb      	strb	r3, [r7, #27]
 8000706:	e00f      	b.n	8000728 <analize_CAN_Rx+0xc0>
			{
				volatil= mensaje[bytes-contador];
 8000708:	8a3a      	ldrh	r2, [r7, #16]
 800070a:	7efb      	ldrb	r3, [r7, #27]
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	461a      	mov	r2, r3
 8000710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000712:	4413      	add	r3, r2
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	617b      	str	r3, [r7, #20]
				info=(info<<8)+volatil;
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	021b      	lsls	r3, r3, #8
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	4413      	add	r3, r2
 8000720:	61fb      	str	r3, [r7, #28]
			for(contador=(1+n);contador<(bytes-3);contador++)
 8000722:	7efb      	ldrb	r3, [r7, #27]
 8000724:	3301      	adds	r3, #1
 8000726:	76fb      	strb	r3, [r7, #27]
 8000728:	7efa      	ldrb	r2, [r7, #27]
 800072a:	8a3b      	ldrh	r3, [r7, #16]
 800072c:	3b03      	subs	r3, #3
 800072e:	429a      	cmp	r2, r3
 8000730:	dbea      	blt.n	8000708 <analize_CAN_Rx+0xa0>
			}

			if (index==0x2087)	        //velocity actual value
 8000732:	89bb      	ldrh	r3, [r7, #12]
 8000734:	f242 0287 	movw	r2, #8327	; 0x2087
 8000738:	4293      	cmp	r3, r2
 800073a:	d107      	bne.n	800074c <analize_CAN_Rx+0xe4>
			{
				info_motores[nodo-1]=info;
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	3b01      	subs	r3, #1
 8000740:	69fa      	ldr	r2, [r7, #28]
 8000742:	b291      	uxth	r1, r2
 8000744:	4a3a      	ldr	r2, [pc, #232]	; (8000830 <analize_CAN_Rx+0x1c8>)
 8000746:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800074a:	e066      	b.n	800081a <analize_CAN_Rx+0x1b2>
			}
			else if (index==0x7960)	    //DC Link actual voltage
 800074c:	89bb      	ldrh	r3, [r7, #12]
 800074e:	f647 1260 	movw	r2, #31072	; 0x7960
 8000752:	4293      	cmp	r3, r2
 8000754:	d107      	bne.n	8000766 <analize_CAN_Rx+0xfe>
			{
				info_motores[1+nodo]=info;
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	3301      	adds	r3, #1
 800075a:	69fa      	ldr	r2, [r7, #28]
 800075c:	b291      	uxth	r1, r2
 800075e:	4a34      	ldr	r2, [pc, #208]	; (8000830 <analize_CAN_Rx+0x1c8>)
 8000760:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000764:	e059      	b.n	800081a <analize_CAN_Rx+0x1b2>
			}
			else if (index==0x2320) 	//DC Current
 8000766:	89bb      	ldrh	r3, [r7, #12]
 8000768:	f242 3220 	movw	r2, #8992	; 0x2320
 800076c:	4293      	cmp	r3, r2
 800076e:	d107      	bne.n	8000780 <analize_CAN_Rx+0x118>
			{
				info_motores[3+nodo]=info;
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	3303      	adds	r3, #3
 8000774:	69fa      	ldr	r2, [r7, #28]
 8000776:	b291      	uxth	r1, r2
 8000778:	4a2d      	ldr	r2, [pc, #180]	; (8000830 <analize_CAN_Rx+0x1c8>)
 800077a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800077e:	e04c      	b.n	800081a <analize_CAN_Rx+0x1b2>
			}
			else if (index==0x2520)		//Motor Temp
 8000780:	89bb      	ldrh	r3, [r7, #12]
 8000782:	f242 5220 	movw	r2, #9504	; 0x2520
 8000786:	4293      	cmp	r3, r2
 8000788:	d107      	bne.n	800079a <analize_CAN_Rx+0x132>
			{
				info_motores[5+nodo]=info;
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	3305      	adds	r3, #5
 800078e:	69fa      	ldr	r2, [r7, #28]
 8000790:	b291      	uxth	r1, r2
 8000792:	4a27      	ldr	r2, [pc, #156]	; (8000830 <analize_CAN_Rx+0x1c8>)
 8000794:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000798:	e03f      	b.n	800081a <analize_CAN_Rx+0x1b2>
			}
			else if (index==0x7860)		// Motor Current Actual Value
 800079a:	89bb      	ldrh	r3, [r7, #12]
 800079c:	f647 0260 	movw	r2, #30816	; 0x7860
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d107      	bne.n	80007b4 <analize_CAN_Rx+0x14c>
			{
				info_motores[7+nodo]=info;
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	3307      	adds	r3, #7
 80007a8:	69fa      	ldr	r2, [r7, #28]
 80007aa:	b291      	uxth	r1, r2
 80007ac:	4a20      	ldr	r2, [pc, #128]	; (8000830 <analize_CAN_Rx+0x1c8>)
 80007ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80007b2:	e032      	b.n	800081a <analize_CAN_Rx+0x1b2>
			}
			else if (index==0x7760)		//Torque Actual Value
 80007b4:	89bb      	ldrh	r3, [r7, #12]
 80007b6:	f247 7260 	movw	r2, #30560	; 0x7760
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d107      	bne.n	80007ce <analize_CAN_Rx+0x166>
			{
				info_motores[9+nodo]=info;
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	3309      	adds	r3, #9
 80007c2:	69fa      	ldr	r2, [r7, #28]
 80007c4:	b291      	uxth	r1, r2
 80007c6:	4a1a      	ldr	r2, [pc, #104]	; (8000830 <analize_CAN_Rx+0x1c8>)
 80007c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80007cc:	e025      	b.n	800081a <analize_CAN_Rx+0x1b2>
			}
			else if (index==0x6C60)		//Velocity actual Value
 80007ce:	89bb      	ldrh	r3, [r7, #12]
 80007d0:	f646 4260 	movw	r2, #27744	; 0x6c60
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d107      	bne.n	80007e8 <analize_CAN_Rx+0x180>
			{
				info_motores[11+nodo]=info;
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	330b      	adds	r3, #11
 80007dc:	69fa      	ldr	r2, [r7, #28]
 80007de:	b291      	uxth	r1, r2
 80007e0:	4a13      	ldr	r2, [pc, #76]	; (8000830 <analize_CAN_Rx+0x1c8>)
 80007e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80007e6:	e018      	b.n	800081a <analize_CAN_Rx+0x1b2>
			}
			else if (index==0x8620)		// Velocity actual value AVG
 80007e8:	89bb      	ldrh	r3, [r7, #12]
 80007ea:	f248 6220 	movw	r2, #34336	; 0x8620
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d107      	bne.n	8000802 <analize_CAN_Rx+0x19a>
			{
				info_motores[13+nodo]=info;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	330d      	adds	r3, #13
 80007f6:	69fa      	ldr	r2, [r7, #28]
 80007f8:	b291      	uxth	r1, r2
 80007fa:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <analize_CAN_Rx+0x1c8>)
 80007fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000800:	e00b      	b.n	800081a <analize_CAN_Rx+0x1b2>
			}
			else if (index==0x2620)		//controller temperature
 8000802:	89bb      	ldrh	r3, [r7, #12]
 8000804:	f242 6220 	movw	r2, #9760	; 0x2620
 8000808:	4293      	cmp	r3, r2
 800080a:	d106      	bne.n	800081a <analize_CAN_Rx+0x1b2>
			{
				info_motores[15+nodo]=info;
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	330f      	adds	r3, #15
 8000810:	69fa      	ldr	r2, [r7, #28]
 8000812:	b291      	uxth	r1, r2
 8000814:	4a06      	ldr	r2, [pc, #24]	; (8000830 <analize_CAN_Rx+0x1c8>)
 8000816:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}

	  return HAL_OK ;
 800081a:	2300      	movs	r3, #0
}
 800081c:	4618      	mov	r0, r3
 800081e:	3724      	adds	r7, #36	; 0x24
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	b004      	add	sp, #16
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	2000009c 	.word	0x2000009c
 8000830:	20000054 	.word	0x20000054

08000834 <ask_for_info>:

/*La funcion envia el mensaje SDO para pedir data al nodo indicado*/
int ask_for_info(uint8_t node , uint8_t contador)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	460a      	mov	r2, r1
 800083e:	71fb      	strb	r3, [r7, #7]
 8000840:	4613      	mov	r3, r2
 8000842:	71bb      	strb	r3, [r7, #6]
	/*inicio la variable en cero, voy a pedir 9 datos*/
	uint8_t PIDO_INFO[8];
	/*primero command byte, luego index y subindex*/
	PIDO_INFO[0]=0x40;
 8000844:	2340      	movs	r3, #64	; 0x40
 8000846:	723b      	strb	r3, [r7, #8]
	if (contador==1)	//velocity actual value
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d104      	bne.n	8000858 <ask_for_info+0x24>
	{
				PIDO_INFO[1]=0x87;
 800084e:	2387      	movs	r3, #135	; 0x87
 8000850:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x20;
 8000852:	2320      	movs	r3, #32
 8000854:	72bb      	strb	r3, [r7, #10]
 8000856:	e04a      	b.n	80008ee <ask_for_info+0xba>
	}
	else if (contador==2)	//DC Link Actual Voltage
 8000858:	79bb      	ldrb	r3, [r7, #6]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d104      	bne.n	8000868 <ask_for_info+0x34>
	{
				PIDO_INFO[1]=0x79;
 800085e:	2379      	movs	r3, #121	; 0x79
 8000860:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x60;
 8000862:	2360      	movs	r3, #96	; 0x60
 8000864:	72bb      	strb	r3, [r7, #10]
 8000866:	e042      	b.n	80008ee <ask_for_info+0xba>
	}
	else if (contador==3)	//Dc Current
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	2b03      	cmp	r3, #3
 800086c:	d104      	bne.n	8000878 <ask_for_info+0x44>
	{
				PIDO_INFO[1]=0x23;
 800086e:	2323      	movs	r3, #35	; 0x23
 8000870:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x20;
 8000872:	2320      	movs	r3, #32
 8000874:	72bb      	strb	r3, [r7, #10]
 8000876:	e03a      	b.n	80008ee <ask_for_info+0xba>
	}
	else if (contador==4)	//Motor Temperature
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	2b04      	cmp	r3, #4
 800087c:	d104      	bne.n	8000888 <ask_for_info+0x54>
	{
				PIDO_INFO[1]=0x25;
 800087e:	2325      	movs	r3, #37	; 0x25
 8000880:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x20;
 8000882:	2320      	movs	r3, #32
 8000884:	72bb      	strb	r3, [r7, #10]
 8000886:	e032      	b.n	80008ee <ask_for_info+0xba>
	}
	else if (contador==5)	//Motor current actual value
 8000888:	79bb      	ldrb	r3, [r7, #6]
 800088a:	2b05      	cmp	r3, #5
 800088c:	d104      	bne.n	8000898 <ask_for_info+0x64>
	{
				PIDO_INFO[1]=0x78;
 800088e:	2378      	movs	r3, #120	; 0x78
 8000890:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x60;
 8000892:	2360      	movs	r3, #96	; 0x60
 8000894:	72bb      	strb	r3, [r7, #10]
 8000896:	e02a      	b.n	80008ee <ask_for_info+0xba>
	}
	else if (contador==6)	//Torque Actual Value
 8000898:	79bb      	ldrb	r3, [r7, #6]
 800089a:	2b06      	cmp	r3, #6
 800089c:	d104      	bne.n	80008a8 <ask_for_info+0x74>
	{
				PIDO_INFO[1]=0x77;
 800089e:	2377      	movs	r3, #119	; 0x77
 80008a0:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x60;
 80008a2:	2360      	movs	r3, #96	; 0x60
 80008a4:	72bb      	strb	r3, [r7, #10]
 80008a6:	e022      	b.n	80008ee <ask_for_info+0xba>
	}
	else if (contador==7)	//velocity actual value
 80008a8:	79bb      	ldrb	r3, [r7, #6]
 80008aa:	2b07      	cmp	r3, #7
 80008ac:	d104      	bne.n	80008b8 <ask_for_info+0x84>
	{
				PIDO_INFO[1]=0x6C;
 80008ae:	236c      	movs	r3, #108	; 0x6c
 80008b0:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x60;
 80008b2:	2360      	movs	r3, #96	; 0x60
 80008b4:	72bb      	strb	r3, [r7, #10]
 80008b6:	e01a      	b.n	80008ee <ask_for_info+0xba>
	}
	else if (contador==8)	//velocity actual value AVG
 80008b8:	79bb      	ldrb	r3, [r7, #6]
 80008ba:	2b08      	cmp	r3, #8
 80008bc:	d104      	bne.n	80008c8 <ask_for_info+0x94>
	{
				PIDO_INFO[1]=0x86;
 80008be:	2386      	movs	r3, #134	; 0x86
 80008c0:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x20;
 80008c2:	2320      	movs	r3, #32
 80008c4:	72bb      	strb	r3, [r7, #10]
 80008c6:	e012      	b.n	80008ee <ask_for_info+0xba>
	}
	else if (contador==9)	//controller temperature
 80008c8:	79bb      	ldrb	r3, [r7, #6]
 80008ca:	2b09      	cmp	r3, #9
 80008cc:	d106      	bne.n	80008dc <ask_for_info+0xa8>
	{
				PIDO_INFO[1]=0x26;
 80008ce:	2326      	movs	r3, #38	; 0x26
 80008d0:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x20;
 80008d2:	2320      	movs	r3, #32
 80008d4:	72bb      	strb	r3, [r7, #10]
				PIDO_INFO[3]=0x01;
 80008d6:	2301      	movs	r3, #1
 80008d8:	72fb      	strb	r3, [r7, #11]
 80008da:	e008      	b.n	80008ee <ask_for_info+0xba>
	}
	else if (contador==10)	//controller temperature
 80008dc:	79bb      	ldrb	r3, [r7, #6]
 80008de:	2b0a      	cmp	r3, #10
 80008e0:	d105      	bne.n	80008ee <ask_for_info+0xba>
	{
				PIDO_INFO[1]=0x78;
 80008e2:	2378      	movs	r3, #120	; 0x78
 80008e4:	727b      	strb	r3, [r7, #9]
				PIDO_INFO[2]=0x60;
 80008e6:	2360      	movs	r3, #96	; 0x60
 80008e8:	72bb      	strb	r3, [r7, #10]
				PIDO_INFO[3]=0xC1;
 80008ea:	23c1      	movs	r3, #193	; 0xc1
 80008ec:	72fb      	strb	r3, [r7, #11]
	}

	if(can1_Tx(0x600+node,PIDO_INFO,8)!=HAL_OK)
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	f107 0108 	add.w	r1, r7, #8
 80008fc:	2208      	movs	r2, #8
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f80c 	bl	800091c <can1_Tx>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d003      	beq.n	8000912 <ask_for_info+0xde>
			{
				Error_Handler();
 800090a:	f005 fce9 	bl	80062e0 <Error_Handler>
				return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e000      	b.n	8000914 <ask_for_info+0xe0>
			}
	return HAL_OK;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <can1_Tx>:

// mi driver para enviar info por can
// le doy el ID y el mensaje a enviar, y me devuelve un 1 si se envio correctamente, o un cero si tuvo algun error

int can1_Tx(uint16_t Id ,uint8_t mensaje [],uint8_t bytes)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	80fb      	strh	r3, [r7, #6]
 8000928:	4613      	mov	r3, r2
 800092a:	717b      	strb	r3, [r7, #5]

	  if(HAL_CAN_IsTxMessagePending(&hcan1, CAN_TX_MAILBOX0) == 0)
 800092c:	2101      	movs	r1, #1
 800092e:	4812      	ldr	r0, [pc, #72]	; (8000978 <can1_Tx+0x5c>)
 8000930:	f001 f911 	bl	8001b56 <HAL_CAN_IsTxMessagePending>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d118      	bne.n	800096c <can1_Tx+0x50>
	  {
	  pHeader.DLC=bytes;
 800093a:	797b      	ldrb	r3, [r7, #5]
 800093c:	4a0f      	ldr	r2, [pc, #60]	; (800097c <can1_Tx+0x60>)
 800093e:	6113      	str	r3, [r2, #16]
	  pHeader.IDE=CAN_ID_STD;
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <can1_Tx+0x60>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
	  pHeader.RTR=CAN_RTR_DATA;
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <can1_Tx+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
	  pHeader.StdId=Id;
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <can1_Tx+0x60>)
 8000950:	6013      	str	r3, [r2, #0]
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);

		  if(HAL_CAN_AddTxMessage(&hcan1, &pHeader, mensaje, &TxMailbox) != HAL_OK )
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <can1_Tx+0x64>)
 8000954:	683a      	ldr	r2, [r7, #0]
 8000956:	4909      	ldr	r1, [pc, #36]	; (800097c <can1_Tx+0x60>)
 8000958:	4807      	ldr	r0, [pc, #28]	; (8000978 <can1_Tx+0x5c>)
 800095a:	f001 f821 	bl	80019a0 <HAL_CAN_AddTxMessage>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <can1_Tx+0x4c>
	  		{
	  				return HAL_ERROR;
 8000964:	2301      	movs	r3, #1
 8000966:	e002      	b.n	800096e <can1_Tx+0x52>
	  		}
		  return HAL_OK;
 8000968:	2300      	movs	r3, #0
 800096a:	e000      	b.n	800096e <can1_Tx+0x52>
	  }
	  return HAL_ERROR;
 800096c:	2301      	movs	r3, #1
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	2000032c 	.word	0x2000032c
 800097c:	200000a0 	.word	0x200000a0
 8000980:	20000078 	.word	0x20000078

08000984 <Pc_Communication>:

int Pc_Communication(uint16_t Data[])
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]


	uint16_t  size = sizeof(Data) / sizeof(Data[0]);
 800098c:	2302      	movs	r3, #2
 800098e:	81fb      	strh	r3, [r7, #14]

	// esto puede explotar, ver que concuerden los tamaños a analizar.


		//hago un casteo a info_motores. EL DMA transmite 8-16 bits
	if(HAL_UART_Transmit_DMA(&huart3, Data, 2*UART_SIZE) != HAL_OK)
 8000990:	2218      	movs	r2, #24
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	4806      	ldr	r0, [pc, #24]	; (80009b0 <Pc_Communication+0x2c>)
 8000996:	f004 f86f 	bl	8004a78 <HAL_UART_Transmit_DMA>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <Pc_Communication+0x20>
	{
		return HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	e000      	b.n	80009a6 <Pc_Communication+0x22>
	}
		return HAL_OK;
 80009a4:	2300      	movs	r3, #0

}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000015c 	.word	0x2000015c

080009b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f001 fd2b 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009be:	2000      	movs	r0, #0
 80009c0:	f000 f806 	bl	80009d0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80009c4:	f005 fce8 	bl	8006398 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_InitTick+0x54>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_InitTick+0x58>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 fd45 	bl	800247e <HAL_SYSTICK_Config>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e00e      	b.n	8000a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b0f      	cmp	r3, #15
 8000a02:	d80a      	bhi.n	8000a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a04:	2200      	movs	r2, #0
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	f001 fd0d 	bl	800242a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a10:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <HAL_InitTick+0x5c>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e000      	b.n	8000a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000004 	.word	0x20000004
 8000a2c:	20000000 	.word	0x20000000

08000a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x20>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_IncTick+0x24>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_IncTick+0x24>)
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000004 	.word	0x20000004
 8000a54:	200000b8 	.word	0x200000b8

08000a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <HAL_GetTick+0x14>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200000b8 	.word	0x200000b8

08000a70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d101      	bne.n	8000a86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e031      	b.n	8000aea <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d109      	bne.n	8000aa2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f005 fca6 	bl	80063e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d116      	bne.n	8000adc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <HAL_ADC_Init+0x84>)
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	f043 0202 	orr.w	r2, r3, #2
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f000 fbbc 	bl	800123c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f023 0303 	bic.w	r3, r3, #3
 8000ad2:	f043 0201 	orr.w	r2, r3, #1
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	641a      	str	r2, [r3, #64]	; 0x40
 8000ada:	e001      	b.n	8000ae0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	ffffeefd 	.word	0xffffeefd

08000af8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	bf0c      	ite	eq
 8000b16:	2301      	moveq	r3, #1
 8000b18:	2300      	movne	r3, #0
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 0320 	and.w	r3, r3, #32
 8000b28:	2b20      	cmp	r3, #32
 8000b2a:	bf0c      	ite	eq
 8000b2c:	2301      	moveq	r3, #1
 8000b2e:	2300      	movne	r3, #0
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d049      	beq.n	8000bce <HAL_ADC_IRQHandler+0xd6>
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d046      	beq.n	8000bce <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	f003 0310 	and.w	r3, r3, #16
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d105      	bne.n	8000b58 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d12b      	bne.n	8000bbe <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d127      	bne.n	8000bbe <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b74:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d006      	beq.n	8000b8a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d119      	bne.n	8000bbe <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f022 0220 	bic.w	r2, r2, #32
 8000b98:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d105      	bne.n	8000bbe <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f043 0201 	orr.w	r2, r3, #1
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f000 f9ca 	bl	8000f58 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f06f 0212 	mvn.w	r2, #18
 8000bcc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	2b04      	cmp	r3, #4
 8000bda:	bf0c      	ite	eq
 8000bdc:	2301      	moveq	r3, #1
 8000bde:	2300      	movne	r3, #0
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bee:	2b80      	cmp	r3, #128	; 0x80
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2301      	moveq	r3, #1
 8000bf4:	2300      	movne	r3, #0
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d057      	beq.n	8000cb0 <HAL_ADC_IRQHandler+0x1b8>
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d054      	beq.n	8000cb0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f003 0310 	and.w	r3, r3, #16
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d105      	bne.n	8000c1e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d139      	bne.n	8000ca0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c32:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d006      	beq.n	8000c48 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d12b      	bne.n	8000ca0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d124      	bne.n	8000ca0 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d11d      	bne.n	8000ca0 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d119      	bne.n	8000ca0 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d105      	bne.n	8000ca0 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f043 0201 	orr.w	r2, r3, #1
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f000 fc47 	bl	8001534 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f06f 020c 	mvn.w	r2, #12
 8000cae:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	bf0c      	ite	eq
 8000cbe:	2301      	moveq	r3, #1
 8000cc0:	2300      	movne	r3, #0
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd0:	2b40      	cmp	r3, #64	; 0x40
 8000cd2:	bf0c      	ite	eq
 8000cd4:	2301      	moveq	r3, #1
 8000cd6:	2300      	movne	r3, #0
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d017      	beq.n	8000d12 <HAL_ADC_IRQHandler+0x21a>
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d014      	beq.n	8000d12 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d10d      	bne.n	8000d12 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f000 f93c 	bl	8000f80 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f06f 0201 	mvn.w	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0320 	and.w	r3, r3, #32
 8000d1c:	2b20      	cmp	r3, #32
 8000d1e:	bf0c      	ite	eq
 8000d20:	2301      	moveq	r3, #1
 8000d22:	2300      	movne	r3, #0
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000d36:	bf0c      	ite	eq
 8000d38:	2301      	moveq	r3, #1
 8000d3a:	2300      	movne	r3, #0
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d015      	beq.n	8000d72 <HAL_ADC_IRQHandler+0x27a>
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d012      	beq.n	8000d72 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d50:	f043 0202 	orr.w	r2, r3, #2
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f06f 0220 	mvn.w	r2, #32
 8000d60:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f000 f916 	bl	8000f94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f06f 0220 	mvn.w	r2, #32
 8000d70:	601a      	str	r2, [r3, #0]
  }
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d101      	bne.n	8000d9a <HAL_ADC_Start_DMA+0x1e>
 8000d96:	2302      	movs	r3, #2
 8000d98:	e0c7      	b.n	8000f2a <HAL_ADC_Start_DMA+0x1ae>
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d018      	beq.n	8000de2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0201 	orr.w	r2, r2, #1
 8000dbe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000dc0:	4b5c      	ldr	r3, [pc, #368]	; (8000f34 <HAL_ADC_Start_DMA+0x1b8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a5c      	ldr	r2, [pc, #368]	; (8000f38 <HAL_ADC_Start_DMA+0x1bc>)
 8000dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dca:	0c9a      	lsrs	r2, r3, #18
 8000dcc:	4613      	mov	r3, r2
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	4413      	add	r3, r2
 8000dd2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8000dd4:	e002      	b.n	8000ddc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f9      	bne.n	8000dd6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	f040 809b 	bne.w	8000f28 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000df6:	4b51      	ldr	r3, [pc, #324]	; (8000f3c <HAL_ADC_Start_DMA+0x1c0>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d007      	beq.n	8000e20 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e2c:	d106      	bne.n	8000e3c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f023 0206 	bic.w	r2, r3, #6
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	645a      	str	r2, [r3, #68]	; 0x44
 8000e3a:	e002      	b.n	8000e42 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e4e:	4a3c      	ldr	r2, [pc, #240]	; (8000f40 <HAL_ADC_Start_DMA+0x1c4>)
 8000e50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e56:	4a3b      	ldr	r2, [pc, #236]	; (8000f44 <HAL_ADC_Start_DMA+0x1c8>)
 8000e58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e5e:	4a3a      	ldr	r2, [pc, #232]	; (8000f48 <HAL_ADC_Start_DMA+0x1cc>)
 8000e60:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e6a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000e7a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689a      	ldr	r2, [r3, #8]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e8a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	334c      	adds	r3, #76	; 0x4c
 8000e96:	4619      	mov	r1, r3
 8000e98:	68ba      	ldr	r2, [r7, #8]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f001 fbaa 	bl	80025f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000ea0:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <HAL_ADC_Start_DMA+0x1d0>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 031f 	and.w	r3, r3, #31
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10f      	bne.n	8000ecc <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d136      	bne.n	8000f28 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	e02d      	b.n	8000f28 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a1f      	ldr	r2, [pc, #124]	; (8000f50 <HAL_ADC_Start_DMA+0x1d4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d10e      	bne.n	8000ef4 <HAL_ADC_Start_DMA+0x178>
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d107      	bne.n	8000ef4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ef2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_ADC_Start_DMA+0x1d0>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0310 	and.w	r3, r3, #16
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d113      	bne.n	8000f28 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <HAL_ADC_Start_DMA+0x1d8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d10e      	bne.n	8000f28 <HAL_ADC_Start_DMA+0x1ac>
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d107      	bne.n	8000f28 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f26:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008
 8000f38:	431bde83 	.word	0x431bde83
 8000f3c:	fffff8fe 	.word	0xfffff8fe
 8000f40:	08001431 	.word	0x08001431
 8000f44:	080014eb 	.word	0x080014eb
 8000f48:	08001507 	.word	0x08001507
 8000f4c:	40012300 	.word	0x40012300
 8000f50:	40012000 	.word	0x40012000
 8000f54:	40012200 	.word	0x40012200

08000f58 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d101      	bne.n	8000fc4 <HAL_ADC_ConfigChannel+0x1c>
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	e12a      	b.n	800121a <HAL_ADC_ConfigChannel+0x272>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b09      	cmp	r3, #9
 8000fd2:	d93a      	bls.n	800104a <HAL_ADC_ConfigChannel+0xa2>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000fdc:	d035      	beq.n	800104a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68d9      	ldr	r1, [r3, #12]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	461a      	mov	r2, r3
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3b1e      	subs	r3, #30
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	400a      	ands	r2, r1
 8001002:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a87      	ldr	r2, [pc, #540]	; (8001228 <HAL_ADC_ConfigChannel+0x280>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d10a      	bne.n	8001024 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	68d9      	ldr	r1, [r3, #12]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	061a      	lsls	r2, r3, #24
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	430a      	orrs	r2, r1
 8001020:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001022:	e035      	b.n	8001090 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68d9      	ldr	r1, [r3, #12]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	b29b      	uxth	r3, r3
 8001034:	4618      	mov	r0, r3
 8001036:	4603      	mov	r3, r0
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4403      	add	r3, r0
 800103c:	3b1e      	subs	r3, #30
 800103e:	409a      	lsls	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001048:	e022      	b.n	8001090 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6919      	ldr	r1, [r3, #16]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	b29b      	uxth	r3, r3
 8001056:	461a      	mov	r2, r3
 8001058:	4613      	mov	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	4413      	add	r3, r2
 800105e:	2207      	movs	r2, #7
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43da      	mvns	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	400a      	ands	r2, r1
 800106c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6919      	ldr	r1, [r3, #16]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	b29b      	uxth	r3, r3
 800107e:	4618      	mov	r0, r3
 8001080:	4603      	mov	r3, r0
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4403      	add	r3, r0
 8001086:	409a      	lsls	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	430a      	orrs	r2, r1
 800108e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b06      	cmp	r3, #6
 8001096:	d824      	bhi.n	80010e2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	3b05      	subs	r3, #5
 80010aa:	221f      	movs	r2, #31
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43da      	mvns	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	400a      	ands	r2, r1
 80010b8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	3b05      	subs	r3, #5
 80010d4:	fa00 f203 	lsl.w	r2, r0, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	430a      	orrs	r2, r1
 80010de:	635a      	str	r2, [r3, #52]	; 0x34
 80010e0:	e04c      	b.n	800117c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b0c      	cmp	r3, #12
 80010e8:	d824      	bhi.n	8001134 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	3b23      	subs	r3, #35	; 0x23
 80010fc:	221f      	movs	r2, #31
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	400a      	ands	r2, r1
 800110a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	b29b      	uxth	r3, r3
 8001118:	4618      	mov	r0, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	3b23      	subs	r3, #35	; 0x23
 8001126:	fa00 f203 	lsl.w	r2, r0, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	430a      	orrs	r2, r1
 8001130:	631a      	str	r2, [r3, #48]	; 0x30
 8001132:	e023      	b.n	800117c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	3b41      	subs	r3, #65	; 0x41
 8001146:	221f      	movs	r2, #31
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43da      	mvns	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	400a      	ands	r2, r1
 8001154:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	b29b      	uxth	r3, r3
 8001162:	4618      	mov	r0, r3
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	3b41      	subs	r3, #65	; 0x41
 8001170:	fa00 f203 	lsl.w	r2, r0, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a2a      	ldr	r2, [pc, #168]	; (800122c <HAL_ADC_ConfigChannel+0x284>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d10a      	bne.n	800119c <HAL_ADC_ConfigChannel+0x1f4>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800118e:	d105      	bne.n	800119c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <HAL_ADC_ConfigChannel+0x288>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	4a26      	ldr	r2, [pc, #152]	; (8001230 <HAL_ADC_ConfigChannel+0x288>)
 8001196:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800119a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a22      	ldr	r2, [pc, #136]	; (800122c <HAL_ADC_ConfigChannel+0x284>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d109      	bne.n	80011ba <HAL_ADC_ConfigChannel+0x212>
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b12      	cmp	r3, #18
 80011ac:	d105      	bne.n	80011ba <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <HAL_ADC_ConfigChannel+0x288>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	4a1f      	ldr	r2, [pc, #124]	; (8001230 <HAL_ADC_ConfigChannel+0x288>)
 80011b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011b8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a1b      	ldr	r2, [pc, #108]	; (800122c <HAL_ADC_ConfigChannel+0x284>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d125      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x268>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a17      	ldr	r2, [pc, #92]	; (8001228 <HAL_ADC_ConfigChannel+0x280>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d003      	beq.n	80011d6 <HAL_ADC_ConfigChannel+0x22e>
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b11      	cmp	r3, #17
 80011d4:	d11c      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <HAL_ADC_ConfigChannel+0x288>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	4a15      	ldr	r2, [pc, #84]	; (8001230 <HAL_ADC_ConfigChannel+0x288>)
 80011dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011e0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a10      	ldr	r2, [pc, #64]	; (8001228 <HAL_ADC_ConfigChannel+0x280>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d111      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_ADC_ConfigChannel+0x28c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a11      	ldr	r2, [pc, #68]	; (8001238 <HAL_ADC_ConfigChannel+0x290>)
 80011f2:	fba2 2303 	umull	r2, r3, r2, r3
 80011f6:	0c9a      	lsrs	r2, r3, #18
 80011f8:	4613      	mov	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001202:	e002      	b.n	800120a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3b01      	subs	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f9      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	10000012 	.word	0x10000012
 800122c:	40012000 	.word	0x40012000
 8001230:	40012300 	.word	0x40012300
 8001234:	20000008 	.word	0x20000008
 8001238:	431bde83 	.word	0x431bde83

0800123c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001244:	4b78      	ldr	r3, [pc, #480]	; (8001428 <ADC_Init+0x1ec>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	4a77      	ldr	r2, [pc, #476]	; (8001428 <ADC_Init+0x1ec>)
 800124a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800124e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001250:	4b75      	ldr	r3, [pc, #468]	; (8001428 <ADC_Init+0x1ec>)
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	4973      	ldr	r1, [pc, #460]	; (8001428 <ADC_Init+0x1ec>)
 800125a:	4313      	orrs	r3, r2
 800125c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800126c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6859      	ldr	r1, [r3, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	021a      	lsls	r2, r3, #8
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001290:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6859      	ldr	r1, [r3, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6899      	ldr	r1, [r3, #8]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ca:	4a58      	ldr	r2, [pc, #352]	; (800142c <ADC_Init+0x1f0>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d022      	beq.n	8001316 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6899      	ldr	r1, [r3, #8]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001300:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6899      	ldr	r1, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	e00f      	b.n	8001336 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001324:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001334:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0202 	bic.w	r2, r2, #2
 8001344:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6899      	ldr	r1, [r3, #8]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	005a      	lsls	r2, r3, #1
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	430a      	orrs	r2, r1
 8001358:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d01b      	beq.n	800139c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001372:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001382:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6859      	ldr	r1, [r3, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	3b01      	subs	r3, #1
 8001390:	035a      	lsls	r2, r3, #13
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	e007      	b.n	80013ac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80013ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	051a      	lsls	r2, r3, #20
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6899      	ldr	r1, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013ee:	025a      	lsls	r2, r3, #9
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001406:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6899      	ldr	r1, [r3, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	029a      	lsls	r2, r3, #10
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	609a      	str	r2, [r3, #8]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	40012300 	.word	0x40012300
 800142c:	0f000001 	.word	0x0f000001

08001430 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001446:	2b00      	cmp	r3, #0
 8001448:	d13c      	bne.n	80014c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d12b      	bne.n	80014bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001468:	2b00      	cmp	r3, #0
 800146a:	d127      	bne.n	80014bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001472:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001476:	2b00      	cmp	r3, #0
 8001478:	d006      	beq.n	8001488 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001484:	2b00      	cmp	r3, #0
 8001486:	d119      	bne.n	80014bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0220 	bic.w	r2, r2, #32
 8001496:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d105      	bne.n	80014bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f043 0201 	orr.w	r2, r3, #1
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f7ff fd4b 	bl	8000f58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80014c2:	e00e      	b.n	80014e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7ff fd5f 	bl	8000f94 <HAL_ADC_ErrorCallback>
}
 80014d6:	e004      	b.n	80014e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	4798      	blx	r3
}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b084      	sub	sp, #16
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f7ff fd37 	bl	8000f6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001512:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2240      	movs	r2, #64	; 0x40
 8001518:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f043 0204 	orr.w	r2, r3, #4
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f7ff fd34 	bl	8000f94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e0ed      	b.n	8001736 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f004 ffea 	bl	8006540 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0202 	bic.w	r2, r2, #2
 800157a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800157c:	f7ff fa6c 	bl	8000a58 <HAL_GetTick>
 8001580:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001582:	e012      	b.n	80015aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001584:	f7ff fa68 	bl	8000a58 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b0a      	cmp	r3, #10
 8001590:	d90b      	bls.n	80015aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2205      	movs	r2, #5
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0c5      	b.n	8001736 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1e5      	bne.n	8001584 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0201 	orr.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c8:	f7ff fa46 	bl	8000a58 <HAL_GetTick>
 80015cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ce:	e012      	b.n	80015f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015d0:	f7ff fa42 	bl	8000a58 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b0a      	cmp	r3, #10
 80015dc:	d90b      	bls.n	80015f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2205      	movs	r2, #5
 80015ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e09f      	b.n	8001736 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0e5      	beq.n	80015d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7e1b      	ldrb	r3, [r3, #24]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d108      	bne.n	800161e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	e007      	b.n	800162e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800162c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7e5b      	ldrb	r3, [r3, #25]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d108      	bne.n	8001648 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e007      	b.n	8001658 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001656:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7e9b      	ldrb	r3, [r3, #26]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d108      	bne.n	8001672 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0220 	orr.w	r2, r2, #32
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	e007      	b.n	8001682 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0220 	bic.w	r2, r2, #32
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7edb      	ldrb	r3, [r3, #27]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d108      	bne.n	800169c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0210 	bic.w	r2, r2, #16
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e007      	b.n	80016ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0210 	orr.w	r2, r2, #16
 80016aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7f1b      	ldrb	r3, [r3, #28]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d108      	bne.n	80016c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0208 	orr.w	r2, r2, #8
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	e007      	b.n	80016d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0208 	bic.w	r2, r2, #8
 80016d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7f5b      	ldrb	r3, [r3, #29]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d108      	bne.n	80016f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f042 0204 	orr.w	r2, r2, #4
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e007      	b.n	8001700 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0204 	bic.w	r2, r2, #4
 80016fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	ea42 0103 	orr.w	r1, r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	1e5a      	subs	r2, r3, #1
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001756:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001758:	7cfb      	ldrb	r3, [r7, #19]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d003      	beq.n	8001766 <HAL_CAN_ConfigFilter+0x26>
 800175e:	7cfb      	ldrb	r3, [r7, #19]
 8001760:	2b02      	cmp	r3, #2
 8001762:	f040 80c7 	bne.w	80018f4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a69      	ldr	r2, [pc, #420]	; (8001910 <HAL_CAN_ConfigFilter+0x1d0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d001      	beq.n	8001774 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001770:	4b68      	ldr	r3, [pc, #416]	; (8001914 <HAL_CAN_ConfigFilter+0x1d4>)
 8001772:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800177a:	f043 0201 	orr.w	r2, r3, #1
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	4a63      	ldr	r2, [pc, #396]	; (8001914 <HAL_CAN_ConfigFilter+0x1d4>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d111      	bne.n	80017b0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001792:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	431a      	orrs	r2, r3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	2201      	movs	r2, #1
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	401a      	ands	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d123      	bne.n	8001822 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	401a      	ands	r2, r3
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017fc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	3248      	adds	r2, #72	; 0x48
 8001802:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001816:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001818:	6979      	ldr	r1, [r7, #20]
 800181a:	3348      	adds	r3, #72	; 0x48
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d122      	bne.n	8001870 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	431a      	orrs	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800184a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3248      	adds	r2, #72	; 0x48
 8001850:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001864:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001866:	6979      	ldr	r1, [r7, #20]
 8001868:	3348      	adds	r3, #72	; 0x48
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d109      	bne.n	800188c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	43db      	mvns	r3, r3
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800188a:	e007      	b.n	800189c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	431a      	orrs	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80018b6:	e007      	b.n	80018c8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	431a      	orrs	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d107      	bne.n	80018e0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	431a      	orrs	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018e6:	f023 0201 	bic.w	r2, r3, #1
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	e006      	b.n	8001902 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
  }
}
 8001902:	4618      	mov	r0, r3
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40003400 	.word	0x40003400
 8001914:	40006400 	.word	0x40006400

08001918 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b01      	cmp	r3, #1
 800192a:	d12e      	bne.n	800198a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2202      	movs	r2, #2
 8001930:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0201 	bic.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001944:	f7ff f888 	bl	8000a58 <HAL_GetTick>
 8001948:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800194a:	e012      	b.n	8001972 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800194c:	f7ff f884 	bl	8000a58 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b0a      	cmp	r3, #10
 8001958:	d90b      	bls.n	8001972 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2205      	movs	r2, #5
 800196a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e012      	b.n	8001998 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1e5      	bne.n	800194c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	e006      	b.n	8001998 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
  }
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80019be:	7ffb      	ldrb	r3, [r7, #31]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d003      	beq.n	80019cc <HAL_CAN_AddTxMessage+0x2c>
 80019c4:	7ffb      	ldrb	r3, [r7, #31]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	f040 80b8 	bne.w	8001b3c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10a      	bne.n	80019ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d105      	bne.n	80019ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 80a0 	beq.w	8001b2c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	0e1b      	lsrs	r3, r3, #24
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d907      	bls.n	8001a0c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e09e      	b.n	8001b4a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	409a      	lsls	r2, r3
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10d      	bne.n	8001a3a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a28:	68f9      	ldr	r1, [r7, #12]
 8001a2a:	6809      	ldr	r1, [r1, #0]
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3318      	adds	r3, #24
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	440b      	add	r3, r1
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e00f      	b.n	8001a5a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a44:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a4a:	68f9      	ldr	r1, [r7, #12]
 8001a4c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a4e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	3318      	adds	r3, #24
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	440b      	add	r3, r1
 8001a58:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6819      	ldr	r1, [r3, #0]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	691a      	ldr	r2, [r3, #16]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	3318      	adds	r3, #24
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	440b      	add	r3, r1
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	7d1b      	ldrb	r3, [r3, #20]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d111      	bne.n	8001a9a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3318      	adds	r3, #24
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	4413      	add	r3, r2
 8001a82:	3304      	adds	r3, #4
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	6811      	ldr	r1, [r2, #0]
 8001a8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	3318      	adds	r3, #24
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	440b      	add	r3, r1
 8001a96:	3304      	adds	r3, #4
 8001a98:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3307      	adds	r3, #7
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	061a      	lsls	r2, r3, #24
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3306      	adds	r3, #6
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	041b      	lsls	r3, r3, #16
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3305      	adds	r3, #5
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	3204      	adds	r2, #4
 8001aba:	7812      	ldrb	r2, [r2, #0]
 8001abc:	4610      	mov	r0, r2
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	6811      	ldr	r1, [r2, #0]
 8001ac2:	ea43 0200 	orr.w	r2, r3, r0
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	440b      	add	r3, r1
 8001acc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001ad0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3303      	adds	r3, #3
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	061a      	lsls	r2, r3, #24
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3302      	adds	r3, #2
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	041b      	lsls	r3, r3, #16
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	021b      	lsls	r3, r3, #8
 8001aec:	4313      	orrs	r3, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	7812      	ldrb	r2, [r2, #0]
 8001af2:	4610      	mov	r0, r2
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	6811      	ldr	r1, [r2, #0]
 8001af8:	ea43 0200 	orr.w	r2, r3, r0
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	440b      	add	r3, r1
 8001b02:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b06:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	3318      	adds	r3, #24
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	4413      	add	r3, r2
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	6811      	ldr	r1, [r2, #0]
 8001b1a:	f043 0201 	orr.w	r2, r3, #1
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3318      	adds	r3, #24
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	440b      	add	r3, r1
 8001b26:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	e00e      	b.n	8001b4a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e006      	b.n	8001b4a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
  }
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3724      	adds	r7, #36	; 0x24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b085      	sub	sp, #20
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b6c:	7afb      	ldrb	r3, [r7, #11]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d002      	beq.n	8001b78 <HAL_CAN_IsTxMessagePending+0x22>
 8001b72:	7afb      	ldrb	r3, [r7, #11]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d10b      	bne.n	8001b90 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	069b      	lsls	r3, r3, #26
 8001b82:	401a      	ands	r2, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	069b      	lsls	r3, r3, #26
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001b90:	68fb      	ldr	r3, [r7, #12]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b087      	sub	sp, #28
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bb4:	7dfb      	ldrb	r3, [r7, #23]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d003      	beq.n	8001bc2 <HAL_CAN_GetRxMessage+0x24>
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	f040 80f3 	bne.w	8001da8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10e      	bne.n	8001be6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d116      	bne.n	8001c04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0e7      	b.n	8001db6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d107      	bne.n	8001c04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0d8      	b.n	8001db6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	331b      	adds	r3, #27
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0204 	and.w	r2, r3, #4
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10c      	bne.n	8001c3c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	331b      	adds	r3, #27
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	4413      	add	r3, r2
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	0d5b      	lsrs	r3, r3, #21
 8001c32:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e00b      	b.n	8001c54 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	331b      	adds	r3, #27
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	4413      	add	r3, r2
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	08db      	lsrs	r3, r3, #3
 8001c4c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	331b      	adds	r3, #27
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	4413      	add	r3, r2
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0202 	and.w	r2, r3, #2
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	331b      	adds	r3, #27
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	4413      	add	r3, r2
 8001c76:	3304      	adds	r3, #4
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 020f 	and.w	r2, r3, #15
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	331b      	adds	r3, #27
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3304      	adds	r3, #4
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	331b      	adds	r3, #27
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0c1b      	lsrs	r3, r3, #16
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	0a1a      	lsrs	r2, r3, #8
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	4413      	add	r3, r2
 8001cec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	0c1a      	lsrs	r2, r3, #16
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	0e1a      	lsrs	r2, r3, #24
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	3303      	adds	r3, #3
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	0a1a      	lsrs	r2, r3, #8
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	3305      	adds	r3, #5
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	0c1a      	lsrs	r2, r3, #16
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	3306      	adds	r3, #6
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	0e1a      	lsrs	r2, r3, #24
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	3307      	adds	r3, #7
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d108      	bne.n	8001d94 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0220 	orr.w	r2, r2, #32
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	e007      	b.n	8001da4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0220 	orr.w	r2, r2, #32
 8001da2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	e006      	b.n	8001db6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
  }
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	371c      	adds	r7, #28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d002      	beq.n	8001de0 <HAL_CAN_ActivateNotification+0x1e>
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d109      	bne.n	8001df4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6959      	ldr	r1, [r3, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e006      	b.n	8001e02 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
  }
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b08a      	sub	sp, #40	; 0x28
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d07c      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d023      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2201      	movs	r2, #1
 8001e64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f97d 	bl	8002170 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e76:	e016      	b.n	8001ea6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d004      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8a:	e00c      	b.n	8001ea6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d004      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9e:	e002      	b.n	8001ea6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f983 	bl	80021ac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d024      	beq.n	8001efa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f95d 	bl	8002184 <HAL_CAN_TxMailbox1CompleteCallback>
 8001eca:	e016      	b.n	8001efa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d004      	beq.n	8001ee0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ede:	e00c      	b.n	8001efa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d004      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef2:	e002      	b.n	8001efa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f963 	bl	80021c0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d024      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f93d 	bl	8002198 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f1e:	e016      	b.n	8001f4e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d004      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
 8001f32:	e00c      	b.n	8001f4e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d004      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
 8001f46:	e002      	b.n	8001f4e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f943 	bl	80021d4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00c      	beq.n	8001f72 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d007      	beq.n	8001f72 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2210      	movs	r2, #16
 8001f70:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00b      	beq.n	8001f94 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d006      	beq.n	8001f94 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2208      	movs	r2, #8
 8001f8c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f934 	bl	80021fc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f91b 	bl	80021e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00c      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2210      	movs	r2, #16
 8001fd4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00b      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d006      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2208      	movs	r2, #8
 8001ff0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f916 	bl	8002224 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f8fd 	bl	8002210 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00b      	beq.n	8002038 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	d006      	beq.n	8002038 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2210      	movs	r2, #16
 8002030:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f900 	bl	8002238 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2208      	movs	r2, #8
 8002052:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f8f9 	bl	800224c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d075      	beq.n	8002150 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b00      	cmp	r3, #0
 800206c:	d06c      	beq.n	8002148 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	f043 0304 	orr.w	r3, r3, #4
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d03d      	beq.n	8002148 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d038      	beq.n	8002148 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020dc:	2b30      	cmp	r3, #48	; 0x30
 80020de:	d017      	beq.n	8002110 <HAL_CAN_IRQHandler+0x302>
 80020e0:	2b30      	cmp	r3, #48	; 0x30
 80020e2:	d804      	bhi.n	80020ee <HAL_CAN_IRQHandler+0x2e0>
 80020e4:	2b10      	cmp	r3, #16
 80020e6:	d009      	beq.n	80020fc <HAL_CAN_IRQHandler+0x2ee>
 80020e8:	2b20      	cmp	r3, #32
 80020ea:	d00c      	beq.n	8002106 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80020ec:	e024      	b.n	8002138 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80020ee:	2b50      	cmp	r3, #80	; 0x50
 80020f0:	d018      	beq.n	8002124 <HAL_CAN_IRQHandler+0x316>
 80020f2:	2b60      	cmp	r3, #96	; 0x60
 80020f4:	d01b      	beq.n	800212e <HAL_CAN_IRQHandler+0x320>
 80020f6:	2b40      	cmp	r3, #64	; 0x40
 80020f8:	d00f      	beq.n	800211a <HAL_CAN_IRQHandler+0x30c>
            break;
 80020fa:	e01d      	b.n	8002138 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	f043 0308 	orr.w	r3, r3, #8
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002104:	e018      	b.n	8002138 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	f043 0310 	orr.w	r3, r3, #16
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800210e:	e013      	b.n	8002138 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	f043 0320 	orr.w	r3, r3, #32
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002118:	e00e      	b.n	8002138 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002122:	e009      	b.n	8002138 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800212c:	e004      	b.n	8002138 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002136:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002146:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2204      	movs	r2, #4
 800214e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	2b00      	cmp	r3, #0
 8002154:	d008      	beq.n	8002168 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f87c 	bl	8002260 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002168:	bf00      	nop
 800216a:	3728      	adds	r7, #40	; 0x28
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <__NVIC_SetPriorityGrouping+0x40>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a2:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <__NVIC_SetPriorityGrouping+0x40>)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	60d3      	str	r3, [r2, #12]
}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00
 80022b8:	05fa0000 	.word	0x05fa0000

080022bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <__NVIC_GetPriorityGrouping+0x18>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0307 	and.w	r3, r3, #7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	db0b      	blt.n	8002302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4907      	ldr	r1, [pc, #28]	; (8002310 <__NVIC_EnableIRQ+0x38>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2001      	movs	r0, #1
 80022fa:	fa00 f202 	lsl.w	r2, r0, r2
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000e100 	.word	0xe000e100

08002314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	db0a      	blt.n	800233e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	490c      	ldr	r1, [pc, #48]	; (8002360 <__NVIC_SetPriority+0x4c>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800233c:	e00a      	b.n	8002354 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4908      	ldr	r1, [pc, #32]	; (8002364 <__NVIC_SetPriority+0x50>)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3b04      	subs	r3, #4
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	440b      	add	r3, r1
 8002352:	761a      	strb	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0307 	rsb	r3, r3, #7
 8002382:	2b04      	cmp	r3, #4
 8002384:	bf28      	it	cs
 8002386:	2304      	movcs	r3, #4
 8002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3304      	adds	r3, #4
 800238e:	2b06      	cmp	r3, #6
 8002390:	d902      	bls.n	8002398 <NVIC_EncodePriority+0x30>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3b03      	subs	r3, #3
 8002396:	e000      	b.n	800239a <NVIC_EncodePriority+0x32>
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	f04f 32ff 	mov.w	r2, #4294967295
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	4313      	orrs	r3, r2
         );
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e0:	d301      	bcc.n	80023e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00f      	b.n	8002406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <SysTick_Config+0x40>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ee:	210f      	movs	r1, #15
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f7ff ff8e 	bl	8002314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <SysTick_Config+0x40>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <SysTick_Config+0x40>)
 8002400:	2207      	movs	r2, #7
 8002402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	e000e010 	.word	0xe000e010

08002414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff29 	bl	8002274 <__NVIC_SetPriorityGrouping>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800243c:	f7ff ff3e 	bl	80022bc <__NVIC_GetPriorityGrouping>
 8002440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	6978      	ldr	r0, [r7, #20]
 8002448:	f7ff ff8e 	bl	8002368 <NVIC_EncodePriority>
 800244c:	4602      	mov	r2, r0
 800244e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff5d 	bl	8002314 <__NVIC_SetPriority>
}
 800245a:	bf00      	nop
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff31 	bl	80022d8 <__NVIC_EnableIRQ>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ffa2 	bl	80023d0 <SysTick_Config>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024a4:	f7fe fad8 	bl	8000a58 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e099      	b.n	80025e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d4:	e00f      	b.n	80024f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024d6:	f7fe fabf 	bl	8000a58 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b05      	cmp	r3, #5
 80024e2:	d908      	bls.n	80024f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2203      	movs	r2, #3
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e078      	b.n	80025e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e8      	bne.n	80024d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	4b38      	ldr	r3, [pc, #224]	; (80025f0 <HAL_DMA_Init+0x158>)
 8002510:	4013      	ands	r3, r2
 8002512:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002522:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4313      	orrs	r3, r2
 8002546:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	2b04      	cmp	r3, #4
 800254e:	d107      	bne.n	8002560 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	4313      	orrs	r3, r2
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4313      	orrs	r3, r2
 800255e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f023 0307 	bic.w	r3, r3, #7
 8002576:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	2b04      	cmp	r3, #4
 8002588:	d117      	bne.n	80025ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00e      	beq.n	80025ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fa99 	bl	8002ad4 <DMA_CheckFifoParam>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2240      	movs	r2, #64	; 0x40
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025b6:	2301      	movs	r3, #1
 80025b8:	e016      	b.n	80025e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fa50 	bl	8002a68 <DMA_CalcBaseAndBitshift>
 80025c8:	4603      	mov	r3, r0
 80025ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	223f      	movs	r2, #63	; 0x3f
 80025d2:	409a      	lsls	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	e010803f 	.word	0xe010803f

080025f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_DMA_Start_IT+0x26>
 8002616:	2302      	movs	r3, #2
 8002618:	e048      	b.n	80026ac <HAL_DMA_Start_IT+0xb8>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b01      	cmp	r3, #1
 800262c:	d137      	bne.n	800269e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2202      	movs	r2, #2
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f9e2 	bl	8002a0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264c:	223f      	movs	r2, #63	; 0x3f
 800264e:	409a      	lsls	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0216 	orr.w	r2, r2, #22
 8002662:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002672:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0208 	orr.w	r2, r2, #8
 800268a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e005      	b.n	80026aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026a6:	2302      	movs	r3, #2
 80026a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d004      	beq.n	80026d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2280      	movs	r2, #128	; 0x80
 80026cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00c      	b.n	80026ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2205      	movs	r2, #5
 80026d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002704:	4b92      	ldr	r3, [pc, #584]	; (8002950 <HAL_DMA_IRQHandler+0x258>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a92      	ldr	r2, [pc, #584]	; (8002954 <HAL_DMA_IRQHandler+0x25c>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	0a9b      	lsrs	r3, r3, #10
 8002710:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002722:	2208      	movs	r2, #8
 8002724:	409a      	lsls	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d01a      	beq.n	8002764 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0204 	bic.w	r2, r2, #4
 800274a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	2208      	movs	r2, #8
 8002752:	409a      	lsls	r2, r3
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	f043 0201 	orr.w	r2, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	2201      	movs	r2, #1
 800276a:	409a      	lsls	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d012      	beq.n	800279a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002786:	2201      	movs	r2, #1
 8002788:	409a      	lsls	r2, r3
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	f043 0202 	orr.w	r2, r3, #2
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279e:	2204      	movs	r2, #4
 80027a0:	409a      	lsls	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d012      	beq.n	80027d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00b      	beq.n	80027d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027bc:	2204      	movs	r2, #4
 80027be:	409a      	lsls	r2, r3
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c8:	f043 0204 	orr.w	r2, r3, #4
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d4:	2210      	movs	r2, #16
 80027d6:	409a      	lsls	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d043      	beq.n	8002868 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d03c      	beq.n	8002868 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f2:	2210      	movs	r2, #16
 80027f4:	409a      	lsls	r2, r3
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d018      	beq.n	800283a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d108      	bne.n	8002828 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	d024      	beq.n	8002868 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
 8002826:	e01f      	b.n	8002868 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01b      	beq.n	8002868 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	4798      	blx	r3
 8002838:	e016      	b.n	8002868 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d107      	bne.n	8002858 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0208 	bic.w	r2, r2, #8
 8002856:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286c:	2220      	movs	r2, #32
 800286e:	409a      	lsls	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 808e 	beq.w	8002996 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 8086 	beq.w	8002996 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288e:	2220      	movs	r2, #32
 8002890:	409a      	lsls	r2, r3
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b05      	cmp	r3, #5
 80028a0:	d136      	bne.n	8002910 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0216 	bic.w	r2, r2, #22
 80028b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695a      	ldr	r2, [r3, #20]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d103      	bne.n	80028d2 <HAL_DMA_IRQHandler+0x1da>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d007      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0208 	bic.w	r2, r2, #8
 80028e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e6:	223f      	movs	r2, #63	; 0x3f
 80028e8:	409a      	lsls	r2, r3
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002902:	2b00      	cmp	r3, #0
 8002904:	d07d      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4798      	blx	r3
        }
        return;
 800290e:	e078      	b.n	8002a02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01c      	beq.n	8002958 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d108      	bne.n	800293e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002930:	2b00      	cmp	r3, #0
 8002932:	d030      	beq.n	8002996 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	4798      	blx	r3
 800293c:	e02b      	b.n	8002996 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	2b00      	cmp	r3, #0
 8002944:	d027      	beq.n	8002996 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	4798      	blx	r3
 800294e:	e022      	b.n	8002996 <HAL_DMA_IRQHandler+0x29e>
 8002950:	20000008 	.word	0x20000008
 8002954:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10f      	bne.n	8002986 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0210 	bic.w	r2, r2, #16
 8002974:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299a:	2b00      	cmp	r3, #0
 800299c:	d032      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d022      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2205      	movs	r2, #5
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0201 	bic.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	3301      	adds	r3, #1
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d307      	bcc.n	80029de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f2      	bne.n	80029c2 <HAL_DMA_IRQHandler+0x2ca>
 80029dc:	e000      	b.n	80029e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80029de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	4798      	blx	r3
 8002a00:	e000      	b.n	8002a04 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a02:	bf00      	nop
    }
  }
}
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop

08002a0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b40      	cmp	r3, #64	; 0x40
 8002a38:	d108      	bne.n	8002a4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a4a:	e007      	b.n	8002a5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	60da      	str	r2, [r3, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	3b10      	subs	r3, #16
 8002a78:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <DMA_CalcBaseAndBitshift+0x60>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a82:	4a12      	ldr	r2, [pc, #72]	; (8002acc <DMA_CalcBaseAndBitshift+0x64>)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d908      	bls.n	8002aa8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <DMA_CalcBaseAndBitshift+0x68>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	1d1a      	adds	r2, r3, #4
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	659a      	str	r2, [r3, #88]	; 0x58
 8002aa6:	e006      	b.n	8002ab6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	461a      	mov	r2, r3
 8002aae:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <DMA_CalcBaseAndBitshift+0x68>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	aaaaaaab 	.word	0xaaaaaaab
 8002acc:	08006a08 	.word	0x08006a08
 8002ad0:	fffffc00 	.word	0xfffffc00

08002ad4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d11f      	bne.n	8002b2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d855      	bhi.n	8002ba0 <DMA_CheckFifoParam+0xcc>
 8002af4:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <DMA_CheckFifoParam+0x28>)
 8002af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afa:	bf00      	nop
 8002afc:	08002b0d 	.word	0x08002b0d
 8002b00:	08002b1f 	.word	0x08002b1f
 8002b04:	08002b0d 	.word	0x08002b0d
 8002b08:	08002ba1 	.word	0x08002ba1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d045      	beq.n	8002ba4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1c:	e042      	b.n	8002ba4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b26:	d13f      	bne.n	8002ba8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b2c:	e03c      	b.n	8002ba8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b36:	d121      	bne.n	8002b7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d836      	bhi.n	8002bac <DMA_CheckFifoParam+0xd8>
 8002b3e:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <DMA_CheckFifoParam+0x70>)
 8002b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b44:	08002b55 	.word	0x08002b55
 8002b48:	08002b5b 	.word	0x08002b5b
 8002b4c:	08002b55 	.word	0x08002b55
 8002b50:	08002b6d 	.word	0x08002b6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
      break;
 8002b58:	e02f      	b.n	8002bba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d024      	beq.n	8002bb0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6a:	e021      	b.n	8002bb0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b74:	d11e      	bne.n	8002bb4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b7a:	e01b      	b.n	8002bb4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d902      	bls.n	8002b88 <DMA_CheckFifoParam+0xb4>
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d003      	beq.n	8002b8e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b86:	e018      	b.n	8002bba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b8c:	e015      	b.n	8002bba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00e      	beq.n	8002bb8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b9e:	e00b      	b.n	8002bb8 <DMA_CheckFifoParam+0xe4>
      break;
 8002ba0:	bf00      	nop
 8002ba2:	e00a      	b.n	8002bba <DMA_CheckFifoParam+0xe6>
      break;
 8002ba4:	bf00      	nop
 8002ba6:	e008      	b.n	8002bba <DMA_CheckFifoParam+0xe6>
      break;
 8002ba8:	bf00      	nop
 8002baa:	e006      	b.n	8002bba <DMA_CheckFifoParam+0xe6>
      break;
 8002bac:	bf00      	nop
 8002bae:	e004      	b.n	8002bba <DMA_CheckFifoParam+0xe6>
      break;
 8002bb0:	bf00      	nop
 8002bb2:	e002      	b.n	8002bba <DMA_CheckFifoParam+0xe6>
      break;   
 8002bb4:	bf00      	nop
 8002bb6:	e000      	b.n	8002bba <DMA_CheckFifoParam+0xe6>
      break;
 8002bb8:	bf00      	nop
    }
  } 
  
  return status; 
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b089      	sub	sp, #36	; 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
 8002be6:	e175      	b.n	8002ed4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002be8:	2201      	movs	r2, #1
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	f040 8164 	bne.w	8002ece <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d00b      	beq.n	8002c26 <HAL_GPIO_Init+0x5e>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d007      	beq.n	8002c26 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c1a:	2b11      	cmp	r3, #17
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b12      	cmp	r3, #18
 8002c24:	d130      	bne.n	8002c88 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	2203      	movs	r2, #3
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 0201 	and.w	r2, r3, #1
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	2203      	movs	r2, #3
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d003      	beq.n	8002cc8 <HAL_GPIO_Init+0x100>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b12      	cmp	r3, #18
 8002cc6:	d123      	bne.n	8002d10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	08da      	lsrs	r2, r3, #3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3208      	adds	r2, #8
 8002cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	220f      	movs	r2, #15
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	08da      	lsrs	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3208      	adds	r2, #8
 8002d0a:	69b9      	ldr	r1, [r7, #24]
 8002d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 0203 	and.w	r2, r3, #3
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80be 	beq.w	8002ece <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d52:	4b65      	ldr	r3, [pc, #404]	; (8002ee8 <HAL_GPIO_Init+0x320>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	4a64      	ldr	r2, [pc, #400]	; (8002ee8 <HAL_GPIO_Init+0x320>)
 8002d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5e:	4b62      	ldr	r3, [pc, #392]	; (8002ee8 <HAL_GPIO_Init+0x320>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d6a:	4a60      	ldr	r2, [pc, #384]	; (8002eec <HAL_GPIO_Init+0x324>)
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	3302      	adds	r3, #2
 8002d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	220f      	movs	r2, #15
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a57      	ldr	r2, [pc, #348]	; (8002ef0 <HAL_GPIO_Init+0x328>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d037      	beq.n	8002e06 <HAL_GPIO_Init+0x23e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a56      	ldr	r2, [pc, #344]	; (8002ef4 <HAL_GPIO_Init+0x32c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d031      	beq.n	8002e02 <HAL_GPIO_Init+0x23a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a55      	ldr	r2, [pc, #340]	; (8002ef8 <HAL_GPIO_Init+0x330>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d02b      	beq.n	8002dfe <HAL_GPIO_Init+0x236>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a54      	ldr	r2, [pc, #336]	; (8002efc <HAL_GPIO_Init+0x334>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d025      	beq.n	8002dfa <HAL_GPIO_Init+0x232>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a53      	ldr	r2, [pc, #332]	; (8002f00 <HAL_GPIO_Init+0x338>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d01f      	beq.n	8002df6 <HAL_GPIO_Init+0x22e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a52      	ldr	r2, [pc, #328]	; (8002f04 <HAL_GPIO_Init+0x33c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d019      	beq.n	8002df2 <HAL_GPIO_Init+0x22a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a51      	ldr	r2, [pc, #324]	; (8002f08 <HAL_GPIO_Init+0x340>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d013      	beq.n	8002dee <HAL_GPIO_Init+0x226>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a50      	ldr	r2, [pc, #320]	; (8002f0c <HAL_GPIO_Init+0x344>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00d      	beq.n	8002dea <HAL_GPIO_Init+0x222>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4f      	ldr	r2, [pc, #316]	; (8002f10 <HAL_GPIO_Init+0x348>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d007      	beq.n	8002de6 <HAL_GPIO_Init+0x21e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a4e      	ldr	r2, [pc, #312]	; (8002f14 <HAL_GPIO_Init+0x34c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d101      	bne.n	8002de2 <HAL_GPIO_Init+0x21a>
 8002dde:	2309      	movs	r3, #9
 8002de0:	e012      	b.n	8002e08 <HAL_GPIO_Init+0x240>
 8002de2:	230a      	movs	r3, #10
 8002de4:	e010      	b.n	8002e08 <HAL_GPIO_Init+0x240>
 8002de6:	2308      	movs	r3, #8
 8002de8:	e00e      	b.n	8002e08 <HAL_GPIO_Init+0x240>
 8002dea:	2307      	movs	r3, #7
 8002dec:	e00c      	b.n	8002e08 <HAL_GPIO_Init+0x240>
 8002dee:	2306      	movs	r3, #6
 8002df0:	e00a      	b.n	8002e08 <HAL_GPIO_Init+0x240>
 8002df2:	2305      	movs	r3, #5
 8002df4:	e008      	b.n	8002e08 <HAL_GPIO_Init+0x240>
 8002df6:	2304      	movs	r3, #4
 8002df8:	e006      	b.n	8002e08 <HAL_GPIO_Init+0x240>
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e004      	b.n	8002e08 <HAL_GPIO_Init+0x240>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e002      	b.n	8002e08 <HAL_GPIO_Init+0x240>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <HAL_GPIO_Init+0x240>
 8002e06:	2300      	movs	r3, #0
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	f002 0203 	and.w	r2, r2, #3
 8002e0e:	0092      	lsls	r2, r2, #2
 8002e10:	4093      	lsls	r3, r2
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e18:	4934      	ldr	r1, [pc, #208]	; (8002eec <HAL_GPIO_Init+0x324>)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	089b      	lsrs	r3, r3, #2
 8002e1e:	3302      	adds	r3, #2
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e26:	4b3c      	ldr	r3, [pc, #240]	; (8002f18 <HAL_GPIO_Init+0x350>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e4a:	4a33      	ldr	r2, [pc, #204]	; (8002f18 <HAL_GPIO_Init+0x350>)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e50:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <HAL_GPIO_Init+0x350>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e74:	4a28      	ldr	r2, [pc, #160]	; (8002f18 <HAL_GPIO_Init+0x350>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e7a:	4b27      	ldr	r3, [pc, #156]	; (8002f18 <HAL_GPIO_Init+0x350>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e9e:	4a1e      	ldr	r2, [pc, #120]	; (8002f18 <HAL_GPIO_Init+0x350>)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ea4:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <HAL_GPIO_Init+0x350>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ec8:	4a13      	ldr	r2, [pc, #76]	; (8002f18 <HAL_GPIO_Init+0x350>)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b0f      	cmp	r3, #15
 8002ed8:	f67f ae86 	bls.w	8002be8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002edc:	bf00      	nop
 8002ede:	3724      	adds	r7, #36	; 0x24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40013800 	.word	0x40013800
 8002ef0:	40020000 	.word	0x40020000
 8002ef4:	40020400 	.word	0x40020400
 8002ef8:	40020800 	.word	0x40020800
 8002efc:	40020c00 	.word	0x40020c00
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40021400 	.word	0x40021400
 8002f08:	40021800 	.word	0x40021800
 8002f0c:	40021c00 	.word	0x40021c00
 8002f10:	40022000 	.word	0x40022000
 8002f14:	40022400 	.word	0x40022400
 8002f18:	40013c00 	.word	0x40013c00

08002f1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	887b      	ldrh	r3, [r7, #2]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
 8002f38:	e001      	b.n	8002f3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	807b      	strh	r3, [r7, #2]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f5c:	787b      	ldrb	r3, [r7, #1]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f68:	e003      	b.n	8002f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f6a:	887b      	ldrh	r3, [r7, #2]
 8002f6c:	041a      	lsls	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	619a      	str	r2, [r3, #24]
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	460b      	mov	r3, r1
 8002f88:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	887b      	ldrh	r3, [r7, #2]
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d004      	beq.n	8002fa0 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	041a      	lsls	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002f9e:	e002      	b.n	8002fa6 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fa0:	887a      	ldrh	r2, [r7, #2]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	619a      	str	r2, [r3, #24]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e29b      	b.n	8003502 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 8087 	beq.w	80030e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fd8:	4b96      	ldr	r3, [pc, #600]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 030c 	and.w	r3, r3, #12
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d00c      	beq.n	8002ffe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe4:	4b93      	ldr	r3, [pc, #588]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d112      	bne.n	8003016 <HAL_RCC_OscConfig+0x62>
 8002ff0:	4b90      	ldr	r3, [pc, #576]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ffc:	d10b      	bne.n	8003016 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffe:	4b8d      	ldr	r3, [pc, #564]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d06c      	beq.n	80030e4 <HAL_RCC_OscConfig+0x130>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d168      	bne.n	80030e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e275      	b.n	8003502 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301e:	d106      	bne.n	800302e <HAL_RCC_OscConfig+0x7a>
 8003020:	4b84      	ldr	r3, [pc, #528]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a83      	ldr	r2, [pc, #524]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	e02e      	b.n	800308c <HAL_RCC_OscConfig+0xd8>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10c      	bne.n	8003050 <HAL_RCC_OscConfig+0x9c>
 8003036:	4b7f      	ldr	r3, [pc, #508]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a7e      	ldr	r2, [pc, #504]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 800303c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	4b7c      	ldr	r3, [pc, #496]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a7b      	ldr	r2, [pc, #492]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003048:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e01d      	b.n	800308c <HAL_RCC_OscConfig+0xd8>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0xc0>
 800305a:	4b76      	ldr	r3, [pc, #472]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a75      	ldr	r2, [pc, #468]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b73      	ldr	r3, [pc, #460]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a72      	ldr	r2, [pc, #456]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e00b      	b.n	800308c <HAL_RCC_OscConfig+0xd8>
 8003074:	4b6f      	ldr	r3, [pc, #444]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a6e      	ldr	r2, [pc, #440]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 800307a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	4b6c      	ldr	r3, [pc, #432]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a6b      	ldr	r2, [pc, #428]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d013      	beq.n	80030bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fd fce0 	bl	8000a58 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800309c:	f7fd fcdc 	bl	8000a58 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	; 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e229      	b.n	8003502 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	4b61      	ldr	r3, [pc, #388]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0xe8>
 80030ba:	e014      	b.n	80030e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7fd fccc 	bl	8000a58 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c4:	f7fd fcc8 	bl	8000a58 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b64      	cmp	r3, #100	; 0x64
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e215      	b.n	8003502 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d6:	4b57      	ldr	r3, [pc, #348]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x110>
 80030e2:	e000      	b.n	80030e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d069      	beq.n	80031c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030f2:	4b50      	ldr	r3, [pc, #320]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030fe:	4b4d      	ldr	r3, [pc, #308]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b08      	cmp	r3, #8
 8003108:	d11c      	bne.n	8003144 <HAL_RCC_OscConfig+0x190>
 800310a:	4b4a      	ldr	r3, [pc, #296]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d116      	bne.n	8003144 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003116:	4b47      	ldr	r3, [pc, #284]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <HAL_RCC_OscConfig+0x17a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d001      	beq.n	800312e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e1e9      	b.n	8003502 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312e:	4b41      	ldr	r3, [pc, #260]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	493d      	ldr	r1, [pc, #244]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 800313e:	4313      	orrs	r3, r2
 8003140:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003142:	e040      	b.n	80031c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d023      	beq.n	8003194 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800314c:	4b39      	ldr	r3, [pc, #228]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a38      	ldr	r2, [pc, #224]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fd fc7e 	bl	8000a58 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003160:	f7fd fc7a 	bl	8000a58 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e1c7      	b.n	8003502 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003172:	4b30      	ldr	r3, [pc, #192]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317e:	4b2d      	ldr	r3, [pc, #180]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4929      	ldr	r1, [pc, #164]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]
 8003192:	e018      	b.n	80031c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003194:	4b27      	ldr	r3, [pc, #156]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a26      	ldr	r2, [pc, #152]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 800319a:	f023 0301 	bic.w	r3, r3, #1
 800319e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fd fc5a 	bl	8000a58 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a8:	f7fd fc56 	bl	8000a58 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e1a3      	b.n	8003502 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ba:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d038      	beq.n	8003244 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d019      	beq.n	800320e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031da:	4b16      	ldr	r3, [pc, #88]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 80031dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031de:	4a15      	ldr	r2, [pc, #84]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7fd fc37 	bl	8000a58 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ee:	f7fd fc33 	bl	8000a58 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e180      	b.n	8003502 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x23a>
 800320c:	e01a      	b.n	8003244 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003212:	4a08      	ldr	r2, [pc, #32]	; (8003234 <HAL_RCC_OscConfig+0x280>)
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321a:	f7fd fc1d 	bl	8000a58 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	e00a      	b.n	8003238 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003222:	f7fd fc19 	bl	8000a58 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d903      	bls.n	8003238 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e166      	b.n	8003502 <HAL_RCC_OscConfig+0x54e>
 8003234:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	4b92      	ldr	r3, [pc, #584]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 800323a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1ee      	bne.n	8003222 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80a4 	beq.w	800339a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003252:	4b8c      	ldr	r3, [pc, #560]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10d      	bne.n	800327a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800325e:	4b89      	ldr	r3, [pc, #548]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	4a88      	ldr	r2, [pc, #544]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 8003264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003268:	6413      	str	r3, [r2, #64]	; 0x40
 800326a:	4b86      	ldr	r3, [pc, #536]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003276:	2301      	movs	r3, #1
 8003278:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800327a:	4b83      	ldr	r3, [pc, #524]	; (8003488 <HAL_RCC_OscConfig+0x4d4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d118      	bne.n	80032b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003286:	4b80      	ldr	r3, [pc, #512]	; (8003488 <HAL_RCC_OscConfig+0x4d4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a7f      	ldr	r2, [pc, #508]	; (8003488 <HAL_RCC_OscConfig+0x4d4>)
 800328c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003292:	f7fd fbe1 	bl	8000a58 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329a:	f7fd fbdd 	bl	8000a58 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b64      	cmp	r3, #100	; 0x64
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e12a      	b.n	8003502 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ac:	4b76      	ldr	r3, [pc, #472]	; (8003488 <HAL_RCC_OscConfig+0x4d4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d106      	bne.n	80032ce <HAL_RCC_OscConfig+0x31a>
 80032c0:	4b70      	ldr	r3, [pc, #448]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 80032c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c4:	4a6f      	ldr	r2, [pc, #444]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	6713      	str	r3, [r2, #112]	; 0x70
 80032cc:	e02d      	b.n	800332a <HAL_RCC_OscConfig+0x376>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x33c>
 80032d6:	4b6b      	ldr	r3, [pc, #428]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	4a6a      	ldr	r2, [pc, #424]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 80032dc:	f023 0301 	bic.w	r3, r3, #1
 80032e0:	6713      	str	r3, [r2, #112]	; 0x70
 80032e2:	4b68      	ldr	r3, [pc, #416]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	4a67      	ldr	r2, [pc, #412]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 80032e8:	f023 0304 	bic.w	r3, r3, #4
 80032ec:	6713      	str	r3, [r2, #112]	; 0x70
 80032ee:	e01c      	b.n	800332a <HAL_RCC_OscConfig+0x376>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b05      	cmp	r3, #5
 80032f6:	d10c      	bne.n	8003312 <HAL_RCC_OscConfig+0x35e>
 80032f8:	4b62      	ldr	r3, [pc, #392]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	4a61      	ldr	r2, [pc, #388]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 80032fe:	f043 0304 	orr.w	r3, r3, #4
 8003302:	6713      	str	r3, [r2, #112]	; 0x70
 8003304:	4b5f      	ldr	r3, [pc, #380]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4a5e      	ldr	r2, [pc, #376]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6713      	str	r3, [r2, #112]	; 0x70
 8003310:	e00b      	b.n	800332a <HAL_RCC_OscConfig+0x376>
 8003312:	4b5c      	ldr	r3, [pc, #368]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	4a5b      	ldr	r2, [pc, #364]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	6713      	str	r3, [r2, #112]	; 0x70
 800331e:	4b59      	ldr	r3, [pc, #356]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	4a58      	ldr	r2, [pc, #352]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 8003324:	f023 0304 	bic.w	r3, r3, #4
 8003328:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d015      	beq.n	800335e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003332:	f7fd fb91 	bl	8000a58 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003338:	e00a      	b.n	8003350 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333a:	f7fd fb8d 	bl	8000a58 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f241 3288 	movw	r2, #5000	; 0x1388
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e0d8      	b.n	8003502 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003350:	4b4c      	ldr	r3, [pc, #304]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ee      	beq.n	800333a <HAL_RCC_OscConfig+0x386>
 800335c:	e014      	b.n	8003388 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335e:	f7fd fb7b 	bl	8000a58 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003364:	e00a      	b.n	800337c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003366:	f7fd fb77 	bl	8000a58 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f241 3288 	movw	r2, #5000	; 0x1388
 8003374:	4293      	cmp	r3, r2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e0c2      	b.n	8003502 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337c:	4b41      	ldr	r3, [pc, #260]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1ee      	bne.n	8003366 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d105      	bne.n	800339a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800338e:	4b3d      	ldr	r3, [pc, #244]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	4a3c      	ldr	r2, [pc, #240]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 8003394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003398:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80ae 	beq.w	8003500 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033a4:	4b37      	ldr	r3, [pc, #220]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d06d      	beq.n	800348c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d14b      	bne.n	8003450 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b8:	4b32      	ldr	r3, [pc, #200]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a31      	ldr	r2, [pc, #196]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 80033be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fd fb48 	bl	8000a58 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fd fb44 	bl	8000a58 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e091      	b.n	8003502 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033de:	4b29      	ldr	r3, [pc, #164]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	019b      	lsls	r3, r3, #6
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	3b01      	subs	r3, #1
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	061b      	lsls	r3, r3, #24
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	071b      	lsls	r3, r3, #28
 8003416:	491b      	ldr	r1, [pc, #108]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 8003418:	4313      	orrs	r3, r2
 800341a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800341c:	4b19      	ldr	r3, [pc, #100]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a18      	ldr	r2, [pc, #96]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 8003422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fd fb16 	bl	8000a58 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003430:	f7fd fb12 	bl	8000a58 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e05f      	b.n	8003502 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x47c>
 800344e:	e057      	b.n	8003500 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0b      	ldr	r2, [pc, #44]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 8003456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800345a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fd fafc 	bl	8000a58 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fd faf8 	bl	8000a58 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e045      	b.n	8003502 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	4b03      	ldr	r3, [pc, #12]	; (8003484 <HAL_RCC_OscConfig+0x4d0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x4b0>
 8003482:	e03d      	b.n	8003500 <HAL_RCC_OscConfig+0x54c>
 8003484:	40023800 	.word	0x40023800
 8003488:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800348c:	4b1f      	ldr	r3, [pc, #124]	; (800350c <HAL_RCC_OscConfig+0x558>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d030      	beq.n	80034fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d129      	bne.n	80034fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d122      	bne.n	80034fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034bc:	4013      	ands	r3, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d119      	bne.n	80034fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	085b      	lsrs	r3, r3, #1
 80034d4:	3b01      	subs	r3, #1
 80034d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d10f      	bne.n	80034fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d107      	bne.n	80034fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800

08003510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0d0      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003528:	4b6a      	ldr	r3, [pc, #424]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d910      	bls.n	8003558 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b67      	ldr	r3, [pc, #412]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 020f 	bic.w	r2, r3, #15
 800353e:	4965      	ldr	r1, [pc, #404]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003546:	4b63      	ldr	r3, [pc, #396]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d001      	beq.n	8003558 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0b8      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d020      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003570:	4b59      	ldr	r3, [pc, #356]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	4a58      	ldr	r2, [pc, #352]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003576:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800357a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003588:	4b53      	ldr	r3, [pc, #332]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	4a52      	ldr	r2, [pc, #328]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 800358e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003592:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003594:	4b50      	ldr	r3, [pc, #320]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	494d      	ldr	r1, [pc, #308]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d040      	beq.n	8003634 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ba:	4b47      	ldr	r3, [pc, #284]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d115      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e07f      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d107      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d2:	4b41      	ldr	r3, [pc, #260]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e073      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e2:	4b3d      	ldr	r3, [pc, #244]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e06b      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f2:	4b39      	ldr	r3, [pc, #228]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f023 0203 	bic.w	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4936      	ldr	r1, [pc, #216]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003600:	4313      	orrs	r3, r2
 8003602:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003604:	f7fd fa28 	bl	8000a58 <HAL_GetTick>
 8003608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	e00a      	b.n	8003622 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360c:	f7fd fa24 	bl	8000a58 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	; 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e053      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003622:	4b2d      	ldr	r3, [pc, #180]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 020c 	and.w	r2, r3, #12
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	429a      	cmp	r2, r3
 8003632:	d1eb      	bne.n	800360c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003634:	4b27      	ldr	r3, [pc, #156]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d210      	bcs.n	8003664 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003642:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 020f 	bic.w	r2, r3, #15
 800364a:	4922      	ldr	r1, [pc, #136]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e032      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003670:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4916      	ldr	r1, [pc, #88]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800368e:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	490e      	ldr	r1, [pc, #56]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036a2:	f000 f821 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 80036a6:	4601      	mov	r1, r0
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	4a0a      	ldr	r2, [pc, #40]	; (80036dc <HAL_RCC_ClockConfig+0x1cc>)
 80036b4:	5cd3      	ldrb	r3, [r2, r3]
 80036b6:	fa21 f303 	lsr.w	r3, r1, r3
 80036ba:	4a09      	ldr	r2, [pc, #36]	; (80036e0 <HAL_RCC_ClockConfig+0x1d0>)
 80036bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036be:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_RCC_ClockConfig+0x1d4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fd f984 	bl	80009d0 <HAL_InitTick>

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40023c00 	.word	0x40023c00
 80036d8:	40023800 	.word	0x40023800
 80036dc:	08006a10 	.word	0x08006a10
 80036e0:	20000008 	.word	0x20000008
 80036e4:	20000000 	.word	0x20000000

080036e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	2300      	movs	r3, #0
 80036f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036fe:	4b63      	ldr	r3, [pc, #396]	; (800388c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b04      	cmp	r3, #4
 8003708:	d007      	beq.n	800371a <HAL_RCC_GetSysClockFreq+0x32>
 800370a:	2b08      	cmp	r3, #8
 800370c:	d008      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0x38>
 800370e:	2b00      	cmp	r3, #0
 8003710:	f040 80b4 	bne.w	800387c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003714:	4b5e      	ldr	r3, [pc, #376]	; (8003890 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003716:	60bb      	str	r3, [r7, #8]
      break;
 8003718:	e0b3      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800371a:	4b5e      	ldr	r3, [pc, #376]	; (8003894 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800371c:	60bb      	str	r3, [r7, #8]
      break;
 800371e:	e0b0      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003720:	4b5a      	ldr	r3, [pc, #360]	; (800388c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003728:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800372a:	4b58      	ldr	r3, [pc, #352]	; (800388c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d04a      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003736:	4b55      	ldr	r3, [pc, #340]	; (800388c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	099b      	lsrs	r3, r3, #6
 800373c:	f04f 0400 	mov.w	r4, #0
 8003740:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	ea03 0501 	and.w	r5, r3, r1
 800374c:	ea04 0602 	and.w	r6, r4, r2
 8003750:	4629      	mov	r1, r5
 8003752:	4632      	mov	r2, r6
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	f04f 0400 	mov.w	r4, #0
 800375c:	0154      	lsls	r4, r2, #5
 800375e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003762:	014b      	lsls	r3, r1, #5
 8003764:	4619      	mov	r1, r3
 8003766:	4622      	mov	r2, r4
 8003768:	1b49      	subs	r1, r1, r5
 800376a:	eb62 0206 	sbc.w	r2, r2, r6
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	f04f 0400 	mov.w	r4, #0
 8003776:	0194      	lsls	r4, r2, #6
 8003778:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800377c:	018b      	lsls	r3, r1, #6
 800377e:	1a5b      	subs	r3, r3, r1
 8003780:	eb64 0402 	sbc.w	r4, r4, r2
 8003784:	f04f 0100 	mov.w	r1, #0
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	00e2      	lsls	r2, r4, #3
 800378e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003792:	00d9      	lsls	r1, r3, #3
 8003794:	460b      	mov	r3, r1
 8003796:	4614      	mov	r4, r2
 8003798:	195b      	adds	r3, r3, r5
 800379a:	eb44 0406 	adc.w	r4, r4, r6
 800379e:	f04f 0100 	mov.w	r1, #0
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	0262      	lsls	r2, r4, #9
 80037a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80037ac:	0259      	lsls	r1, r3, #9
 80037ae:	460b      	mov	r3, r1
 80037b0:	4614      	mov	r4, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	4621      	mov	r1, r4
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f04f 0400 	mov.w	r4, #0
 80037bc:	461a      	mov	r2, r3
 80037be:	4623      	mov	r3, r4
 80037c0:	f7fc fd3a 	bl	8000238 <__aeabi_uldivmod>
 80037c4:	4603      	mov	r3, r0
 80037c6:	460c      	mov	r4, r1
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	e049      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037cc:	4b2f      	ldr	r3, [pc, #188]	; (800388c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	099b      	lsrs	r3, r3, #6
 80037d2:	f04f 0400 	mov.w	r4, #0
 80037d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	ea03 0501 	and.w	r5, r3, r1
 80037e2:	ea04 0602 	and.w	r6, r4, r2
 80037e6:	4629      	mov	r1, r5
 80037e8:	4632      	mov	r2, r6
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	f04f 0400 	mov.w	r4, #0
 80037f2:	0154      	lsls	r4, r2, #5
 80037f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037f8:	014b      	lsls	r3, r1, #5
 80037fa:	4619      	mov	r1, r3
 80037fc:	4622      	mov	r2, r4
 80037fe:	1b49      	subs	r1, r1, r5
 8003800:	eb62 0206 	sbc.w	r2, r2, r6
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	f04f 0400 	mov.w	r4, #0
 800380c:	0194      	lsls	r4, r2, #6
 800380e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003812:	018b      	lsls	r3, r1, #6
 8003814:	1a5b      	subs	r3, r3, r1
 8003816:	eb64 0402 	sbc.w	r4, r4, r2
 800381a:	f04f 0100 	mov.w	r1, #0
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	00e2      	lsls	r2, r4, #3
 8003824:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003828:	00d9      	lsls	r1, r3, #3
 800382a:	460b      	mov	r3, r1
 800382c:	4614      	mov	r4, r2
 800382e:	195b      	adds	r3, r3, r5
 8003830:	eb44 0406 	adc.w	r4, r4, r6
 8003834:	f04f 0100 	mov.w	r1, #0
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	02a2      	lsls	r2, r4, #10
 800383e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003842:	0299      	lsls	r1, r3, #10
 8003844:	460b      	mov	r3, r1
 8003846:	4614      	mov	r4, r2
 8003848:	4618      	mov	r0, r3
 800384a:	4621      	mov	r1, r4
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f04f 0400 	mov.w	r4, #0
 8003852:	461a      	mov	r2, r3
 8003854:	4623      	mov	r3, r4
 8003856:	f7fc fcef 	bl	8000238 <__aeabi_uldivmod>
 800385a:	4603      	mov	r3, r0
 800385c:	460c      	mov	r4, r1
 800385e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003860:	4b0a      	ldr	r3, [pc, #40]	; (800388c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	0c1b      	lsrs	r3, r3, #16
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	3301      	adds	r3, #1
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	fbb2 f3f3 	udiv	r3, r2, r3
 8003878:	60bb      	str	r3, [r7, #8]
      break;
 800387a:	e002      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800387c:	4b04      	ldr	r3, [pc, #16]	; (8003890 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800387e:	60bb      	str	r3, [r7, #8]
      break;
 8003880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003882:	68bb      	ldr	r3, [r7, #8]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800388c:	40023800 	.word	0x40023800
 8003890:	00f42400 	.word	0x00f42400
 8003894:	007a1200 	.word	0x007a1200

08003898 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <HAL_RCC_GetHCLKFreq+0x14>)
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000008 	.word	0x20000008

080038b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038b4:	f7ff fff0 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038b8:	4601      	mov	r1, r0
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	0a9b      	lsrs	r3, r3, #10
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	4a03      	ldr	r2, [pc, #12]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c6:	5cd3      	ldrb	r3, [r2, r3]
 80038c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40023800 	.word	0x40023800
 80038d4:	08006a20 	.word	0x08006a20

080038d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038dc:	f7ff ffdc 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038e0:	4601      	mov	r1, r0
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	0b5b      	lsrs	r3, r3, #13
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	4a03      	ldr	r2, [pc, #12]	; (80038fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ee:	5cd3      	ldrb	r3, [r2, r3]
 80038f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40023800 	.word	0x40023800
 80038fc:	08006a20 	.word	0x08006a20

08003900 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003914:	2300      	movs	r3, #0
 8003916:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d012      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003928:	4b69      	ldr	r3, [pc, #420]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4a68      	ldr	r2, [pc, #416]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003932:	6093      	str	r3, [r2, #8]
 8003934:	4b66      	ldr	r3, [pc, #408]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393c:	4964      	ldr	r1, [pc, #400]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393e:	4313      	orrs	r3, r2
 8003940:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800394a:	2301      	movs	r3, #1
 800394c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d017      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800395a:	4b5d      	ldr	r3, [pc, #372]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003960:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003968:	4959      	ldr	r1, [pc, #356]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003974:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003978:	d101      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800397a:	2301      	movs	r3, #1
 800397c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003986:	2301      	movs	r3, #1
 8003988:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d017      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003996:	4b4e      	ldr	r3, [pc, #312]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800399c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	494a      	ldr	r1, [pc, #296]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b4:	d101      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80039b6:	2301      	movs	r3, #1
 80039b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80039c2:	2301      	movs	r3, #1
 80039c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80039d2:	2301      	movs	r3, #1
 80039d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 808b 	beq.w	8003afa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039e4:	4b3a      	ldr	r3, [pc, #232]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	4a39      	ldr	r2, [pc, #228]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ee:	6413      	str	r3, [r2, #64]	; 0x40
 80039f0:	4b37      	ldr	r3, [pc, #220]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039fc:	4b35      	ldr	r3, [pc, #212]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a34      	ldr	r2, [pc, #208]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a08:	f7fd f826 	bl	8000a58 <HAL_GetTick>
 8003a0c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a10:	f7fd f822 	bl	8000a58 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	; 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e38d      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a22:	4b2c      	ldr	r3, [pc, #176]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a2e:	4b28      	ldr	r3, [pc, #160]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a36:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d035      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d02e      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a4c:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a54:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a56:	4b1e      	ldr	r3, [pc, #120]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	4a1d      	ldr	r2, [pc, #116]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a60:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a62:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	4a1a      	ldr	r2, [pc, #104]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a6e:	4a18      	ldr	r2, [pc, #96]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a74:	4b16      	ldr	r3, [pc, #88]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d114      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a80:	f7fc ffea 	bl	8000a58 <HAL_GetTick>
 8003a84:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a86:	e00a      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a88:	f7fc ffe6 	bl	8000a58 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e34f      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0ee      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ab6:	d111      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ac4:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ac6:	400b      	ands	r3, r1
 8003ac8:	4901      	ldr	r1, [pc, #4]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
 8003ace:	e00b      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40007000 	.word	0x40007000
 8003ad8:	0ffffcff 	.word	0x0ffffcff
 8003adc:	4bb3      	ldr	r3, [pc, #716]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4ab2      	ldr	r2, [pc, #712]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ae2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ae6:	6093      	str	r3, [r2, #8]
 8003ae8:	4bb0      	ldr	r3, [pc, #704]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af4:	49ad      	ldr	r1, [pc, #692]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d010      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b06:	4ba9      	ldr	r3, [pc, #676]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b0c:	4aa7      	ldr	r2, [pc, #668]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b16:	4ba5      	ldr	r3, [pc, #660]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b18:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	49a2      	ldr	r1, [pc, #648]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b34:	4b9d      	ldr	r3, [pc, #628]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b42:	499a      	ldr	r1, [pc, #616]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b56:	4b95      	ldr	r3, [pc, #596]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b64:	4991      	ldr	r1, [pc, #580]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b78:	4b8c      	ldr	r3, [pc, #560]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b86:	4989      	ldr	r1, [pc, #548]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b9a:	4b84      	ldr	r3, [pc, #528]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	4980      	ldr	r1, [pc, #512]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bbc:	4b7b      	ldr	r3, [pc, #492]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc2:	f023 0203 	bic.w	r2, r3, #3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	4978      	ldr	r1, [pc, #480]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bde:	4b73      	ldr	r3, [pc, #460]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be4:	f023 020c 	bic.w	r2, r3, #12
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bec:	496f      	ldr	r1, [pc, #444]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c00:	4b6a      	ldr	r3, [pc, #424]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0e:	4967      	ldr	r1, [pc, #412]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c22:	4b62      	ldr	r3, [pc, #392]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c28:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c30:	495e      	ldr	r1, [pc, #376]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c44:	4b59      	ldr	r3, [pc, #356]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	4956      	ldr	r1, [pc, #344]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c66:	4b51      	ldr	r3, [pc, #324]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	494d      	ldr	r1, [pc, #308]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c88:	4b48      	ldr	r3, [pc, #288]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c96:	4945      	ldr	r1, [pc, #276]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003caa:	4b40      	ldr	r3, [pc, #256]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb8:	493c      	ldr	r1, [pc, #240]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ccc:	4b37      	ldr	r3, [pc, #220]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cda:	4934      	ldr	r1, [pc, #208]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d011      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003cee:	4b2f      	ldr	r3, [pc, #188]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cfc:	492b      	ldr	r1, [pc, #172]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d0c:	d101      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d2e:	4b1f      	ldr	r3, [pc, #124]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d34:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3c:	491b      	ldr	r1, [pc, #108]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00b      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d50:	4b16      	ldr	r3, [pc, #88]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d60:	4912      	ldr	r1, [pc, #72]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00b      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003d74:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d84:	4909      	ldr	r1, [pc, #36]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00f      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da8:	e002      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003daa:	bf00      	nop
 8003dac:	40023800 	.word	0x40023800
 8003db0:	4985      	ldr	r1, [pc, #532]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00b      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003dc4:	4b80      	ldr	r3, [pc, #512]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dd4:	497c      	ldr	r1, [pc, #496]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d005      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dea:	f040 80d6 	bne.w	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003dee:	4b76      	ldr	r3, [pc, #472]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a75      	ldr	r2, [pc, #468]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003df4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003df8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfa:	f7fc fe2d 	bl	8000a58 <HAL_GetTick>
 8003dfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e02:	f7fc fe29 	bl	8000a58 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b64      	cmp	r3, #100	; 0x64
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e194      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e14:	4b6c      	ldr	r3, [pc, #432]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f0      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d021      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d11d      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e34:	4b64      	ldr	r3, [pc, #400]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e3a:	0c1b      	lsrs	r3, r3, #16
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e42:	4b61      	ldr	r3, [pc, #388]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e48:	0e1b      	lsrs	r3, r3, #24
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	019a      	lsls	r2, r3, #6
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	041b      	lsls	r3, r3, #16
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	061b      	lsls	r3, r3, #24
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	071b      	lsls	r3, r3, #28
 8003e68:	4957      	ldr	r1, [pc, #348]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d004      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e84:	d00a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d02e      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e9a:	d129      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e9c:	4b4a      	ldr	r3, [pc, #296]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ea2:	0c1b      	lsrs	r3, r3, #16
 8003ea4:	f003 0303 	and.w	r3, r3, #3
 8003ea8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003eaa:	4b47      	ldr	r3, [pc, #284]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eb0:	0f1b      	lsrs	r3, r3, #28
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	019a      	lsls	r2, r3, #6
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	041b      	lsls	r3, r3, #16
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	061b      	lsls	r3, r3, #24
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	071b      	lsls	r3, r3, #28
 8003ed0:	493d      	ldr	r1, [pc, #244]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ed8:	4b3b      	ldr	r3, [pc, #236]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ede:	f023 021f 	bic.w	r2, r3, #31
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	4937      	ldr	r1, [pc, #220]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d01d      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003efc:	4b32      	ldr	r3, [pc, #200]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f02:	0e1b      	lsrs	r3, r3, #24
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f0a:	4b2f      	ldr	r3, [pc, #188]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f10:	0f1b      	lsrs	r3, r3, #28
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	019a      	lsls	r2, r3, #6
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	041b      	lsls	r3, r3, #16
 8003f24:	431a      	orrs	r2, r3
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	061b      	lsls	r3, r3, #24
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	071b      	lsls	r3, r3, #28
 8003f30:	4925      	ldr	r1, [pc, #148]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d011      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	019a      	lsls	r2, r3, #6
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	041b      	lsls	r3, r3, #16
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	061b      	lsls	r3, r3, #24
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	071b      	lsls	r3, r3, #28
 8003f60:	4919      	ldr	r1, [pc, #100]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f68:	4b17      	ldr	r3, [pc, #92]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a16      	ldr	r2, [pc, #88]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f74:	f7fc fd70 	bl	8000a58 <HAL_GetTick>
 8003f78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f7c:	f7fc fd6c 	bl	8000a58 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b64      	cmp	r3, #100	; 0x64
 8003f88:	d901      	bls.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e0d7      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f8e:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	f040 80cd 	bne.w	800413c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003fa2:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a08      	ldr	r2, [pc, #32]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fae:	f7fc fd53 	bl	8000a58 <HAL_GetTick>
 8003fb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fb4:	e00a      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fb6:	f7fc fd4f 	bl	8000a58 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b64      	cmp	r3, #100	; 0x64
 8003fc2:	d903      	bls.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e0ba      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003fc8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fcc:	4b5e      	ldr	r3, [pc, #376]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fd8:	d0ed      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d02e      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d12a      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004002:	4b51      	ldr	r3, [pc, #324]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004008:	0c1b      	lsrs	r3, r3, #16
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004010:	4b4d      	ldr	r3, [pc, #308]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004016:	0f1b      	lsrs	r3, r3, #28
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	019a      	lsls	r2, r3, #6
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	041b      	lsls	r3, r3, #16
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	061b      	lsls	r3, r3, #24
 8004030:	431a      	orrs	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	071b      	lsls	r3, r3, #28
 8004036:	4944      	ldr	r1, [pc, #272]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800403e:	4b42      	ldr	r3, [pc, #264]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004044:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	3b01      	subs	r3, #1
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	493d      	ldr	r1, [pc, #244]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d022      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004068:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800406c:	d11d      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800406e:	4b36      	ldr	r3, [pc, #216]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	0e1b      	lsrs	r3, r3, #24
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800407c:	4b32      	ldr	r3, [pc, #200]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	0f1b      	lsrs	r3, r3, #28
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	019a      	lsls	r2, r3, #6
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	041b      	lsls	r3, r3, #16
 8004096:	431a      	orrs	r2, r3
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	061b      	lsls	r3, r3, #24
 800409c:	431a      	orrs	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	071b      	lsls	r3, r3, #28
 80040a2:	4929      	ldr	r1, [pc, #164]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d028      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040b6:	4b24      	ldr	r3, [pc, #144]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040bc:	0e1b      	lsrs	r3, r3, #24
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040c4:	4b20      	ldr	r3, [pc, #128]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ca:	0c1b      	lsrs	r3, r3, #16
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	019a      	lsls	r2, r3, #6
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	041b      	lsls	r3, r3, #16
 80040dc:	431a      	orrs	r2, r3
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	061b      	lsls	r3, r3, #24
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	071b      	lsls	r3, r3, #28
 80040ea:	4917      	ldr	r1, [pc, #92]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80040f2:	4b15      	ldr	r3, [pc, #84]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	4911      	ldr	r1, [pc, #68]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004108:	4b0f      	ldr	r3, [pc, #60]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a0e      	ldr	r2, [pc, #56]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800410e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004112:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004114:	f7fc fca0 	bl	8000a58 <HAL_GetTick>
 8004118:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800411a:	e008      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800411c:	f7fc fc9c 	bl	8000a58 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b64      	cmp	r3, #100	; 0x64
 8004128:	d901      	bls.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e007      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800412e:	4b06      	ldr	r3, [pc, #24]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800413a:	d1ef      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3720      	adds	r7, #32
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40023800 	.word	0x40023800

0800414c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e01d      	b.n	800419a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f002 fa30 	bl	80065d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3304      	adds	r3, #4
 8004188:	4619      	mov	r1, r3
 800418a:	4610      	mov	r0, r2
 800418c:	f000 fa40 	bl	8004610 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <HAL_TIM_Base_Start_IT+0x50>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b06      	cmp	r3, #6
 80041cc:	d00b      	beq.n	80041e6 <HAL_TIM_Base_Start_IT+0x42>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d4:	d007      	beq.n	80041e6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f042 0201 	orr.w	r2, r2, #1
 80041e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	00010007 	.word	0x00010007

080041f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b02      	cmp	r3, #2
 800420c:	d122      	bne.n	8004254 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b02      	cmp	r3, #2
 800421a:	d11b      	bne.n	8004254 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0202 	mvn.w	r2, #2
 8004224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f9ca 	bl	80045d4 <HAL_TIM_IC_CaptureCallback>
 8004240:	e005      	b.n	800424e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f9bc 	bl	80045c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f9cd 	bl	80045e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b04      	cmp	r3, #4
 8004260:	d122      	bne.n	80042a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b04      	cmp	r3, #4
 800426e:	d11b      	bne.n	80042a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0204 	mvn.w	r2, #4
 8004278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f9a0 	bl	80045d4 <HAL_TIM_IC_CaptureCallback>
 8004294:	e005      	b.n	80042a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f992 	bl	80045c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f9a3 	bl	80045e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d122      	bne.n	80042fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d11b      	bne.n	80042fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f06f 0208 	mvn.w	r2, #8
 80042cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2204      	movs	r2, #4
 80042d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f976 	bl	80045d4 <HAL_TIM_IC_CaptureCallback>
 80042e8:	e005      	b.n	80042f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f968 	bl	80045c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f979 	bl	80045e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0310 	and.w	r3, r3, #16
 8004306:	2b10      	cmp	r3, #16
 8004308:	d122      	bne.n	8004350 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b10      	cmp	r3, #16
 8004316:	d11b      	bne.n	8004350 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0210 	mvn.w	r2, #16
 8004320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2208      	movs	r2, #8
 8004326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f94c 	bl	80045d4 <HAL_TIM_IC_CaptureCallback>
 800433c:	e005      	b.n	800434a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f93e 	bl	80045c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f94f 	bl	80045e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b01      	cmp	r3, #1
 800435c:	d10e      	bne.n	800437c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b01      	cmp	r3, #1
 800436a:	d107      	bne.n	800437c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0201 	mvn.w	r2, #1
 8004374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f918 	bl	80045ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004386:	2b80      	cmp	r3, #128	; 0x80
 8004388:	d10e      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004394:	2b80      	cmp	r3, #128	; 0x80
 8004396:	d107      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fb06 	bl	80049b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b6:	d10e      	bne.n	80043d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c2:	2b80      	cmp	r3, #128	; 0x80
 80043c4:	d107      	bne.n	80043d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 faf9 	bl	80049c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d10e      	bne.n	8004402 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	d107      	bne.n	8004402 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f8fd 	bl	80045fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b20      	cmp	r3, #32
 800440e:	d10e      	bne.n	800442e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b20      	cmp	r3, #32
 800441c:	d107      	bne.n	800442e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f06f 0220 	mvn.w	r2, #32
 8004426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fab9 	bl	80049a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_TIM_ConfigClockSource+0x18>
 800444c:	2302      	movs	r3, #2
 800444e:	e0a6      	b.n	800459e <HAL_TIM_ConfigClockSource+0x166>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4b4f      	ldr	r3, [pc, #316]	; (80045a8 <HAL_TIM_ConfigClockSource+0x170>)
 800446c:	4013      	ands	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004476:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b40      	cmp	r3, #64	; 0x40
 8004486:	d067      	beq.n	8004558 <HAL_TIM_ConfigClockSource+0x120>
 8004488:	2b40      	cmp	r3, #64	; 0x40
 800448a:	d80b      	bhi.n	80044a4 <HAL_TIM_ConfigClockSource+0x6c>
 800448c:	2b10      	cmp	r3, #16
 800448e:	d073      	beq.n	8004578 <HAL_TIM_ConfigClockSource+0x140>
 8004490:	2b10      	cmp	r3, #16
 8004492:	d802      	bhi.n	800449a <HAL_TIM_ConfigClockSource+0x62>
 8004494:	2b00      	cmp	r3, #0
 8004496:	d06f      	beq.n	8004578 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004498:	e078      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800449a:	2b20      	cmp	r3, #32
 800449c:	d06c      	beq.n	8004578 <HAL_TIM_ConfigClockSource+0x140>
 800449e:	2b30      	cmp	r3, #48	; 0x30
 80044a0:	d06a      	beq.n	8004578 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80044a2:	e073      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044a4:	2b70      	cmp	r3, #112	; 0x70
 80044a6:	d00d      	beq.n	80044c4 <HAL_TIM_ConfigClockSource+0x8c>
 80044a8:	2b70      	cmp	r3, #112	; 0x70
 80044aa:	d804      	bhi.n	80044b6 <HAL_TIM_ConfigClockSource+0x7e>
 80044ac:	2b50      	cmp	r3, #80	; 0x50
 80044ae:	d033      	beq.n	8004518 <HAL_TIM_ConfigClockSource+0xe0>
 80044b0:	2b60      	cmp	r3, #96	; 0x60
 80044b2:	d041      	beq.n	8004538 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80044b4:	e06a      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ba:	d066      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x152>
 80044bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c0:	d017      	beq.n	80044f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80044c2:	e063      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	6899      	ldr	r1, [r3, #8]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f000 f9b6 	bl	8004844 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	609a      	str	r2, [r3, #8]
      break;
 80044f0:	e04c      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	6899      	ldr	r1, [r3, #8]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f000 f99f 	bl	8004844 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004514:	609a      	str	r2, [r3, #8]
      break;
 8004516:	e039      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6818      	ldr	r0, [r3, #0]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	6859      	ldr	r1, [r3, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	461a      	mov	r2, r3
 8004526:	f000 f913 	bl	8004750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2150      	movs	r1, #80	; 0x50
 8004530:	4618      	mov	r0, r3
 8004532:	f000 f96c 	bl	800480e <TIM_ITRx_SetConfig>
      break;
 8004536:	e029      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	6859      	ldr	r1, [r3, #4]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	461a      	mov	r2, r3
 8004546:	f000 f932 	bl	80047ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2160      	movs	r1, #96	; 0x60
 8004550:	4618      	mov	r0, r3
 8004552:	f000 f95c 	bl	800480e <TIM_ITRx_SetConfig>
      break;
 8004556:	e019      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6818      	ldr	r0, [r3, #0]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	6859      	ldr	r1, [r3, #4]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	461a      	mov	r2, r3
 8004566:	f000 f8f3 	bl	8004750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2140      	movs	r1, #64	; 0x40
 8004570:	4618      	mov	r0, r3
 8004572:	f000 f94c 	bl	800480e <TIM_ITRx_SetConfig>
      break;
 8004576:	e009      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f000 f943 	bl	800480e <TIM_ITRx_SetConfig>
      break;
 8004588:	e000      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800458a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	fffeff88 	.word	0xfffeff88

080045ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a40      	ldr	r2, [pc, #256]	; (8004724 <TIM_Base_SetConfig+0x114>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d013      	beq.n	8004650 <TIM_Base_SetConfig+0x40>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800462e:	d00f      	beq.n	8004650 <TIM_Base_SetConfig+0x40>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a3d      	ldr	r2, [pc, #244]	; (8004728 <TIM_Base_SetConfig+0x118>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00b      	beq.n	8004650 <TIM_Base_SetConfig+0x40>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a3c      	ldr	r2, [pc, #240]	; (800472c <TIM_Base_SetConfig+0x11c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d007      	beq.n	8004650 <TIM_Base_SetConfig+0x40>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a3b      	ldr	r2, [pc, #236]	; (8004730 <TIM_Base_SetConfig+0x120>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <TIM_Base_SetConfig+0x40>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a3a      	ldr	r2, [pc, #232]	; (8004734 <TIM_Base_SetConfig+0x124>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d108      	bne.n	8004662 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a2f      	ldr	r2, [pc, #188]	; (8004724 <TIM_Base_SetConfig+0x114>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d02b      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004670:	d027      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a2c      	ldr	r2, [pc, #176]	; (8004728 <TIM_Base_SetConfig+0x118>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d023      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a2b      	ldr	r2, [pc, #172]	; (800472c <TIM_Base_SetConfig+0x11c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d01f      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a2a      	ldr	r2, [pc, #168]	; (8004730 <TIM_Base_SetConfig+0x120>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01b      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a29      	ldr	r2, [pc, #164]	; (8004734 <TIM_Base_SetConfig+0x124>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d017      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a28      	ldr	r2, [pc, #160]	; (8004738 <TIM_Base_SetConfig+0x128>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a27      	ldr	r2, [pc, #156]	; (800473c <TIM_Base_SetConfig+0x12c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00f      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a26      	ldr	r2, [pc, #152]	; (8004740 <TIM_Base_SetConfig+0x130>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00b      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a25      	ldr	r2, [pc, #148]	; (8004744 <TIM_Base_SetConfig+0x134>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d007      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a24      	ldr	r2, [pc, #144]	; (8004748 <TIM_Base_SetConfig+0x138>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d003      	beq.n	80046c2 <TIM_Base_SetConfig+0xb2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a23      	ldr	r2, [pc, #140]	; (800474c <TIM_Base_SetConfig+0x13c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d108      	bne.n	80046d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a0a      	ldr	r2, [pc, #40]	; (8004724 <TIM_Base_SetConfig+0x114>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d003      	beq.n	8004708 <TIM_Base_SetConfig+0xf8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a0c      	ldr	r2, [pc, #48]	; (8004734 <TIM_Base_SetConfig+0x124>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d103      	bne.n	8004710 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	615a      	str	r2, [r3, #20]
}
 8004716:	bf00      	nop
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40010000 	.word	0x40010000
 8004728:	40000400 	.word	0x40000400
 800472c:	40000800 	.word	0x40000800
 8004730:	40000c00 	.word	0x40000c00
 8004734:	40010400 	.word	0x40010400
 8004738:	40014000 	.word	0x40014000
 800473c:	40014400 	.word	0x40014400
 8004740:	40014800 	.word	0x40014800
 8004744:	40001800 	.word	0x40001800
 8004748:	40001c00 	.word	0x40001c00
 800474c:	40002000 	.word	0x40002000

08004750 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	f023 0201 	bic.w	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800477a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	4313      	orrs	r3, r2
 8004784:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f023 030a 	bic.w	r3, r3, #10
 800478c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	621a      	str	r2, [r3, #32]
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b087      	sub	sp, #28
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	f023 0210 	bic.w	r2, r3, #16
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	031b      	lsls	r3, r3, #12
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	621a      	str	r2, [r3, #32]
}
 8004802:	bf00      	nop
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800480e:	b480      	push	{r7}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004824:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	f043 0307 	orr.w	r3, r3, #7
 8004830:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	609a      	str	r2, [r3, #8]
}
 8004838:	bf00      	nop
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800485e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	021a      	lsls	r2, r3, #8
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	431a      	orrs	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4313      	orrs	r3, r2
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	609a      	str	r2, [r3, #8]
}
 8004878:	bf00      	nop
 800487a:	371c      	adds	r7, #28
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004898:	2302      	movs	r3, #2
 800489a:	e06d      	b.n	8004978 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a30      	ldr	r2, [pc, #192]	; (8004984 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d004      	beq.n	80048d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a2f      	ldr	r2, [pc, #188]	; (8004988 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d108      	bne.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a20      	ldr	r2, [pc, #128]	; (8004984 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d022      	beq.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490e:	d01d      	beq.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a1d      	ldr	r2, [pc, #116]	; (800498c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d018      	beq.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1c      	ldr	r2, [pc, #112]	; (8004990 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d013      	beq.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a1a      	ldr	r2, [pc, #104]	; (8004994 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00e      	beq.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a15      	ldr	r2, [pc, #84]	; (8004988 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d009      	beq.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a16      	ldr	r2, [pc, #88]	; (8004998 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d004      	beq.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a15      	ldr	r2, [pc, #84]	; (800499c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d10c      	bne.n	8004966 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004952:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	4313      	orrs	r3, r2
 800495c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	40010000 	.word	0x40010000
 8004988:	40010400 	.word	0x40010400
 800498c:	40000400 	.word	0x40000400
 8004990:	40000800 	.word	0x40000800
 8004994:	40000c00 	.word	0x40000c00
 8004998:	40014000 	.word	0x40014000
 800499c:	40001800 	.word	0x40001800

080049a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e040      	b.n	8004a70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f001 fe0e 	bl	8006620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2224      	movs	r2, #36	; 0x24
 8004a08:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0201 	bic.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 faae 	bl	8004f7c <UART_SetConfig>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e022      	b.n	8004a70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fd4c 	bl	80054d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fdd3 	bl	8005614 <UART_CheckIdleState>
 8004a6e:	4603      	mov	r3, r0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	4613      	mov	r3, r2
 8004a84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d164      	bne.n	8004b58 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <HAL_UART_Transmit_DMA+0x22>
 8004a94:	88fb      	ldrh	r3, [r7, #6]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e05d      	b.n	8004b5a <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_UART_Transmit_DMA+0x34>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e056      	b.n	8004b5a <HAL_UART_Transmit_DMA+0xe2>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	88fa      	ldrh	r2, [r7, #6]
 8004abe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	88fa      	ldrh	r2, [r7, #6]
 8004ac6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2221      	movs	r2, #33	; 0x21
 8004ad4:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d02a      	beq.n	8004b34 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ae2:	4a20      	ldr	r2, [pc, #128]	; (8004b64 <HAL_UART_Transmit_DMA+0xec>)
 8004ae4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aea:	4a1f      	ldr	r2, [pc, #124]	; (8004b68 <HAL_UART_Transmit_DMA+0xf0>)
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004af2:	4a1e      	ldr	r2, [pc, #120]	; (8004b6c <HAL_UART_Transmit_DMA+0xf4>)
 8004af4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004afa:	2200      	movs	r2, #0
 8004afc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b06:	4619      	mov	r1, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3328      	adds	r3, #40	; 0x28
 8004b0e:	461a      	mov	r2, r3
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	f7fd fd6f 	bl	80025f4 <HAL_DMA_Start_IT>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00b      	beq.n	8004b34 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2210      	movs	r2, #16
 8004b20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e012      	b.n	8004b5a <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2240      	movs	r2, #64	; 0x40
 8004b3a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b52:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004b54:	2300      	movs	r3, #0
 8004b56:	e000      	b.n	8004b5a <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8004b58:	2302      	movs	r3, #2
  }
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	080057ff 	.word	0x080057ff
 8004b68:	0800584f 	.word	0x0800584f
 8004b6c:	080058eb 	.word	0x080058eb

08004b70 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	d16c      	bne.n	8004c60 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <HAL_UART_Receive_DMA+0x22>
 8004b8c:	88fb      	ldrh	r3, [r7, #6]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e065      	b.n	8004c62 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_UART_Receive_DMA+0x34>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e05e      	b.n	8004c62 <HAL_UART_Receive_DMA+0xf2>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	88fa      	ldrh	r2, [r7, #6]
 8004bb6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2222      	movs	r2, #34	; 0x22
 8004bc4:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d02a      	beq.n	8004c24 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bd2:	4a26      	ldr	r2, [pc, #152]	; (8004c6c <HAL_UART_Receive_DMA+0xfc>)
 8004bd4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bda:	4a25      	ldr	r2, [pc, #148]	; (8004c70 <HAL_UART_Receive_DMA+0x100>)
 8004bdc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004be2:	4a24      	ldr	r2, [pc, #144]	; (8004c74 <HAL_UART_Receive_DMA+0x104>)
 8004be4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bea:	2200      	movs	r2, #0
 8004bec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3324      	adds	r3, #36	; 0x24
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfe:	461a      	mov	r2, r3
 8004c00:	88fb      	ldrh	r3, [r7, #6]
 8004c02:	f7fd fcf7 	bl	80025f4 <HAL_DMA_Start_IT>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00b      	beq.n	8004c24 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2210      	movs	r2, #16
 8004c10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e01e      	b.n	8004c62 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c3a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c5a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e000      	b.n	8004c62 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8004c60:	2302      	movs	r3, #2
  }
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	0800586b 	.word	0x0800586b
 8004c70:	080058cf 	.word	0x080058cf
 8004c74:	080058eb 	.word	0x080058eb

08004c78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c98:	69fa      	ldr	r2, [r7, #28]
 8004c9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d113      	bne.n	8004cd0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00e      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d009      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 8114 	beq.w	8004eee <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	4798      	blx	r3
      }
      return;
 8004cce:	e10e      	b.n	8004eee <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 80d6 	beq.w	8004e84 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d105      	bne.n	8004cee <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80cb 	beq.w	8004e84 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00e      	beq.n	8004d16 <HAL_UART_IRQHandler+0x9e>
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d009      	beq.n	8004d16 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2201      	movs	r2, #1
 8004d08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d0e:	f043 0201 	orr.w	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00e      	beq.n	8004d3e <HAL_UART_IRQHandler+0xc6>
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d009      	beq.n	8004d3e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d36:	f043 0204 	orr.w	r2, r3, #4
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00e      	beq.n	8004d66 <HAL_UART_IRQHandler+0xee>
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d009      	beq.n	8004d66 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2204      	movs	r2, #4
 8004d58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d5e:	f043 0202 	orr.w	r2, r3, #2
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d013      	beq.n	8004d98 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d104      	bne.n	8004d84 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d009      	beq.n	8004d98 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2208      	movs	r2, #8
 8004d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d90:	f043 0208 	orr.w	r2, r3, #8
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00f      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x14a>
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004db4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dba:	f043 0220 	orr.w	r2, r3, #32
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 8093 	beq.w	8004ef2 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00c      	beq.n	8004df0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004df4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e00:	2b40      	cmp	r3, #64	; 0x40
 8004e02:	d004      	beq.n	8004e0e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d031      	beq.n	8004e72 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fcd5 	bl	80057be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1e:	2b40      	cmp	r3, #64	; 0x40
 8004e20:	d123      	bne.n	8004e6a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e30:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d013      	beq.n	8004e62 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e3e:	4a30      	ldr	r2, [pc, #192]	; (8004f00 <HAL_UART_IRQHandler+0x288>)
 8004e40:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fd fc34 	bl	80026b4 <HAL_DMA_Abort_IT>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d016      	beq.n	8004e80 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e60:	e00e      	b.n	8004e80 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f876 	bl	8004f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e68:	e00a      	b.n	8004e80 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f872 	bl	8004f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e70:	e006      	b.n	8004e80 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f86e 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004e7e:	e038      	b.n	8004ef2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e80:	bf00      	nop
    return;
 8004e82:	e036      	b.n	8004ef2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00d      	beq.n	8004eaa <HAL_UART_IRQHandler+0x232>
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ea0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f860 	bl	8004f68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ea8:	e026      	b.n	8004ef8 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00d      	beq.n	8004ed0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d008      	beq.n	8004ed0 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d017      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	4798      	blx	r3
    }
    return;
 8004ece:	e012      	b.n	8004ef6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00e      	beq.n	8004ef8 <HAL_UART_IRQHandler+0x280>
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d009      	beq.n	8004ef8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fd52 	bl	800598e <UART_EndTransmit_IT>
    return;
 8004eea:	bf00      	nop
 8004eec:	e004      	b.n	8004ef8 <HAL_UART_IRQHandler+0x280>
      return;
 8004eee:	bf00      	nop
 8004ef0:	e002      	b.n	8004ef8 <HAL_UART_IRQHandler+0x280>
    return;
 8004ef2:	bf00      	nop
 8004ef4:	e000      	b.n	8004ef8 <HAL_UART_IRQHandler+0x280>
    return;
 8004ef6:	bf00      	nop
  }

}
 8004ef8:	3720      	adds	r7, #32
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	08005963 	.word	0x08005963

08004f04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4bb1      	ldr	r3, [pc, #708]	; (8005270 <UART_SetConfig+0x2f4>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	6939      	ldr	r1, [r7, #16]
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a9f      	ldr	r2, [pc, #636]	; (8005274 <UART_SetConfig+0x2f8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d121      	bne.n	8005040 <UART_SetConfig+0xc4>
 8004ffc:	4b9e      	ldr	r3, [pc, #632]	; (8005278 <UART_SetConfig+0x2fc>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	2b03      	cmp	r3, #3
 8005008:	d816      	bhi.n	8005038 <UART_SetConfig+0xbc>
 800500a:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <UART_SetConfig+0x94>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	08005021 	.word	0x08005021
 8005014:	0800502d 	.word	0x0800502d
 8005018:	08005027 	.word	0x08005027
 800501c:	08005033 	.word	0x08005033
 8005020:	2301      	movs	r3, #1
 8005022:	77fb      	strb	r3, [r7, #31]
 8005024:	e151      	b.n	80052ca <UART_SetConfig+0x34e>
 8005026:	2302      	movs	r3, #2
 8005028:	77fb      	strb	r3, [r7, #31]
 800502a:	e14e      	b.n	80052ca <UART_SetConfig+0x34e>
 800502c:	2304      	movs	r3, #4
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e14b      	b.n	80052ca <UART_SetConfig+0x34e>
 8005032:	2308      	movs	r3, #8
 8005034:	77fb      	strb	r3, [r7, #31]
 8005036:	e148      	b.n	80052ca <UART_SetConfig+0x34e>
 8005038:	2310      	movs	r3, #16
 800503a:	77fb      	strb	r3, [r7, #31]
 800503c:	bf00      	nop
 800503e:	e144      	b.n	80052ca <UART_SetConfig+0x34e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a8d      	ldr	r2, [pc, #564]	; (800527c <UART_SetConfig+0x300>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d134      	bne.n	80050b4 <UART_SetConfig+0x138>
 800504a:	4b8b      	ldr	r3, [pc, #556]	; (8005278 <UART_SetConfig+0x2fc>)
 800504c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005050:	f003 030c 	and.w	r3, r3, #12
 8005054:	2b0c      	cmp	r3, #12
 8005056:	d829      	bhi.n	80050ac <UART_SetConfig+0x130>
 8005058:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <UART_SetConfig+0xe4>)
 800505a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505e:	bf00      	nop
 8005060:	08005095 	.word	0x08005095
 8005064:	080050ad 	.word	0x080050ad
 8005068:	080050ad 	.word	0x080050ad
 800506c:	080050ad 	.word	0x080050ad
 8005070:	080050a1 	.word	0x080050a1
 8005074:	080050ad 	.word	0x080050ad
 8005078:	080050ad 	.word	0x080050ad
 800507c:	080050ad 	.word	0x080050ad
 8005080:	0800509b 	.word	0x0800509b
 8005084:	080050ad 	.word	0x080050ad
 8005088:	080050ad 	.word	0x080050ad
 800508c:	080050ad 	.word	0x080050ad
 8005090:	080050a7 	.word	0x080050a7
 8005094:	2300      	movs	r3, #0
 8005096:	77fb      	strb	r3, [r7, #31]
 8005098:	e117      	b.n	80052ca <UART_SetConfig+0x34e>
 800509a:	2302      	movs	r3, #2
 800509c:	77fb      	strb	r3, [r7, #31]
 800509e:	e114      	b.n	80052ca <UART_SetConfig+0x34e>
 80050a0:	2304      	movs	r3, #4
 80050a2:	77fb      	strb	r3, [r7, #31]
 80050a4:	e111      	b.n	80052ca <UART_SetConfig+0x34e>
 80050a6:	2308      	movs	r3, #8
 80050a8:	77fb      	strb	r3, [r7, #31]
 80050aa:	e10e      	b.n	80052ca <UART_SetConfig+0x34e>
 80050ac:	2310      	movs	r3, #16
 80050ae:	77fb      	strb	r3, [r7, #31]
 80050b0:	bf00      	nop
 80050b2:	e10a      	b.n	80052ca <UART_SetConfig+0x34e>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a71      	ldr	r2, [pc, #452]	; (8005280 <UART_SetConfig+0x304>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d120      	bne.n	8005100 <UART_SetConfig+0x184>
 80050be:	4b6e      	ldr	r3, [pc, #440]	; (8005278 <UART_SetConfig+0x2fc>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	d00f      	beq.n	80050ec <UART_SetConfig+0x170>
 80050cc:	2b10      	cmp	r3, #16
 80050ce:	d802      	bhi.n	80050d6 <UART_SetConfig+0x15a>
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d005      	beq.n	80050e0 <UART_SetConfig+0x164>
 80050d4:	e010      	b.n	80050f8 <UART_SetConfig+0x17c>
 80050d6:	2b20      	cmp	r3, #32
 80050d8:	d005      	beq.n	80050e6 <UART_SetConfig+0x16a>
 80050da:	2b30      	cmp	r3, #48	; 0x30
 80050dc:	d009      	beq.n	80050f2 <UART_SetConfig+0x176>
 80050de:	e00b      	b.n	80050f8 <UART_SetConfig+0x17c>
 80050e0:	2300      	movs	r3, #0
 80050e2:	77fb      	strb	r3, [r7, #31]
 80050e4:	e0f1      	b.n	80052ca <UART_SetConfig+0x34e>
 80050e6:	2302      	movs	r3, #2
 80050e8:	77fb      	strb	r3, [r7, #31]
 80050ea:	e0ee      	b.n	80052ca <UART_SetConfig+0x34e>
 80050ec:	2304      	movs	r3, #4
 80050ee:	77fb      	strb	r3, [r7, #31]
 80050f0:	e0eb      	b.n	80052ca <UART_SetConfig+0x34e>
 80050f2:	2308      	movs	r3, #8
 80050f4:	77fb      	strb	r3, [r7, #31]
 80050f6:	e0e8      	b.n	80052ca <UART_SetConfig+0x34e>
 80050f8:	2310      	movs	r3, #16
 80050fa:	77fb      	strb	r3, [r7, #31]
 80050fc:	bf00      	nop
 80050fe:	e0e4      	b.n	80052ca <UART_SetConfig+0x34e>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a5f      	ldr	r2, [pc, #380]	; (8005284 <UART_SetConfig+0x308>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d120      	bne.n	800514c <UART_SetConfig+0x1d0>
 800510a:	4b5b      	ldr	r3, [pc, #364]	; (8005278 <UART_SetConfig+0x2fc>)
 800510c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005110:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005114:	2b40      	cmp	r3, #64	; 0x40
 8005116:	d00f      	beq.n	8005138 <UART_SetConfig+0x1bc>
 8005118:	2b40      	cmp	r3, #64	; 0x40
 800511a:	d802      	bhi.n	8005122 <UART_SetConfig+0x1a6>
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <UART_SetConfig+0x1b0>
 8005120:	e010      	b.n	8005144 <UART_SetConfig+0x1c8>
 8005122:	2b80      	cmp	r3, #128	; 0x80
 8005124:	d005      	beq.n	8005132 <UART_SetConfig+0x1b6>
 8005126:	2bc0      	cmp	r3, #192	; 0xc0
 8005128:	d009      	beq.n	800513e <UART_SetConfig+0x1c2>
 800512a:	e00b      	b.n	8005144 <UART_SetConfig+0x1c8>
 800512c:	2300      	movs	r3, #0
 800512e:	77fb      	strb	r3, [r7, #31]
 8005130:	e0cb      	b.n	80052ca <UART_SetConfig+0x34e>
 8005132:	2302      	movs	r3, #2
 8005134:	77fb      	strb	r3, [r7, #31]
 8005136:	e0c8      	b.n	80052ca <UART_SetConfig+0x34e>
 8005138:	2304      	movs	r3, #4
 800513a:	77fb      	strb	r3, [r7, #31]
 800513c:	e0c5      	b.n	80052ca <UART_SetConfig+0x34e>
 800513e:	2308      	movs	r3, #8
 8005140:	77fb      	strb	r3, [r7, #31]
 8005142:	e0c2      	b.n	80052ca <UART_SetConfig+0x34e>
 8005144:	2310      	movs	r3, #16
 8005146:	77fb      	strb	r3, [r7, #31]
 8005148:	bf00      	nop
 800514a:	e0be      	b.n	80052ca <UART_SetConfig+0x34e>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a4d      	ldr	r2, [pc, #308]	; (8005288 <UART_SetConfig+0x30c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d124      	bne.n	80051a0 <UART_SetConfig+0x224>
 8005156:	4b48      	ldr	r3, [pc, #288]	; (8005278 <UART_SetConfig+0x2fc>)
 8005158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005164:	d012      	beq.n	800518c <UART_SetConfig+0x210>
 8005166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516a:	d802      	bhi.n	8005172 <UART_SetConfig+0x1f6>
 800516c:	2b00      	cmp	r3, #0
 800516e:	d007      	beq.n	8005180 <UART_SetConfig+0x204>
 8005170:	e012      	b.n	8005198 <UART_SetConfig+0x21c>
 8005172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005176:	d006      	beq.n	8005186 <UART_SetConfig+0x20a>
 8005178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800517c:	d009      	beq.n	8005192 <UART_SetConfig+0x216>
 800517e:	e00b      	b.n	8005198 <UART_SetConfig+0x21c>
 8005180:	2300      	movs	r3, #0
 8005182:	77fb      	strb	r3, [r7, #31]
 8005184:	e0a1      	b.n	80052ca <UART_SetConfig+0x34e>
 8005186:	2302      	movs	r3, #2
 8005188:	77fb      	strb	r3, [r7, #31]
 800518a:	e09e      	b.n	80052ca <UART_SetConfig+0x34e>
 800518c:	2304      	movs	r3, #4
 800518e:	77fb      	strb	r3, [r7, #31]
 8005190:	e09b      	b.n	80052ca <UART_SetConfig+0x34e>
 8005192:	2308      	movs	r3, #8
 8005194:	77fb      	strb	r3, [r7, #31]
 8005196:	e098      	b.n	80052ca <UART_SetConfig+0x34e>
 8005198:	2310      	movs	r3, #16
 800519a:	77fb      	strb	r3, [r7, #31]
 800519c:	bf00      	nop
 800519e:	e094      	b.n	80052ca <UART_SetConfig+0x34e>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a39      	ldr	r2, [pc, #228]	; (800528c <UART_SetConfig+0x310>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d124      	bne.n	80051f4 <UART_SetConfig+0x278>
 80051aa:	4b33      	ldr	r3, [pc, #204]	; (8005278 <UART_SetConfig+0x2fc>)
 80051ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b8:	d012      	beq.n	80051e0 <UART_SetConfig+0x264>
 80051ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051be:	d802      	bhi.n	80051c6 <UART_SetConfig+0x24a>
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d007      	beq.n	80051d4 <UART_SetConfig+0x258>
 80051c4:	e012      	b.n	80051ec <UART_SetConfig+0x270>
 80051c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ca:	d006      	beq.n	80051da <UART_SetConfig+0x25e>
 80051cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051d0:	d009      	beq.n	80051e6 <UART_SetConfig+0x26a>
 80051d2:	e00b      	b.n	80051ec <UART_SetConfig+0x270>
 80051d4:	2301      	movs	r3, #1
 80051d6:	77fb      	strb	r3, [r7, #31]
 80051d8:	e077      	b.n	80052ca <UART_SetConfig+0x34e>
 80051da:	2302      	movs	r3, #2
 80051dc:	77fb      	strb	r3, [r7, #31]
 80051de:	e074      	b.n	80052ca <UART_SetConfig+0x34e>
 80051e0:	2304      	movs	r3, #4
 80051e2:	77fb      	strb	r3, [r7, #31]
 80051e4:	e071      	b.n	80052ca <UART_SetConfig+0x34e>
 80051e6:	2308      	movs	r3, #8
 80051e8:	77fb      	strb	r3, [r7, #31]
 80051ea:	e06e      	b.n	80052ca <UART_SetConfig+0x34e>
 80051ec:	2310      	movs	r3, #16
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	bf00      	nop
 80051f2:	e06a      	b.n	80052ca <UART_SetConfig+0x34e>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a25      	ldr	r2, [pc, #148]	; (8005290 <UART_SetConfig+0x314>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d124      	bne.n	8005248 <UART_SetConfig+0x2cc>
 80051fe:	4b1e      	ldr	r3, [pc, #120]	; (8005278 <UART_SetConfig+0x2fc>)
 8005200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005204:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800520c:	d012      	beq.n	8005234 <UART_SetConfig+0x2b8>
 800520e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005212:	d802      	bhi.n	800521a <UART_SetConfig+0x29e>
 8005214:	2b00      	cmp	r3, #0
 8005216:	d007      	beq.n	8005228 <UART_SetConfig+0x2ac>
 8005218:	e012      	b.n	8005240 <UART_SetConfig+0x2c4>
 800521a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800521e:	d006      	beq.n	800522e <UART_SetConfig+0x2b2>
 8005220:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005224:	d009      	beq.n	800523a <UART_SetConfig+0x2be>
 8005226:	e00b      	b.n	8005240 <UART_SetConfig+0x2c4>
 8005228:	2300      	movs	r3, #0
 800522a:	77fb      	strb	r3, [r7, #31]
 800522c:	e04d      	b.n	80052ca <UART_SetConfig+0x34e>
 800522e:	2302      	movs	r3, #2
 8005230:	77fb      	strb	r3, [r7, #31]
 8005232:	e04a      	b.n	80052ca <UART_SetConfig+0x34e>
 8005234:	2304      	movs	r3, #4
 8005236:	77fb      	strb	r3, [r7, #31]
 8005238:	e047      	b.n	80052ca <UART_SetConfig+0x34e>
 800523a:	2308      	movs	r3, #8
 800523c:	77fb      	strb	r3, [r7, #31]
 800523e:	e044      	b.n	80052ca <UART_SetConfig+0x34e>
 8005240:	2310      	movs	r3, #16
 8005242:	77fb      	strb	r3, [r7, #31]
 8005244:	bf00      	nop
 8005246:	e040      	b.n	80052ca <UART_SetConfig+0x34e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a11      	ldr	r2, [pc, #68]	; (8005294 <UART_SetConfig+0x318>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d139      	bne.n	80052c6 <UART_SetConfig+0x34a>
 8005252:	4b09      	ldr	r3, [pc, #36]	; (8005278 <UART_SetConfig+0x2fc>)
 8005254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005258:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800525c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005260:	d027      	beq.n	80052b2 <UART_SetConfig+0x336>
 8005262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005266:	d817      	bhi.n	8005298 <UART_SetConfig+0x31c>
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01c      	beq.n	80052a6 <UART_SetConfig+0x32a>
 800526c:	e027      	b.n	80052be <UART_SetConfig+0x342>
 800526e:	bf00      	nop
 8005270:	efff69f3 	.word	0xefff69f3
 8005274:	40011000 	.word	0x40011000
 8005278:	40023800 	.word	0x40023800
 800527c:	40004400 	.word	0x40004400
 8005280:	40004800 	.word	0x40004800
 8005284:	40004c00 	.word	0x40004c00
 8005288:	40005000 	.word	0x40005000
 800528c:	40011400 	.word	0x40011400
 8005290:	40007800 	.word	0x40007800
 8005294:	40007c00 	.word	0x40007c00
 8005298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529c:	d006      	beq.n	80052ac <UART_SetConfig+0x330>
 800529e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80052a2:	d009      	beq.n	80052b8 <UART_SetConfig+0x33c>
 80052a4:	e00b      	b.n	80052be <UART_SetConfig+0x342>
 80052a6:	2300      	movs	r3, #0
 80052a8:	77fb      	strb	r3, [r7, #31]
 80052aa:	e00e      	b.n	80052ca <UART_SetConfig+0x34e>
 80052ac:	2302      	movs	r3, #2
 80052ae:	77fb      	strb	r3, [r7, #31]
 80052b0:	e00b      	b.n	80052ca <UART_SetConfig+0x34e>
 80052b2:	2304      	movs	r3, #4
 80052b4:	77fb      	strb	r3, [r7, #31]
 80052b6:	e008      	b.n	80052ca <UART_SetConfig+0x34e>
 80052b8:	2308      	movs	r3, #8
 80052ba:	77fb      	strb	r3, [r7, #31]
 80052bc:	e005      	b.n	80052ca <UART_SetConfig+0x34e>
 80052be:	2310      	movs	r3, #16
 80052c0:	77fb      	strb	r3, [r7, #31]
 80052c2:	bf00      	nop
 80052c4:	e001      	b.n	80052ca <UART_SetConfig+0x34e>
 80052c6:	2310      	movs	r3, #16
 80052c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d2:	d17f      	bne.n	80053d4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80052d4:	7ffb      	ldrb	r3, [r7, #31]
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	d85c      	bhi.n	8005394 <UART_SetConfig+0x418>
 80052da:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <UART_SetConfig+0x364>)
 80052dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e0:	08005305 	.word	0x08005305
 80052e4:	08005325 	.word	0x08005325
 80052e8:	08005345 	.word	0x08005345
 80052ec:	08005395 	.word	0x08005395
 80052f0:	0800535d 	.word	0x0800535d
 80052f4:	08005395 	.word	0x08005395
 80052f8:	08005395 	.word	0x08005395
 80052fc:	08005395 	.word	0x08005395
 8005300:	0800537d 	.word	0x0800537d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005304:	f7fe fad4 	bl	80038b0 <HAL_RCC_GetPCLK1Freq>
 8005308:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	005a      	lsls	r2, r3, #1
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	085b      	lsrs	r3, r3, #1
 8005314:	441a      	add	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	fbb2 f3f3 	udiv	r3, r2, r3
 800531e:	b29b      	uxth	r3, r3
 8005320:	61bb      	str	r3, [r7, #24]
        break;
 8005322:	e03a      	b.n	800539a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005324:	f7fe fad8 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 8005328:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	005a      	lsls	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	085b      	lsrs	r3, r3, #1
 8005334:	441a      	add	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	fbb2 f3f3 	udiv	r3, r2, r3
 800533e:	b29b      	uxth	r3, r3
 8005340:	61bb      	str	r3, [r7, #24]
        break;
 8005342:	e02a      	b.n	800539a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	085a      	lsrs	r2, r3, #1
 800534a:	4b5f      	ldr	r3, [pc, #380]	; (80054c8 <UART_SetConfig+0x54c>)
 800534c:	4413      	add	r3, r2
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6852      	ldr	r2, [r2, #4]
 8005352:	fbb3 f3f2 	udiv	r3, r3, r2
 8005356:	b29b      	uxth	r3, r3
 8005358:	61bb      	str	r3, [r7, #24]
        break;
 800535a:	e01e      	b.n	800539a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800535c:	f7fe f9c4 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 8005360:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	005a      	lsls	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	441a      	add	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	fbb2 f3f3 	udiv	r3, r2, r3
 8005376:	b29b      	uxth	r3, r3
 8005378:	61bb      	str	r3, [r7, #24]
        break;
 800537a:	e00e      	b.n	800539a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	fbb2 f3f3 	udiv	r3, r2, r3
 800538e:	b29b      	uxth	r3, r3
 8005390:	61bb      	str	r3, [r7, #24]
        break;
 8005392:	e002      	b.n	800539a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	75fb      	strb	r3, [r7, #23]
        break;
 8005398:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	2b0f      	cmp	r3, #15
 800539e:	d916      	bls.n	80053ce <UART_SetConfig+0x452>
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a6:	d212      	bcs.n	80053ce <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	f023 030f 	bic.w	r3, r3, #15
 80053b0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	b29a      	uxth	r2, r3
 80053be:	897b      	ldrh	r3, [r7, #10]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	897a      	ldrh	r2, [r7, #10]
 80053ca:	60da      	str	r2, [r3, #12]
 80053cc:	e070      	b.n	80054b0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	75fb      	strb	r3, [r7, #23]
 80053d2:	e06d      	b.n	80054b0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80053d4:	7ffb      	ldrb	r3, [r7, #31]
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d859      	bhi.n	800548e <UART_SetConfig+0x512>
 80053da:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <UART_SetConfig+0x464>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	08005405 	.word	0x08005405
 80053e4:	08005423 	.word	0x08005423
 80053e8:	08005441 	.word	0x08005441
 80053ec:	0800548f 	.word	0x0800548f
 80053f0:	08005459 	.word	0x08005459
 80053f4:	0800548f 	.word	0x0800548f
 80053f8:	0800548f 	.word	0x0800548f
 80053fc:	0800548f 	.word	0x0800548f
 8005400:	08005477 	.word	0x08005477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005404:	f7fe fa54 	bl	80038b0 <HAL_RCC_GetPCLK1Freq>
 8005408:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	085a      	lsrs	r2, r3, #1
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	441a      	add	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	fbb2 f3f3 	udiv	r3, r2, r3
 800541c:	b29b      	uxth	r3, r3
 800541e:	61bb      	str	r3, [r7, #24]
        break;
 8005420:	e038      	b.n	8005494 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005422:	f7fe fa59 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 8005426:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	085a      	lsrs	r2, r3, #1
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	441a      	add	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	fbb2 f3f3 	udiv	r3, r2, r3
 800543a:	b29b      	uxth	r3, r3
 800543c:	61bb      	str	r3, [r7, #24]
        break;
 800543e:	e029      	b.n	8005494 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	085a      	lsrs	r2, r3, #1
 8005446:	4b21      	ldr	r3, [pc, #132]	; (80054cc <UART_SetConfig+0x550>)
 8005448:	4413      	add	r3, r2
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6852      	ldr	r2, [r2, #4]
 800544e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005452:	b29b      	uxth	r3, r3
 8005454:	61bb      	str	r3, [r7, #24]
        break;
 8005456:	e01d      	b.n	8005494 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005458:	f7fe f946 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 800545c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	085a      	lsrs	r2, r3, #1
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	441a      	add	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005470:	b29b      	uxth	r3, r3
 8005472:	61bb      	str	r3, [r7, #24]
        break;
 8005474:	e00e      	b.n	8005494 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	085b      	lsrs	r3, r3, #1
 800547c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	fbb2 f3f3 	udiv	r3, r2, r3
 8005488:	b29b      	uxth	r3, r3
 800548a:	61bb      	str	r3, [r7, #24]
        break;
 800548c:	e002      	b.n	8005494 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	75fb      	strb	r3, [r7, #23]
        break;
 8005492:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	2b0f      	cmp	r3, #15
 8005498:	d908      	bls.n	80054ac <UART_SetConfig+0x530>
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a0:	d204      	bcs.n	80054ac <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	60da      	str	r2, [r3, #12]
 80054aa:	e001      	b.n	80054b0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3720      	adds	r7, #32
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	01e84800 	.word	0x01e84800
 80054cc:	00f42400 	.word	0x00f42400

080054d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	f003 0310 	and.w	r3, r3, #16
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01a      	beq.n	80055e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ce:	d10a      	bne.n	80055e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	605a      	str	r2, [r3, #4]
  }
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af02      	add	r7, sp, #8
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005622:	f7fb fa19 	bl	8000a58 <HAL_GetTick>
 8005626:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b08      	cmp	r3, #8
 8005634:	d10e      	bne.n	8005654 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005636:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f82a 	bl	800569e <UART_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e020      	b.n	8005696 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0304 	and.w	r3, r3, #4
 800565e:	2b04      	cmp	r3, #4
 8005660:	d10e      	bne.n	8005680 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005662:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f814 	bl	800569e <UART_WaitOnFlagUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e00a      	b.n	8005696 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2220      	movs	r2, #32
 8005684:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	603b      	str	r3, [r7, #0]
 80056aa:	4613      	mov	r3, r2
 80056ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ae:	e05d      	b.n	800576c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b6:	d059      	beq.n	800576c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b8:	f7fb f9ce 	bl	8000a58 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d302      	bcc.n	80056ce <UART_WaitOnFlagUntilTimeout+0x30>
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d11b      	bne.n	8005706 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0201 	bic.w	r2, r2, #1
 80056ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2220      	movs	r2, #32
 80056f8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e042      	b.n	800578c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d02b      	beq.n	800576c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800571e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005722:	d123      	bne.n	800576c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800572c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800573c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0201 	bic.w	r2, r2, #1
 800574c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2220      	movs	r2, #32
 8005752:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2220      	movs	r2, #32
 800575e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e00f      	b.n	800578c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	69da      	ldr	r2, [r3, #28]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	4013      	ands	r3, r2
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	429a      	cmp	r2, r3
 800577a:	bf0c      	ite	eq
 800577c:	2301      	moveq	r3, #1
 800577e:	2300      	movne	r3, #0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	461a      	mov	r2, r3
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	429a      	cmp	r2, r3
 8005788:	d092      	beq.n	80056b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80057aa:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2220      	movs	r2, #32
 80057b0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057d4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0201 	bic.w	r2, r2, #1
 80057e4:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005814:	d014      	beq.n	8005840 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800582c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800583c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800583e:	e002      	b.n	8005846 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f7ff fb5f 	bl	8004f04 <HAL_UART_TxCpltCallback>
}
 8005846:	bf00      	nop
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f7ff fb5b 	bl	8004f18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005862:	bf00      	nop
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005876:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005880:	d01e      	beq.n	80058c0 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005898:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0201 	bic.w	r2, r2, #1
 80058a8:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b8:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f7ff fb33 	bl	8004f2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7ff fb2f 	bl	8004f40 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058e2:	bf00      	nop
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b086      	sub	sp, #24
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058fc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005902:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590e:	2b80      	cmp	r3, #128	; 0x80
 8005910:	d109      	bne.n	8005926 <UART_DMAError+0x3c>
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	2b21      	cmp	r3, #33	; 0x21
 8005916:	d106      	bne.n	8005926 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2200      	movs	r2, #0
 800591c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005920:	6978      	ldr	r0, [r7, #20]
 8005922:	f7ff ff37 	bl	8005794 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005930:	2b40      	cmp	r3, #64	; 0x40
 8005932:	d109      	bne.n	8005948 <UART_DMAError+0x5e>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b22      	cmp	r3, #34	; 0x22
 8005938:	d106      	bne.n	8005948 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2200      	movs	r2, #0
 800593e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005942:	6978      	ldr	r0, [r7, #20]
 8005944:	f7ff ff3b 	bl	80057be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800594c:	f043 0210 	orr.w	r2, r3, #16
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005954:	6978      	ldr	r0, [r7, #20]
 8005956:	f7ff fafd 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800595a:	bf00      	nop
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b084      	sub	sp, #16
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f7ff fae7 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005986:	bf00      	nop
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b082      	sub	sp, #8
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059a4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2220      	movs	r2, #32
 80059aa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7ff faa6 	bl	8004f04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059b8:	bf00      	nop
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <control_motors>:
 * y el status (variables del main), y se va a encargar de controlar
 * los motores y actualizar la misma */
 extern UART_HandleTypeDef huart3;

void control_motors(int throttle,int direction,int brake)
{
 80059c0:	b590      	push	{r4, r7, lr}
 80059c2:	b08b      	sub	sp, #44	; 0x2c
 80059c4:	af04      	add	r7, sp, #16
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
	/*control_nodos es una variable se encarga de enviar la controlword a cada nodo, el contador va a controlar la data a pedir de los nodos*/
	static uint8_t nodo=MOTOR1,control_nodos[2],contador[2];
	static int tickstart;

	uint8_t NMT[2];
	NMT[1]=0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	757b      	strb	r3, [r7, #21]
	//
	if(FLAG_CAN==1)
 80059d0:	4b80      	ldr	r3, [pc, #512]	; (8005bd4 <control_motors+0x214>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d10e      	bne.n	80059f6 <control_motors+0x36>
	{
	analize_CAN_Rx(pRxHeader,buffer_Rx_msg);
 80059d8:	4b7f      	ldr	r3, [pc, #508]	; (8005bd8 <control_motors+0x218>)
 80059da:	4a80      	ldr	r2, [pc, #512]	; (8005bdc <control_motors+0x21c>)
 80059dc:	9203      	str	r2, [sp, #12]
 80059de:	466c      	mov	r4, sp
 80059e0:	f103 0210 	add.w	r2, r3, #16
 80059e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80059e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80059ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80059ec:	f7fa fe3c 	bl	8000668 <analize_CAN_Rx>
	FLAG_CAN=0;			//bajo el flag
 80059f0:	4b78      	ldr	r3, [pc, #480]	; (8005bd4 <control_motors+0x214>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
	}

	if(FLAG_USART==49)
 80059f6:	4b7a      	ldr	r3, [pc, #488]	; (8005be0 <control_motors+0x220>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b31      	cmp	r3, #49	; 0x31
 80059fc:	d108      	bne.n	8005a10 <control_motors+0x50>
	{
		preparo_data_uart(info_UART); 	//primero acomodo y elijo la info a enviar
 80059fe:	4879      	ldr	r0, [pc, #484]	; (8005be4 <control_motors+0x224>)
 8005a00:	f000 fc7a 	bl	80062f8 <preparo_data_uart>
		Pc_Communication(info_UART);	//envio info
 8005a04:	4877      	ldr	r0, [pc, #476]	; (8005be4 <control_motors+0x224>)
 8005a06:	f7fa ffbd 	bl	8000984 <Pc_Communication>
		FLAG_USART=0;
 8005a0a:	4b75      	ldr	r3, [pc, #468]	; (8005be0 <control_motors+0x220>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	701a      	strb	r2, [r3, #0]
	}

	// tiempos
	/* debo seleccionar alternadamente el motor a controlar, arranco la variable en 155 para
	 * saber que es la primera vez que la inicio y despues la alterno entre los nodos*/
	switch (status[nodo-1])
 8005a10:	4b75      	ldr	r3, [pc, #468]	; (8005be8 <control_motors+0x228>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	4a75      	ldr	r2, [pc, #468]	; (8005bec <control_motors+0x22c>)
 8005a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	f200 80d1 	bhi.w	8005bc4 <control_motors+0x204>
 8005a22:	a201      	add	r2, pc, #4	; (adr r2, 8005a28 <control_motors+0x68>)
 8005a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a28:	08005a3d 	.word	0x08005a3d
 8005a2c:	08005bc5 	.word	0x08005bc5
 8005a30:	08005a6f 	.word	0x08005a6f
 8005a34:	08005ad1 	.word	0x08005ad1
 8005a38:	08005b9d 	.word	0x08005b9d
	{
		case(INITIALIZATION):		// configuro ambos nodos y arranco mi base de tiempo.
			control_nodos[0]=NOTSEND;
 8005a3c:	4b6c      	ldr	r3, [pc, #432]	; (8005bf0 <control_motors+0x230>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]
			control_nodos[1]=NOTSEND;
 8005a42:	4b6b      	ldr	r3, [pc, #428]	; (8005bf0 <control_motors+0x230>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	705a      	strb	r2, [r3, #1]
			contador[0]=1;
 8005a48:	4b6a      	ldr	r3, [pc, #424]	; (8005bf4 <control_motors+0x234>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	701a      	strb	r2, [r3, #0]
			contador[1]=1;
 8005a4e:	4b69      	ldr	r3, [pc, #420]	; (8005bf4 <control_motors+0x234>)
 8005a50:	2201      	movs	r2, #1
 8005a52:	705a      	strb	r2, [r3, #1]
			status[0]=WFBOOTUP;
 8005a54:	4b65      	ldr	r3, [pc, #404]	; (8005bec <control_motors+0x22c>)
 8005a56:	2201      	movs	r2, #1
 8005a58:	801a      	strh	r2, [r3, #0]
			status[1]=WFBOOTUP;
 8005a5a:	4b64      	ldr	r3, [pc, #400]	; (8005bec <control_motors+0x22c>)
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	805a      	strh	r2, [r3, #2]
			tickstart= HAL_GetTick();
 8005a60:	f7fa fffa 	bl	8000a58 <HAL_GetTick>
 8005a64:	4603      	mov	r3, r0
 8005a66:	461a      	mov	r2, r3
 8005a68:	4b63      	ldr	r3, [pc, #396]	; (8005bf8 <control_motors+0x238>)
 8005a6a:	601a      	str	r2, [r3, #0]
			break;
 8005a6c:	e0aa      	b.n	8005bc4 <control_motors+0x204>
				//ESTOY ESPERANDO QUE LOS NODOS ESTEN READY
				break;

		case(PREOPERATIONAL):

				if (status[0]==PREOPERATIONAL && status[1]==PREOPERATIONAL)		// Si estan ambos en operational
 8005a6e:	4b5f      	ldr	r3, [pc, #380]	; (8005bec <control_motors+0x22c>)
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	f040 80a3 	bne.w	8005bbe <control_motors+0x1fe>
 8005a78:	4b5c      	ldr	r3, [pc, #368]	; (8005bec <control_motors+0x22c>)
 8005a7a:	885b      	ldrh	r3, [r3, #2]
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	f040 809e 	bne.w	8005bbe <control_motors+0x1fe>
				{
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);		// prendo led verde
 8005a82:	2201      	movs	r2, #1
 8005a84:	2101      	movs	r1, #1
 8005a86:	485d      	ldr	r0, [pc, #372]	; (8005bfc <control_motors+0x23c>)
 8005a88:	f7fd fa60 	bl	8002f4c <HAL_GPIO_WritePin>

					if(FLAG_OP==1)
 8005a8c:	4b5c      	ldr	r3, [pc, #368]	; (8005c00 <control_motors+0x240>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	f040 8094 	bne.w	8005bbe <control_motors+0x1fe>
					{
						NMT[0]=0x01;		        //Pasar a operacional
 8005a96:	2301      	movs	r3, #1
 8005a98:	753b      	strb	r3, [r7, #20]

						if(can1_Tx(0x000,NMT,2)!=HAL_OK)
 8005a9a:	f107 0314 	add.w	r3, r7, #20
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	f7fa ff3a 	bl	800091c <can1_Tx>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <control_motors+0xf4>
						{
							Error_Handler();
 8005aae:	f000 fc17 	bl	80062e0 <Error_Handler>
 8005ab2:	e105      	b.n	8005cc0 <control_motors+0x300>
							return;
						}
						HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);				// enciendo luz azul en caso operacional
 8005ab4:	2180      	movs	r1, #128	; 0x80
 8005ab6:	4851      	ldr	r0, [pc, #324]	; (8005bfc <control_motors+0x23c>)
 8005ab8:	f7fd fa61 	bl	8002f7e <HAL_GPIO_TogglePin>
						status[0]=OPERATIONAL;
 8005abc:	4b4b      	ldr	r3, [pc, #300]	; (8005bec <control_motors+0x22c>)
 8005abe:	2203      	movs	r2, #3
 8005ac0:	801a      	strh	r2, [r3, #0]
						status[1]=OPERATIONAL;
 8005ac2:	4b4a      	ldr	r3, [pc, #296]	; (8005bec <control_motors+0x22c>)
 8005ac4:	2203      	movs	r2, #3
 8005ac6:	805a      	strh	r2, [r3, #2]
						FLAG_OP=0;											// UNA VEZ ENVIADO EL MSJ NMT BAJO EL FLAG
 8005ac8:	4b4d      	ldr	r3, [pc, #308]	; (8005c00 <control_motors+0x240>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	701a      	strb	r2, [r3, #0]
					}

			}

			break;
 8005ace:	e076      	b.n	8005bbe <control_motors+0x1fe>
	/*Caso OPERATIONAL y Ctrl WORD enviada:*/
		case(OPERATIONAL):
					if(control_nodos[nodo-1]==NOTSEND)		// Pulso de pasar de preoperational a operational
 8005ad0:	4b45      	ldr	r3, [pc, #276]	; (8005be8 <control_motors+0x228>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	4a46      	ldr	r2, [pc, #280]	; (8005bf0 <control_motors+0x230>)
 8005ad8:	5cd3      	ldrb	r3, [r2, r3]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d144      	bne.n	8005b68 <control_motors+0x1a8>
					{
						if( (HAL_GetTick()-tickstart>freq) )
 8005ade:	f7fa ffbb 	bl	8000a58 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	4b44      	ldr	r3, [pc, #272]	; (8005bf8 <control_motors+0x238>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	4a46      	ldr	r2, [pc, #280]	; (8005c04 <control_motors+0x244>)
 8005aec:	7812      	ldrb	r2, [r2, #0]
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d90f      	bls.n	8005b12 <control_motors+0x152>
						{
						if(send_ctrlwrd_1(nodo)== HAL_OK)
 8005af2:	4b3d      	ldr	r3, [pc, #244]	; (8005be8 <control_motors+0x228>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7fa fd5f 	bl	80005bc <send_ctrlwrd_1>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d12a      	bne.n	8005b5a <control_motors+0x19a>
							control_nodos[nodo-1]=SEMI_SEND;
 8005b04:	4b38      	ldr	r3, [pc, #224]	; (8005be8 <control_motors+0x228>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	4a39      	ldr	r2, [pc, #228]	; (8005bf0 <control_motors+0x230>)
 8005b0c:	2102      	movs	r1, #2
 8005b0e:	54d1      	strb	r1, [r2, r3]
 8005b10:	e023      	b.n	8005b5a <control_motors+0x19a>
					}
					else if(control_nodos[nodo-1]==SEMI_SEND)
 8005b12:	4b35      	ldr	r3, [pc, #212]	; (8005be8 <control_motors+0x228>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	4a35      	ldr	r2, [pc, #212]	; (8005bf0 <control_motors+0x230>)
 8005b1a:	5cd3      	ldrb	r3, [r2, r3]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d10f      	bne.n	8005b40 <control_motors+0x180>
					{
						if(send_ctrlword_2(nodo)==HAL_OK)
 8005b20:	4b31      	ldr	r3, [pc, #196]	; (8005be8 <control_motors+0x228>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fa fd73 	bl	8000612 <send_ctrlword_2>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d113      	bne.n	8005b5a <control_motors+0x19a>
							control_nodos[nodo-1]=SEND;
 8005b32:	4b2d      	ldr	r3, [pc, #180]	; (8005be8 <control_motors+0x228>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	4a2d      	ldr	r2, [pc, #180]	; (8005bf0 <control_motors+0x230>)
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	54d1      	strb	r1, [r2, r3]
 8005b3e:	e00c      	b.n	8005b5a <control_motors+0x19a>
					}
					else if(FLAG_OP==1)
 8005b40:	4b2f      	ldr	r3, [pc, #188]	; (8005c00 <control_motors+0x240>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d108      	bne.n	8005b5a <control_motors+0x19a>
					{
						status[0]=STOPPED;
 8005b48:	4b28      	ldr	r3, [pc, #160]	; (8005bec <control_motors+0x22c>)
 8005b4a:	2204      	movs	r2, #4
 8005b4c:	801a      	strh	r2, [r3, #0]
						status[1]=STOPPED;
 8005b4e:	4b27      	ldr	r3, [pc, #156]	; (8005bec <control_motors+0x22c>)
 8005b50:	2204      	movs	r2, #4
 8005b52:	805a      	strh	r2, [r3, #2]
						FLAG_OP=0;
 8005b54:	4b2a      	ldr	r3, [pc, #168]	; (8005c00 <control_motors+0x240>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	701a      	strb	r2, [r3, #0]
					}
						tickstart=HAL_GetTick();
 8005b5a:	f7fa ff7d 	bl	8000a58 <HAL_GetTick>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	461a      	mov	r2, r3
 8005b62:	4b25      	ldr	r3, [pc, #148]	; (8005bf8 <control_motors+0x238>)
 8005b64:	601a      	str	r2, [r3, #0]
						if(run_motor_n(nodo,throttle,status[nodo-1])==HAL_OK)
							{
							cycles++;
							}
					}
					break;
 8005b66:	e02c      	b.n	8005bc2 <control_motors+0x202>
					else if (cycles==5)
 8005b68:	4b27      	ldr	r3, [pc, #156]	; (8005c08 <control_motors+0x248>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b05      	cmp	r3, #5
 8005b6e:	d128      	bne.n	8005bc2 <control_motors+0x202>
						if(run_motor_n(nodo,throttle,status[nodo-1])==HAL_OK)
 8005b70:	4b1d      	ldr	r3, [pc, #116]	; (8005be8 <control_motors+0x228>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	b298      	uxth	r0, r3
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	4b1b      	ldr	r3, [pc, #108]	; (8005be8 <control_motors+0x228>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	4a1b      	ldr	r2, [pc, #108]	; (8005bec <control_motors+0x22c>)
 8005b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b84:	461a      	mov	r2, r3
 8005b86:	f7fa fcd7 	bl	8000538 <run_motor_n>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d118      	bne.n	8005bc2 <control_motors+0x202>
							cycles++;
 8005b90:	4b1d      	ldr	r3, [pc, #116]	; (8005c08 <control_motors+0x248>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3301      	adds	r3, #1
 8005b96:	4a1c      	ldr	r2, [pc, #112]	; (8005c08 <control_motors+0x248>)
 8005b98:	6013      	str	r3, [r2, #0]
					break;
 8005b9a:	e012      	b.n	8005bc2 <control_motors+0x202>

		case(STOPPED):
				control_nodos[0]=NOTSEND;
 8005b9c:	4b14      	ldr	r3, [pc, #80]	; (8005bf0 <control_motors+0x230>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	701a      	strb	r2, [r3, #0]
				control_nodos[1]=NOTSEND;
 8005ba2:	4b13      	ldr	r3, [pc, #76]	; (8005bf0 <control_motors+0x230>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	705a      	strb	r2, [r3, #1]
				status[0]=PREOPERATIONAL;
 8005ba8:	4b10      	ldr	r3, [pc, #64]	; (8005bec <control_motors+0x22c>)
 8005baa:	2202      	movs	r2, #2
 8005bac:	801a      	strh	r2, [r3, #0]
				status[1]=PREOPERATIONAL;
 8005bae:	4b0f      	ldr	r3, [pc, #60]	; (8005bec <control_motors+0x22c>)
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	805a      	strh	r2, [r3, #2]
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8005bb4:	2180      	movs	r1, #128	; 0x80
 8005bb6:	4811      	ldr	r0, [pc, #68]	; (8005bfc <control_motors+0x23c>)
 8005bb8:	f7fd f9e1 	bl	8002f7e <HAL_GPIO_TogglePin>
				break;
 8005bbc:	e002      	b.n	8005bc4 <control_motors+0x204>
			break;
 8005bbe:	bf00      	nop
 8005bc0:	e000      	b.n	8005bc4 <control_motors+0x204>
					break;
 8005bc2:	bf00      	nop
	}
	/*Reseteo Variable control en el caso de volver a preoperational*/

	/* controlo alternadamente motor 1 y motor 2 --- RESETEO VARUABKES
	//control_nodos[nodo-1]=control;  // ???? en q esta ba pensando*/
	if(nodo==MOTOR1)
 8005bc4:	4b08      	ldr	r3, [pc, #32]	; (8005be8 <control_motors+0x228>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d11f      	bne.n	8005c0c <control_motors+0x24c>
	{
		nodo=MOTOR2;
 8005bcc:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <control_motors+0x228>)
 8005bce:	2202      	movs	r2, #2
 8005bd0:	701a      	strb	r2, [r3, #0]
 8005bd2:	e022      	b.n	8005c1a <control_motors+0x25a>
 8005bd4:	2000003d 	.word	0x2000003d
 8005bd8:	2000007c 	.word	0x2000007c
 8005bdc:	20000040 	.word	0x20000040
 8005be0:	20000098 	.word	0x20000098
 8005be4:	200000bc 	.word	0x200000bc
 8005be8:	20000006 	.word	0x20000006
 8005bec:	2000009c 	.word	0x2000009c
 8005bf0:	2000002c 	.word	0x2000002c
 8005bf4:	20000030 	.word	0x20000030
 8005bf8:	20000034 	.word	0x20000034
 8005bfc:	40020400 	.word	0x40020400
 8005c00:	2000003c 	.word	0x2000003c
 8005c04:	20000005 	.word	0x20000005
 8005c08:	20000028 	.word	0x20000028
	}
	else if (nodo==MOTOR2)
 8005c0c:	4b2e      	ldr	r3, [pc, #184]	; (8005cc8 <control_motors+0x308>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d102      	bne.n	8005c1a <control_motors+0x25a>
	{
		nodo=MOTOR1;
 8005c14:	4b2c      	ldr	r3, [pc, #176]	; (8005cc8 <control_motors+0x308>)
 8005c16:	2201      	movs	r2, #1
 8005c18:	701a      	strb	r2, [r3, #0]
	}

	//PIDO INFO (CONSTANTEMENTE)---ciclos¿?7

			if( (HAL_GetTick()-tickstart>freq) )
 8005c1a:	f7fa ff1d 	bl	8000a58 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	4b2a      	ldr	r3, [pc, #168]	; (8005ccc <control_motors+0x30c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	4a2a      	ldr	r2, [pc, #168]	; (8005cd0 <control_motors+0x310>)
 8005c28:	7812      	ldrb	r2, [r2, #0]
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d948      	bls.n	8005cc0 <control_motors+0x300>
			{
				if((status[nodo-1]==OPERATIONAL && cycles==5) || (status[nodo-1]==PREOPERATIONAL && FLAG_OP==1))
 8005c2e:	4b26      	ldr	r3, [pc, #152]	; (8005cc8 <control_motors+0x308>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	4a27      	ldr	r2, [pc, #156]	; (8005cd4 <control_motors+0x314>)
 8005c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d103      	bne.n	8005c46 <control_motors+0x286>
 8005c3e:	4b26      	ldr	r3, [pc, #152]	; (8005cd8 <control_motors+0x318>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b05      	cmp	r3, #5
 8005c44:	d03c      	beq.n	8005cc0 <control_motors+0x300>
 8005c46:	4b20      	ldr	r3, [pc, #128]	; (8005cc8 <control_motors+0x308>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	4a21      	ldr	r2, [pc, #132]	; (8005cd4 <control_motors+0x314>)
 8005c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d103      	bne.n	8005c5e <control_motors+0x29e>
 8005c56:	4b21      	ldr	r3, [pc, #132]	; (8005cdc <control_motors+0x31c>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d030      	beq.n	8005cc0 <control_motors+0x300>
				{

				}
				else
				{
					if(ask_for_info( nodo ,contador[nodo-1])==HAL_OK)
 8005c5e:	4b1a      	ldr	r3, [pc, #104]	; (8005cc8 <control_motors+0x308>)
 8005c60:	7818      	ldrb	r0, [r3, #0]
 8005c62:	4b19      	ldr	r3, [pc, #100]	; (8005cc8 <control_motors+0x308>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	4a1d      	ldr	r2, [pc, #116]	; (8005ce0 <control_motors+0x320>)
 8005c6a:	5cd3      	ldrb	r3, [r2, r3]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	f7fa fde1 	bl	8000834 <ask_for_info>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d123      	bne.n	8005cc0 <control_motors+0x300>
					{
						contador[nodo-1]++;
 8005c78:	4b13      	ldr	r3, [pc, #76]	; (8005cc8 <control_motors+0x308>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	4a18      	ldr	r2, [pc, #96]	; (8005ce0 <control_motors+0x320>)
 8005c80:	5cd2      	ldrb	r2, [r2, r3]
 8005c82:	3201      	adds	r2, #1
 8005c84:	b2d1      	uxtb	r1, r2
 8005c86:	4a16      	ldr	r2, [pc, #88]	; (8005ce0 <control_motors+0x320>)
 8005c88:	54d1      	strb	r1, [r2, r3]
						cycles++;
 8005c8a:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <control_motors+0x318>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	4a11      	ldr	r2, [pc, #68]	; (8005cd8 <control_motors+0x318>)
 8005c92:	6013      	str	r3, [r2, #0]
						tickstart=HAL_GetTick();
 8005c94:	f7fa fee0 	bl	8000a58 <HAL_GetTick>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ccc <control_motors+0x30c>)
 8005c9e:	601a      	str	r2, [r3, #0]
						if(contador[nodo-1]>10)
 8005ca0:	4b09      	ldr	r3, [pc, #36]	; (8005cc8 <control_motors+0x308>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	4a0e      	ldr	r2, [pc, #56]	; (8005ce0 <control_motors+0x320>)
 8005ca8:	5cd3      	ldrb	r3, [r2, r3]
 8005caa:	2b0a      	cmp	r3, #10
 8005cac:	d908      	bls.n	8005cc0 <control_motors+0x300>
						{
							contador[nodo-1]=1;
 8005cae:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <control_motors+0x308>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	4a0a      	ldr	r2, [pc, #40]	; (8005ce0 <control_motors+0x320>)
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	54d1      	strb	r1, [r2, r3]
							cycles=0;
 8005cba:	4b07      	ldr	r3, [pc, #28]	; (8005cd8 <control_motors+0x318>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]
						}
					}
				}
			}
 }
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd90      	pop	{r4, r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20000006 	.word	0x20000006
 8005ccc:	20000034 	.word	0x20000034
 8005cd0:	20000005 	.word	0x20000005
 8005cd4:	2000009c 	.word	0x2000009c
 8005cd8:	20000028 	.word	0x20000028
 8005cdc:	2000003c 	.word	0x2000003c
 8005ce0:	20000030 	.word	0x20000030

08005ce4 <mysystem_start>:
#include "SystemInit.h"

CAN_FilterTypeDef sFilterConfig;

void mysystem_start(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
	/*Inicio configuracion CAN*/

	  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8005cea:	2102      	movs	r1, #2
 8005cec:	4827      	ldr	r0, [pc, #156]	; (8005d8c <mysystem_start+0xa8>)
 8005cee:	f7fc f868 	bl	8001dc2 <HAL_CAN_ActivateNotification>
	  HAL_CAN_Start(&hcan1);
 8005cf2:	4826      	ldr	r0, [pc, #152]	; (8005d8c <mysystem_start+0xa8>)
 8005cf4:	f7fb fe10 	bl	8001918 <HAL_CAN_Start>

		/*Inicio configuracion Filtro can*/

	  sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8005cf8:	4b25      	ldr	r3, [pc, #148]	; (8005d90 <mysystem_start+0xac>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	611a      	str	r2, [r3, #16]
	  sFilterConfig.FilterIdHigh=0x245<<5;
 8005cfe:	4b24      	ldr	r3, [pc, #144]	; (8005d90 <mysystem_start+0xac>)
 8005d00:	f644 02a0 	movw	r2, #18592	; 0x48a0
 8005d04:	601a      	str	r2, [r3, #0]
	  sFilterConfig.FilterIdLow=0;
 8005d06:	4b22      	ldr	r3, [pc, #136]	; (8005d90 <mysystem_start+0xac>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	605a      	str	r2, [r3, #4]
	  sFilterConfig.FilterMaskIdHigh=0;
 8005d0c:	4b20      	ldr	r3, [pc, #128]	; (8005d90 <mysystem_start+0xac>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	609a      	str	r2, [r3, #8]
	  sFilterConfig.FilterMaskIdLow=0;
 8005d12:	4b1f      	ldr	r3, [pc, #124]	; (8005d90 <mysystem_start+0xac>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	60da      	str	r2, [r3, #12]
	  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8005d18:	4b1d      	ldr	r3, [pc, #116]	; (8005d90 <mysystem_start+0xac>)
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	61da      	str	r2, [r3, #28]
	  sFilterConfig.FilterActivation=ENABLE;
 8005d1e:	4b1c      	ldr	r3, [pc, #112]	; (8005d90 <mysystem_start+0xac>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	621a      	str	r2, [r3, #32]
	  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8005d24:	491a      	ldr	r1, [pc, #104]	; (8005d90 <mysystem_start+0xac>)
 8005d26:	4819      	ldr	r0, [pc, #100]	; (8005d8c <mysystem_start+0xa8>)
 8005d28:	f7fb fd0a 	bl	8001740 <HAL_CAN_ConfigFilter>

		/*Inicio ADC con DMA */
	  HAL_ADC_Start_DMA(&hadc1,ADC_val, ENTRADAS_ADC);
 8005d2c:	2203      	movs	r2, #3
 8005d2e:	4919      	ldr	r1, [pc, #100]	; (8005d94 <mysystem_start+0xb0>)
 8005d30:	4819      	ldr	r0, [pc, #100]	; (8005d98 <mysystem_start+0xb4>)
 8005d32:	f7fb f823 	bl	8000d7c <HAL_ADC_Start_DMA>

	  /*TIMER 2 PARA FUNCIONES.
	   * (Creo que no lo uso al final se puede eliminar
	   * */
	  HAL_TIM_Base_Start_IT(&htim2);
 8005d36:	4819      	ldr	r0, [pc, #100]	; (8005d9c <mysystem_start+0xb8>)
 8005d38:	f7fe fa34 	bl	80041a4 <HAL_TIM_Base_Start_IT>

	  FLAG_USART=0;
 8005d3c:	4b18      	ldr	r3, [pc, #96]	; (8005da0 <mysystem_start+0xbc>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	701a      	strb	r2, [r3, #0]
	  /*Inicio USART3*/
	  HAL_UART_Receive_DMA(&huart3,&FLAG_USART,1);
 8005d42:	2201      	movs	r2, #1
 8005d44:	4916      	ldr	r1, [pc, #88]	; (8005da0 <mysystem_start+0xbc>)
 8005d46:	4817      	ldr	r0, [pc, #92]	; (8005da4 <mysystem_start+0xc0>)
 8005d48:	f7fe ff12 	bl	8004b70 <HAL_UART_Receive_DMA>


		/*Inicio mis variables y FLAGS*/
	  status[0]= INITIALIZATION;
 8005d4c:	4b16      	ldr	r3, [pc, #88]	; (8005da8 <mysystem_start+0xc4>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	801a      	strh	r2, [r3, #0]
	  status[1]= INITIALIZATION;
 8005d52:	4b15      	ldr	r3, [pc, #84]	; (8005da8 <mysystem_start+0xc4>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	805a      	strh	r2, [r3, #2]
	  FLAG_OP=0;
 8005d58:	4b14      	ldr	r3, [pc, #80]	; (8005dac <mysystem_start+0xc8>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	701a      	strb	r2, [r3, #0]
	  FLAG_CAN=0;
 8005d5e:	4b14      	ldr	r3, [pc, #80]	; (8005db0 <mysystem_start+0xcc>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]

	  uint8_t i;

	  /// esto es para prueba con software, se tiene que borrar
	  for(i=0;i<18;i++)
 8005d64:	2300      	movs	r3, #0
 8005d66:	71fb      	strb	r3, [r7, #7]
 8005d68:	e008      	b.n	8005d7c <mysystem_start+0x98>
	  {
		  info_motores[i]=0xFFFF;
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
 8005d6c:	4a11      	ldr	r2, [pc, #68]	; (8005db4 <mysystem_start+0xd0>)
 8005d6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005d72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(i=0;i<18;i++)
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	71fb      	strb	r3, [r7, #7]
 8005d7c:	79fb      	ldrb	r3, [r7, #7]
 8005d7e:	2b11      	cmp	r3, #17
 8005d80:	d9f3      	bls.n	8005d6a <mysystem_start+0x86>
	  }

}
 8005d82:	bf00      	nop
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	2000032c 	.word	0x2000032c
 8005d90:	200000d4 	.word	0x200000d4
 8005d94:	20000048 	.word	0x20000048
 8005d98:	20000244 	.word	0x20000244
 8005d9c:	200002ec 	.word	0x200002ec
 8005da0:	20000098 	.word	0x20000098
 8005da4:	2000015c 	.word	0x2000015c
 8005da8:	2000009c 	.word	0x2000009c
 8005dac:	2000003c 	.word	0x2000003c
 8005db0:	2000003d 	.word	0x2000003d
 8005db4:	20000054 	.word	0x20000054

08005db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005dbc:	f7fa fdfa 	bl	80009b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005dc0:	f000 f82e 	bl	8005e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005dc4:	f000 fa04 	bl	80061d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8005dc8:	f000 f9c8 	bl	800615c <MX_DMA_Init>
  MX_CAN1_Init();
 8005dcc:	f000 f912 	bl	8005ff4 <MX_CAN1_Init>
  MX_ADC1_Init();
 8005dd0:	f000 f8b0 	bl	8005f34 <MX_ADC1_Init>
  MX_TIM2_Init();
 8005dd4:	f000 f944 	bl	8006060 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8005dd8:	f000 f990 	bl	80060fc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  mysystem_start();
 8005ddc:	f7ff ff82 	bl	8005ce4 <mysystem_start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
      {
	  direction=ADC_val[1];
 8005de0:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <main+0x58>)
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	461a      	mov	r2, r3
 8005de6:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <main+0x5c>)
 8005de8:	601a      	str	r2, [r3, #0]
	  throttle=ADC_val[0];
 8005dea:	4b09      	ldr	r3, [pc, #36]	; (8005e10 <main+0x58>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <main+0x60>)
 8005df2:	601a      	str	r2, [r3, #0]
	  brake=0;
 8005df4:	4b09      	ldr	r3, [pc, #36]	; (8005e1c <main+0x64>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]

	  control_motors(throttle,direction,brake);
 8005dfa:	4b07      	ldr	r3, [pc, #28]	; (8005e18 <main+0x60>)
 8005dfc:	6818      	ldr	r0, [r3, #0]
 8005dfe:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <main+0x5c>)
 8005e00:	6819      	ldr	r1, [r3, #0]
 8005e02:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <main+0x64>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	f7ff fdda 	bl	80059c0 <control_motors>
	  direction=ADC_val[1];
 8005e0c:	e7e8      	b.n	8005de0 <main+0x28>
 8005e0e:	bf00      	nop
 8005e10:	20000048 	.word	0x20000048
 8005e14:	20000240 	.word	0x20000240
 8005e18:	2000023c 	.word	0x2000023c
 8005e1c:	20000354 	.word	0x20000354

08005e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b0b8      	sub	sp, #224	; 0xe0
 8005e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e26:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005e2a:	2234      	movs	r2, #52	; 0x34
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fdd6 	bl	80069e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e34:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	605a      	str	r2, [r3, #4]
 8005e3e:	609a      	str	r2, [r3, #8]
 8005e40:	60da      	str	r2, [r3, #12]
 8005e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005e44:	f107 0308 	add.w	r3, r7, #8
 8005e48:	2290      	movs	r2, #144	; 0x90
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 fdc7 	bl	80069e0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e52:	4b36      	ldr	r3, [pc, #216]	; (8005f2c <SystemClock_Config+0x10c>)
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	4a35      	ldr	r2, [pc, #212]	; (8005f2c <SystemClock_Config+0x10c>)
 8005e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e5e:	4b33      	ldr	r3, [pc, #204]	; (8005f2c <SystemClock_Config+0x10c>)
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e66:	607b      	str	r3, [r7, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005e6a:	4b31      	ldr	r3, [pc, #196]	; (8005f30 <SystemClock_Config+0x110>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005e72:	4a2f      	ldr	r2, [pc, #188]	; (8005f30 <SystemClock_Config+0x110>)
 8005e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	4b2d      	ldr	r3, [pc, #180]	; (8005f30 <SystemClock_Config+0x110>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e82:	603b      	str	r3, [r7, #0]
 8005e84:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005e86:	2301      	movs	r3, #1
 8005e88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e94:	2302      	movs	r3, #2
 8005e96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005e9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005ea2:	2304      	movs	r3, #4
 8005ea4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8005ea8:	2360      	movs	r3, #96	; 0x60
 8005eaa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005eae:	2302      	movs	r3, #2
 8005eb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005eb4:	2304      	movs	r3, #4
 8005eb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005eba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fd f878 	bl	8002fb4 <HAL_RCC_OscConfig>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005eca:	f000 fa09 	bl	80062e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ece:	230f      	movs	r3, #15
 8005ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005eda:	2300      	movs	r3, #0
 8005edc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005ee0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005ee4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8005ee8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005eec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005ef0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005ef4:	2103      	movs	r1, #3
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fd fb0a 	bl	8003510 <HAL_RCC_ClockConfig>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8005f02:	f000 f9ed 	bl	80062e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005f06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f0a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005f10:	f107 0308 	add.w	r3, r7, #8
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fd fcf3 	bl	8003900 <HAL_RCCEx_PeriphCLKConfig>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8005f20:	f000 f9de 	bl	80062e0 <Error_Handler>
  }
}
 8005f24:	bf00      	nop
 8005f26:	37e0      	adds	r7, #224	; 0xe0
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	40023800 	.word	0x40023800
 8005f30:	40007000 	.word	0x40007000

08005f34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005f3a:	463b      	mov	r3, r7
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	605a      	str	r2, [r3, #4]
 8005f42:	609a      	str	r2, [r3, #8]
 8005f44:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8005f46:	4b28      	ldr	r3, [pc, #160]	; (8005fe8 <MX_ADC1_Init+0xb4>)
 8005f48:	4a28      	ldr	r2, [pc, #160]	; (8005fec <MX_ADC1_Init+0xb8>)
 8005f4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8005f4c:	4b26      	ldr	r3, [pc, #152]	; (8005fe8 <MX_ADC1_Init+0xb4>)
 8005f4e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005f52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005f54:	4b24      	ldr	r3, [pc, #144]	; (8005fe8 <MX_ADC1_Init+0xb4>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005f5a:	4b23      	ldr	r3, [pc, #140]	; (8005fe8 <MX_ADC1_Init+0xb4>)
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005f60:	4b21      	ldr	r3, [pc, #132]	; (8005fe8 <MX_ADC1_Init+0xb4>)
 8005f62:	2201      	movs	r2, #1
 8005f64:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005f66:	4b20      	ldr	r3, [pc, #128]	; (8005fe8 <MX_ADC1_Init+0xb4>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005f6e:	4b1e      	ldr	r3, [pc, #120]	; (8005fe8 <MX_ADC1_Init+0xb4>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005f74:	4b1c      	ldr	r3, [pc, #112]	; (8005fe8 <MX_ADC1_Init+0xb4>)
 8005f76:	4a1e      	ldr	r2, [pc, #120]	; (8005ff0 <MX_ADC1_Init+0xbc>)
 8005f78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005f7a:	4b1b      	ldr	r3, [pc, #108]	; (8005fe8 <MX_ADC1_Init+0xb4>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8005f80:	4b19      	ldr	r3, [pc, #100]	; (8005fe8 <MX_ADC1_Init+0xb4>)
 8005f82:	2202      	movs	r2, #2
 8005f84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005f86:	4b18      	ldr	r3, [pc, #96]	; (8005fe8 <MX_ADC1_Init+0xb4>)
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005f8e:	4b16      	ldr	r3, [pc, #88]	; (8005fe8 <MX_ADC1_Init+0xb4>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005f94:	4814      	ldr	r0, [pc, #80]	; (8005fe8 <MX_ADC1_Init+0xb4>)
 8005f96:	f7fa fd6b 	bl	8000a70 <HAL_ADC_Init>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8005fa0:	f000 f99e 	bl	80062e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005fa4:	2306      	movs	r3, #6
 8005fa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8005fac:	2301      	movs	r3, #1
 8005fae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005fb0:	463b      	mov	r3, r7
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	480c      	ldr	r0, [pc, #48]	; (8005fe8 <MX_ADC1_Init+0xb4>)
 8005fb6:	f7fa fff7 	bl	8000fa8 <HAL_ADC_ConfigChannel>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8005fc0:	f000 f98e 	bl	80062e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005fc4:	2309      	movs	r3, #9
 8005fc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005fcc:	463b      	mov	r3, r7
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4805      	ldr	r0, [pc, #20]	; (8005fe8 <MX_ADC1_Init+0xb4>)
 8005fd2:	f7fa ffe9 	bl	8000fa8 <HAL_ADC_ConfigChannel>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8005fdc:	f000 f980 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005fe0:	bf00      	nop
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	20000244 	.word	0x20000244
 8005fec:	40012000 	.word	0x40012000
 8005ff0:	0f000001 	.word	0x0f000001

08005ff4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8005ff8:	4b17      	ldr	r3, [pc, #92]	; (8006058 <MX_CAN1_Init+0x64>)
 8005ffa:	4a18      	ldr	r2, [pc, #96]	; (800605c <MX_CAN1_Init+0x68>)
 8005ffc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8005ffe:	4b16      	ldr	r3, [pc, #88]	; (8006058 <MX_CAN1_Init+0x64>)
 8006000:	2203      	movs	r2, #3
 8006002:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006004:	4b14      	ldr	r3, [pc, #80]	; (8006058 <MX_CAN1_Init+0x64>)
 8006006:	2200      	movs	r2, #0
 8006008:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800600a:	4b13      	ldr	r3, [pc, #76]	; (8006058 <MX_CAN1_Init+0x64>)
 800600c:	2200      	movs	r2, #0
 800600e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8006010:	4b11      	ldr	r3, [pc, #68]	; (8006058 <MX_CAN1_Init+0x64>)
 8006012:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8006016:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8006018:	4b0f      	ldr	r3, [pc, #60]	; (8006058 <MX_CAN1_Init+0x64>)
 800601a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800601e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006020:	4b0d      	ldr	r3, [pc, #52]	; (8006058 <MX_CAN1_Init+0x64>)
 8006022:	2200      	movs	r2, #0
 8006024:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8006026:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <MX_CAN1_Init+0x64>)
 8006028:	2200      	movs	r2, #0
 800602a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 800602c:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <MX_CAN1_Init+0x64>)
 800602e:	2201      	movs	r2, #1
 8006030:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8006032:	4b09      	ldr	r3, [pc, #36]	; (8006058 <MX_CAN1_Init+0x64>)
 8006034:	2201      	movs	r2, #1
 8006036:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006038:	4b07      	ldr	r3, [pc, #28]	; (8006058 <MX_CAN1_Init+0x64>)
 800603a:	2200      	movs	r2, #0
 800603c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800603e:	4b06      	ldr	r3, [pc, #24]	; (8006058 <MX_CAN1_Init+0x64>)
 8006040:	2200      	movs	r2, #0
 8006042:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006044:	4804      	ldr	r0, [pc, #16]	; (8006058 <MX_CAN1_Init+0x64>)
 8006046:	f7fb fa7f 	bl	8001548 <HAL_CAN_Init>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8006050:	f000 f946 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8006054:	bf00      	nop
 8006056:	bd80      	pop	{r7, pc}
 8006058:	2000032c 	.word	0x2000032c
 800605c:	40006400 	.word	0x40006400

08006060 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b088      	sub	sp, #32
 8006064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006066:	f107 0310 	add.w	r3, r7, #16
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	605a      	str	r2, [r3, #4]
 8006070:	609a      	str	r2, [r3, #8]
 8006072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006074:	1d3b      	adds	r3, r7, #4
 8006076:	2200      	movs	r2, #0
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	605a      	str	r2, [r3, #4]
 800607c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800607e:	4b1e      	ldr	r3, [pc, #120]	; (80060f8 <MX_TIM2_Init+0x98>)
 8006080:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006084:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 8006086:	4b1c      	ldr	r3, [pc, #112]	; (80060f8 <MX_TIM2_Init+0x98>)
 8006088:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800608c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800608e:	4b1a      	ldr	r3, [pc, #104]	; (80060f8 <MX_TIM2_Init+0x98>)
 8006090:	2200      	movs	r2, #0
 8006092:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8006094:	4b18      	ldr	r3, [pc, #96]	; (80060f8 <MX_TIM2_Init+0x98>)
 8006096:	f240 12f3 	movw	r2, #499	; 0x1f3
 800609a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800609c:	4b16      	ldr	r3, [pc, #88]	; (80060f8 <MX_TIM2_Init+0x98>)
 800609e:	2200      	movs	r2, #0
 80060a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060a2:	4b15      	ldr	r3, [pc, #84]	; (80060f8 <MX_TIM2_Init+0x98>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80060a8:	4813      	ldr	r0, [pc, #76]	; (80060f8 <MX_TIM2_Init+0x98>)
 80060aa:	f7fe f84f 	bl	800414c <HAL_TIM_Base_Init>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80060b4:	f000 f914 	bl	80062e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80060b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80060be:	f107 0310 	add.w	r3, r7, #16
 80060c2:	4619      	mov	r1, r3
 80060c4:	480c      	ldr	r0, [pc, #48]	; (80060f8 <MX_TIM2_Init+0x98>)
 80060c6:	f7fe f9b7 	bl	8004438 <HAL_TIM_ConfigClockSource>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80060d0:	f000 f906 	bl	80062e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80060d4:	2300      	movs	r3, #0
 80060d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80060dc:	1d3b      	adds	r3, r7, #4
 80060de:	4619      	mov	r1, r3
 80060e0:	4805      	ldr	r0, [pc, #20]	; (80060f8 <MX_TIM2_Init+0x98>)
 80060e2:	f7fe fbcf 	bl	8004884 <HAL_TIMEx_MasterConfigSynchronization>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80060ec:	f000 f8f8 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80060f0:	bf00      	nop
 80060f2:	3720      	adds	r7, #32
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	200002ec 	.word	0x200002ec

080060fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006100:	4b14      	ldr	r3, [pc, #80]	; (8006154 <MX_USART3_UART_Init+0x58>)
 8006102:	4a15      	ldr	r2, [pc, #84]	; (8006158 <MX_USART3_UART_Init+0x5c>)
 8006104:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006106:	4b13      	ldr	r3, [pc, #76]	; (8006154 <MX_USART3_UART_Init+0x58>)
 8006108:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800610c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800610e:	4b11      	ldr	r3, [pc, #68]	; (8006154 <MX_USART3_UART_Init+0x58>)
 8006110:	2200      	movs	r2, #0
 8006112:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006114:	4b0f      	ldr	r3, [pc, #60]	; (8006154 <MX_USART3_UART_Init+0x58>)
 8006116:	2200      	movs	r2, #0
 8006118:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800611a:	4b0e      	ldr	r3, [pc, #56]	; (8006154 <MX_USART3_UART_Init+0x58>)
 800611c:	2200      	movs	r2, #0
 800611e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006120:	4b0c      	ldr	r3, [pc, #48]	; (8006154 <MX_USART3_UART_Init+0x58>)
 8006122:	220c      	movs	r2, #12
 8006124:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006126:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <MX_USART3_UART_Init+0x58>)
 8006128:	2200      	movs	r2, #0
 800612a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800612c:	4b09      	ldr	r3, [pc, #36]	; (8006154 <MX_USART3_UART_Init+0x58>)
 800612e:	2200      	movs	r2, #0
 8006130:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006132:	4b08      	ldr	r3, [pc, #32]	; (8006154 <MX_USART3_UART_Init+0x58>)
 8006134:	2200      	movs	r2, #0
 8006136:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006138:	4b06      	ldr	r3, [pc, #24]	; (8006154 <MX_USART3_UART_Init+0x58>)
 800613a:	2200      	movs	r2, #0
 800613c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800613e:	4805      	ldr	r0, [pc, #20]	; (8006154 <MX_USART3_UART_Init+0x58>)
 8006140:	f7fe fc4c 	bl	80049dc <HAL_UART_Init>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800614a:	f000 f8c9 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800614e:	bf00      	nop
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	2000015c 	.word	0x2000015c
 8006158:	40004800 	.word	0x40004800

0800615c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006162:	4b1a      	ldr	r3, [pc, #104]	; (80061cc <MX_DMA_Init+0x70>)
 8006164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006166:	4a19      	ldr	r2, [pc, #100]	; (80061cc <MX_DMA_Init+0x70>)
 8006168:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800616c:	6313      	str	r3, [r2, #48]	; 0x30
 800616e:	4b17      	ldr	r3, [pc, #92]	; (80061cc <MX_DMA_Init+0x70>)
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006176:	607b      	str	r3, [r7, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800617a:	4b14      	ldr	r3, [pc, #80]	; (80061cc <MX_DMA_Init+0x70>)
 800617c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617e:	4a13      	ldr	r2, [pc, #76]	; (80061cc <MX_DMA_Init+0x70>)
 8006180:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006184:	6313      	str	r3, [r2, #48]	; 0x30
 8006186:	4b11      	ldr	r3, [pc, #68]	; (80061cc <MX_DMA_Init+0x70>)
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8006192:	2200      	movs	r2, #0
 8006194:	2100      	movs	r1, #0
 8006196:	200c      	movs	r0, #12
 8006198:	f7fc f947 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800619c:	200c      	movs	r0, #12
 800619e:	f7fc f960 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80061a2:	2200      	movs	r2, #0
 80061a4:	2100      	movs	r1, #0
 80061a6:	200e      	movs	r0, #14
 80061a8:	f7fc f93f 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80061ac:	200e      	movs	r0, #14
 80061ae:	f7fc f958 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80061b2:	2200      	movs	r2, #0
 80061b4:	2100      	movs	r1, #0
 80061b6:	2038      	movs	r0, #56	; 0x38
 80061b8:	f7fc f937 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80061bc:	2038      	movs	r0, #56	; 0x38
 80061be:	f7fc f950 	bl	8002462 <HAL_NVIC_EnableIRQ>

}
 80061c2:	bf00      	nop
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	40023800 	.word	0x40023800

080061d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08a      	sub	sp, #40	; 0x28
 80061d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061d6:	f107 0314 	add.w	r3, r7, #20
 80061da:	2200      	movs	r2, #0
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	605a      	str	r2, [r3, #4]
 80061e0:	609a      	str	r2, [r3, #8]
 80061e2:	60da      	str	r2, [r3, #12]
 80061e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061e6:	4b39      	ldr	r3, [pc, #228]	; (80062cc <MX_GPIO_Init+0xfc>)
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	4a38      	ldr	r2, [pc, #224]	; (80062cc <MX_GPIO_Init+0xfc>)
 80061ec:	f043 0304 	orr.w	r3, r3, #4
 80061f0:	6313      	str	r3, [r2, #48]	; 0x30
 80061f2:	4b36      	ldr	r3, [pc, #216]	; (80062cc <MX_GPIO_Init+0xfc>)
 80061f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	613b      	str	r3, [r7, #16]
 80061fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80061fe:	4b33      	ldr	r3, [pc, #204]	; (80062cc <MX_GPIO_Init+0xfc>)
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	4a32      	ldr	r2, [pc, #200]	; (80062cc <MX_GPIO_Init+0xfc>)
 8006204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006208:	6313      	str	r3, [r2, #48]	; 0x30
 800620a:	4b30      	ldr	r3, [pc, #192]	; (80062cc <MX_GPIO_Init+0xfc>)
 800620c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006216:	4b2d      	ldr	r3, [pc, #180]	; (80062cc <MX_GPIO_Init+0xfc>)
 8006218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621a:	4a2c      	ldr	r2, [pc, #176]	; (80062cc <MX_GPIO_Init+0xfc>)
 800621c:	f043 0301 	orr.w	r3, r3, #1
 8006220:	6313      	str	r3, [r2, #48]	; 0x30
 8006222:	4b2a      	ldr	r3, [pc, #168]	; (80062cc <MX_GPIO_Init+0xfc>)
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	60bb      	str	r3, [r7, #8]
 800622c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800622e:	4b27      	ldr	r3, [pc, #156]	; (80062cc <MX_GPIO_Init+0xfc>)
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	4a26      	ldr	r2, [pc, #152]	; (80062cc <MX_GPIO_Init+0xfc>)
 8006234:	f043 0302 	orr.w	r3, r3, #2
 8006238:	6313      	str	r3, [r2, #48]	; 0x30
 800623a:	4b24      	ldr	r3, [pc, #144]	; (80062cc <MX_GPIO_Init+0xfc>)
 800623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	607b      	str	r3, [r7, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006246:	4b21      	ldr	r3, [pc, #132]	; (80062cc <MX_GPIO_Init+0xfc>)
 8006248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624a:	4a20      	ldr	r2, [pc, #128]	; (80062cc <MX_GPIO_Init+0xfc>)
 800624c:	f043 0308 	orr.w	r3, r3, #8
 8006250:	6313      	str	r3, [r2, #48]	; 0x30
 8006252:	4b1e      	ldr	r3, [pc, #120]	; (80062cc <MX_GPIO_Init+0xfc>)
 8006254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006256:	f003 0308 	and.w	r3, r3, #8
 800625a:	603b      	str	r3, [r7, #0]
 800625c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7, GPIO_PIN_RESET);
 800625e:	2200      	movs	r2, #0
 8006260:	f24c 0181 	movw	r1, #49281	; 0xc081
 8006264:	481a      	ldr	r0, [pc, #104]	; (80062d0 <MX_GPIO_Init+0x100>)
 8006266:	f7fc fe71 	bl	8002f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800626a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800626e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006270:	4b18      	ldr	r3, [pc, #96]	; (80062d4 <MX_GPIO_Init+0x104>)
 8006272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006274:	2300      	movs	r3, #0
 8006276:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006278:	f107 0314 	add.w	r3, r7, #20
 800627c:	4619      	mov	r1, r3
 800627e:	4816      	ldr	r0, [pc, #88]	; (80062d8 <MX_GPIO_Init+0x108>)
 8006280:	f7fc fca2 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006284:	230c      	movs	r3, #12
 8006286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006288:	2302      	movs	r3, #2
 800628a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800628c:	2300      	movs	r3, #0
 800628e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006290:	2303      	movs	r3, #3
 8006292:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006294:	2307      	movs	r3, #7
 8006296:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006298:	f107 0314 	add.w	r3, r7, #20
 800629c:	4619      	mov	r1, r3
 800629e:	480f      	ldr	r0, [pc, #60]	; (80062dc <MX_GPIO_Init+0x10c>)
 80062a0:	f7fc fc92 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB15 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7;
 80062a4:	f24c 0381 	movw	r3, #49281	; 0xc081
 80062a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062aa:	2301      	movs	r3, #1
 80062ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062b2:	2300      	movs	r3, #0
 80062b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062b6:	f107 0314 	add.w	r3, r7, #20
 80062ba:	4619      	mov	r1, r3
 80062bc:	4804      	ldr	r0, [pc, #16]	; (80062d0 <MX_GPIO_Init+0x100>)
 80062be:	f7fc fc83 	bl	8002bc8 <HAL_GPIO_Init>

}
 80062c2:	bf00      	nop
 80062c4:	3728      	adds	r7, #40	; 0x28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	40023800 	.word	0x40023800
 80062d0:	40020400 	.word	0x40020400
 80062d4:	10110000 	.word	0x10110000
 80062d8:	40020800 	.word	0x40020800
 80062dc:	40020000 	.word	0x40020000

080062e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	// enciendo pin rojo si hay algun error
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80062e4:	2201      	movs	r2, #1
 80062e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80062ea:	4802      	ldr	r0, [pc, #8]	; (80062f4 <Error_Handler+0x14>)
 80062ec:	f7fc fe2e 	bl	8002f4c <HAL_GPIO_WritePin>
	}*/

  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80062f0:	bf00      	nop
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	40020400 	.word	0x40020400

080062f8 <preparo_data_uart>:
extern uint16_t info_motores[18];
extern int throttle,direction,brake;

//velocidad de motor 1,motor 2, crr 1, crr 2, temp 1 , temp 2 ,torq1 , torq2
void preparo_data_uart(uint16_t vector[])
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
	vector[0]=info_motores[0];		//Velocidad motor 1
 8006300:	4b21      	ldr	r3, [pc, #132]	; (8006388 <preparo_data_uart+0x90>)
 8006302:	881a      	ldrh	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	801a      	strh	r2, [r3, #0]
	vector[1]=info_motores[1];		//Velocidad motor 2
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3302      	adds	r3, #2
 800630c:	4a1e      	ldr	r2, [pc, #120]	; (8006388 <preparo_data_uart+0x90>)
 800630e:	8852      	ldrh	r2, [r2, #2]
 8006310:	801a      	strh	r2, [r3, #0]
	vector[2]=info_motores[8];		//corriente motor 1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3304      	adds	r3, #4
 8006316:	4a1c      	ldr	r2, [pc, #112]	; (8006388 <preparo_data_uart+0x90>)
 8006318:	8a12      	ldrh	r2, [r2, #16]
 800631a:	801a      	strh	r2, [r3, #0]
	vector[3]=info_motores[9];		//corriente motor 2
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3306      	adds	r3, #6
 8006320:	4a19      	ldr	r2, [pc, #100]	; (8006388 <preparo_data_uart+0x90>)
 8006322:	8a52      	ldrh	r2, [r2, #18]
 8006324:	801a      	strh	r2, [r3, #0]
	vector[4]=info_motores[6];		//temperatura motor 1
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	3308      	adds	r3, #8
 800632a:	4a17      	ldr	r2, [pc, #92]	; (8006388 <preparo_data_uart+0x90>)
 800632c:	8992      	ldrh	r2, [r2, #12]
 800632e:	801a      	strh	r2, [r3, #0]
	vector[5]=info_motores[7];		//temperatura motor 2
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	330a      	adds	r3, #10
 8006334:	4a14      	ldr	r2, [pc, #80]	; (8006388 <preparo_data_uart+0x90>)
 8006336:	89d2      	ldrh	r2, [r2, #14]
 8006338:	801a      	strh	r2, [r3, #0]
	vector[6]=info_motores[10];		//torque motor 1
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	330c      	adds	r3, #12
 800633e:	4a12      	ldr	r2, [pc, #72]	; (8006388 <preparo_data_uart+0x90>)
 8006340:	8a92      	ldrh	r2, [r2, #20]
 8006342:	801a      	strh	r2, [r3, #0]
	vector[7]=info_motores[11];		//torque motor 2
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	330e      	adds	r3, #14
 8006348:	4a0f      	ldr	r2, [pc, #60]	; (8006388 <preparo_data_uart+0x90>)
 800634a:	8ad2      	ldrh	r2, [r2, #22]
 800634c:	801a      	strh	r2, [r3, #0]
	vector[8]=throttle;				//Posicion acelerador
 800634e:	4b0f      	ldr	r3, [pc, #60]	; (800638c <preparo_data_uart+0x94>)
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3310      	adds	r3, #16
 8006356:	b292      	uxth	r2, r2
 8006358:	801a      	strh	r2, [r3, #0]
	vector[9]=brake;				//Freno
 800635a:	4b0d      	ldr	r3, [pc, #52]	; (8006390 <preparo_data_uart+0x98>)
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3312      	adds	r3, #18
 8006362:	b292      	uxth	r2, r2
 8006364:	801a      	strh	r2, [r3, #0]
	vector[10]=direction;			//Volante
 8006366:	4b0b      	ldr	r3, [pc, #44]	; (8006394 <preparo_data_uart+0x9c>)
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3314      	adds	r3, #20
 800636e:	b292      	uxth	r2, r2
 8006370:	801a      	strh	r2, [r3, #0]
	vector[11]=info_motores[14];	//VELOCIDAD ACTUAL DEL AUTO, VALOR INVENTADO, MODIFICAR.
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3316      	adds	r3, #22
 8006376:	4a04      	ldr	r2, [pc, #16]	; (8006388 <preparo_data_uart+0x90>)
 8006378:	8b92      	ldrh	r2, [r2, #28]
 800637a:	801a      	strh	r2, [r3, #0]
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	20000054 	.word	0x20000054
 800638c:	2000023c 	.word	0x2000023c
 8006390:	20000354 	.word	0x20000354
 8006394:	20000240 	.word	0x20000240

08006398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800639e:	4b0f      	ldr	r3, [pc, #60]	; (80063dc <HAL_MspInit+0x44>)
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	4a0e      	ldr	r2, [pc, #56]	; (80063dc <HAL_MspInit+0x44>)
 80063a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a8:	6413      	str	r3, [r2, #64]	; 0x40
 80063aa:	4b0c      	ldr	r3, [pc, #48]	; (80063dc <HAL_MspInit+0x44>)
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b2:	607b      	str	r3, [r7, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063b6:	4b09      	ldr	r3, [pc, #36]	; (80063dc <HAL_MspInit+0x44>)
 80063b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ba:	4a08      	ldr	r2, [pc, #32]	; (80063dc <HAL_MspInit+0x44>)
 80063bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063c0:	6453      	str	r3, [r2, #68]	; 0x44
 80063c2:	4b06      	ldr	r3, [pc, #24]	; (80063dc <HAL_MspInit+0x44>)
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063ca:	603b      	str	r3, [r7, #0]
 80063cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	40023800 	.word	0x40023800

080063e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08c      	sub	sp, #48	; 0x30
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063e8:	f107 031c 	add.w	r3, r7, #28
 80063ec:	2200      	movs	r2, #0
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	605a      	str	r2, [r3, #4]
 80063f2:	609a      	str	r2, [r3, #8]
 80063f4:	60da      	str	r2, [r3, #12]
 80063f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a49      	ldr	r2, [pc, #292]	; (8006524 <HAL_ADC_MspInit+0x144>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	f040 808c 	bne.w	800651c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006404:	4b48      	ldr	r3, [pc, #288]	; (8006528 <HAL_ADC_MspInit+0x148>)
 8006406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006408:	4a47      	ldr	r2, [pc, #284]	; (8006528 <HAL_ADC_MspInit+0x148>)
 800640a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800640e:	6453      	str	r3, [r2, #68]	; 0x44
 8006410:	4b45      	ldr	r3, [pc, #276]	; (8006528 <HAL_ADC_MspInit+0x148>)
 8006412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800641c:	4b42      	ldr	r3, [pc, #264]	; (8006528 <HAL_ADC_MspInit+0x148>)
 800641e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006420:	4a41      	ldr	r2, [pc, #260]	; (8006528 <HAL_ADC_MspInit+0x148>)
 8006422:	f043 0304 	orr.w	r3, r3, #4
 8006426:	6313      	str	r3, [r2, #48]	; 0x30
 8006428:	4b3f      	ldr	r3, [pc, #252]	; (8006528 <HAL_ADC_MspInit+0x148>)
 800642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006434:	4b3c      	ldr	r3, [pc, #240]	; (8006528 <HAL_ADC_MspInit+0x148>)
 8006436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006438:	4a3b      	ldr	r2, [pc, #236]	; (8006528 <HAL_ADC_MspInit+0x148>)
 800643a:	f043 0301 	orr.w	r3, r3, #1
 800643e:	6313      	str	r3, [r2, #48]	; 0x30
 8006440:	4b39      	ldr	r3, [pc, #228]	; (8006528 <HAL_ADC_MspInit+0x148>)
 8006442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	613b      	str	r3, [r7, #16]
 800644a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800644c:	4b36      	ldr	r3, [pc, #216]	; (8006528 <HAL_ADC_MspInit+0x148>)
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	4a35      	ldr	r2, [pc, #212]	; (8006528 <HAL_ADC_MspInit+0x148>)
 8006452:	f043 0302 	orr.w	r3, r3, #2
 8006456:	6313      	str	r3, [r2, #48]	; 0x30
 8006458:	4b33      	ldr	r3, [pc, #204]	; (8006528 <HAL_ADC_MspInit+0x148>)
 800645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006464:	2301      	movs	r3, #1
 8006466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006468:	2303      	movs	r3, #3
 800646a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800646c:	2300      	movs	r3, #0
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006470:	f107 031c 	add.w	r3, r7, #28
 8006474:	4619      	mov	r1, r3
 8006476:	482d      	ldr	r0, [pc, #180]	; (800652c <HAL_ADC_MspInit+0x14c>)
 8006478:	f7fc fba6 	bl	8002bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800647c:	2340      	movs	r3, #64	; 0x40
 800647e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006480:	2303      	movs	r3, #3
 8006482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006484:	2300      	movs	r3, #0
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006488:	f107 031c 	add.w	r3, r7, #28
 800648c:	4619      	mov	r1, r3
 800648e:	4828      	ldr	r0, [pc, #160]	; (8006530 <HAL_ADC_MspInit+0x150>)
 8006490:	f7fc fb9a 	bl	8002bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006494:	2302      	movs	r3, #2
 8006496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006498:	2303      	movs	r3, #3
 800649a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800649c:	2300      	movs	r3, #0
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064a0:	f107 031c 	add.w	r3, r7, #28
 80064a4:	4619      	mov	r1, r3
 80064a6:	4823      	ldr	r0, [pc, #140]	; (8006534 <HAL_ADC_MspInit+0x154>)
 80064a8:	f7fc fb8e 	bl	8002bc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80064ac:	4b22      	ldr	r3, [pc, #136]	; (8006538 <HAL_ADC_MspInit+0x158>)
 80064ae:	4a23      	ldr	r2, [pc, #140]	; (800653c <HAL_ADC_MspInit+0x15c>)
 80064b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80064b2:	4b21      	ldr	r3, [pc, #132]	; (8006538 <HAL_ADC_MspInit+0x158>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064b8:	4b1f      	ldr	r3, [pc, #124]	; (8006538 <HAL_ADC_MspInit+0x158>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80064be:	4b1e      	ldr	r3, [pc, #120]	; (8006538 <HAL_ADC_MspInit+0x158>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80064c4:	4b1c      	ldr	r3, [pc, #112]	; (8006538 <HAL_ADC_MspInit+0x158>)
 80064c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80064cc:	4b1a      	ldr	r3, [pc, #104]	; (8006538 <HAL_ADC_MspInit+0x158>)
 80064ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80064d4:	4b18      	ldr	r3, [pc, #96]	; (8006538 <HAL_ADC_MspInit+0x158>)
 80064d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064da:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80064dc:	4b16      	ldr	r3, [pc, #88]	; (8006538 <HAL_ADC_MspInit+0x158>)
 80064de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064e2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80064e4:	4b14      	ldr	r3, [pc, #80]	; (8006538 <HAL_ADC_MspInit+0x158>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064ea:	4b13      	ldr	r3, [pc, #76]	; (8006538 <HAL_ADC_MspInit+0x158>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80064f0:	4811      	ldr	r0, [pc, #68]	; (8006538 <HAL_ADC_MspInit+0x158>)
 80064f2:	f7fb ffd1 	bl	8002498 <HAL_DMA_Init>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 80064fc:	f7ff fef0 	bl	80062e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a0d      	ldr	r2, [pc, #52]	; (8006538 <HAL_ADC_MspInit+0x158>)
 8006504:	639a      	str	r2, [r3, #56]	; 0x38
 8006506:	4a0c      	ldr	r2, [pc, #48]	; (8006538 <HAL_ADC_MspInit+0x158>)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800650c:	2200      	movs	r2, #0
 800650e:	2100      	movs	r1, #0
 8006510:	2012      	movs	r0, #18
 8006512:	f7fb ff8a 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006516:	2012      	movs	r0, #18
 8006518:	f7fb ffa3 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800651c:	bf00      	nop
 800651e:	3730      	adds	r7, #48	; 0x30
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40012000 	.word	0x40012000
 8006528:	40023800 	.word	0x40023800
 800652c:	40020800 	.word	0x40020800
 8006530:	40020000 	.word	0x40020000
 8006534:	40020400 	.word	0x40020400
 8006538:	2000028c 	.word	0x2000028c
 800653c:	40026410 	.word	0x40026410

08006540 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08a      	sub	sp, #40	; 0x28
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006548:	f107 0314 	add.w	r3, r7, #20
 800654c:	2200      	movs	r2, #0
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	605a      	str	r2, [r3, #4]
 8006552:	609a      	str	r2, [r3, #8]
 8006554:	60da      	str	r2, [r3, #12]
 8006556:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a1b      	ldr	r2, [pc, #108]	; (80065cc <HAL_CAN_MspInit+0x8c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d130      	bne.n	80065c4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006562:	4b1b      	ldr	r3, [pc, #108]	; (80065d0 <HAL_CAN_MspInit+0x90>)
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	4a1a      	ldr	r2, [pc, #104]	; (80065d0 <HAL_CAN_MspInit+0x90>)
 8006568:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800656c:	6413      	str	r3, [r2, #64]	; 0x40
 800656e:	4b18      	ldr	r3, [pc, #96]	; (80065d0 <HAL_CAN_MspInit+0x90>)
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006576:	613b      	str	r3, [r7, #16]
 8006578:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800657a:	4b15      	ldr	r3, [pc, #84]	; (80065d0 <HAL_CAN_MspInit+0x90>)
 800657c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657e:	4a14      	ldr	r2, [pc, #80]	; (80065d0 <HAL_CAN_MspInit+0x90>)
 8006580:	f043 0302 	orr.w	r3, r3, #2
 8006584:	6313      	str	r3, [r2, #48]	; 0x30
 8006586:	4b12      	ldr	r3, [pc, #72]	; (80065d0 <HAL_CAN_MspInit+0x90>)
 8006588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006592:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006598:	2302      	movs	r3, #2
 800659a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800659c:	2300      	movs	r3, #0
 800659e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065a0:	2303      	movs	r3, #3
 80065a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80065a4:	2309      	movs	r3, #9
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065a8:	f107 0314 	add.w	r3, r7, #20
 80065ac:	4619      	mov	r1, r3
 80065ae:	4809      	ldr	r0, [pc, #36]	; (80065d4 <HAL_CAN_MspInit+0x94>)
 80065b0:	f7fc fb0a 	bl	8002bc8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80065b4:	2200      	movs	r2, #0
 80065b6:	2100      	movs	r1, #0
 80065b8:	2014      	movs	r0, #20
 80065ba:	f7fb ff36 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80065be:	2014      	movs	r0, #20
 80065c0:	f7fb ff4f 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80065c4:	bf00      	nop
 80065c6:	3728      	adds	r7, #40	; 0x28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	40006400 	.word	0x40006400
 80065d0:	40023800 	.word	0x40023800
 80065d4:	40020400 	.word	0x40020400

080065d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e8:	d113      	bne.n	8006612 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80065ea:	4b0c      	ldr	r3, [pc, #48]	; (800661c <HAL_TIM_Base_MspInit+0x44>)
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	4a0b      	ldr	r2, [pc, #44]	; (800661c <HAL_TIM_Base_MspInit+0x44>)
 80065f0:	f043 0301 	orr.w	r3, r3, #1
 80065f4:	6413      	str	r3, [r2, #64]	; 0x40
 80065f6:	4b09      	ldr	r3, [pc, #36]	; (800661c <HAL_TIM_Base_MspInit+0x44>)
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006602:	2200      	movs	r2, #0
 8006604:	2100      	movs	r1, #0
 8006606:	201c      	movs	r0, #28
 8006608:	f7fb ff0f 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800660c:	201c      	movs	r0, #28
 800660e:	f7fb ff28 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006612:	bf00      	nop
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	40023800 	.word	0x40023800

08006620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08a      	sub	sp, #40	; 0x28
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006628:	f107 0314 	add.w	r3, r7, #20
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	605a      	str	r2, [r3, #4]
 8006632:	609a      	str	r2, [r3, #8]
 8006634:	60da      	str	r2, [r3, #12]
 8006636:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a4a      	ldr	r2, [pc, #296]	; (8006768 <HAL_UART_MspInit+0x148>)
 800663e:	4293      	cmp	r3, r2
 8006640:	f040 808e 	bne.w	8006760 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006644:	4b49      	ldr	r3, [pc, #292]	; (800676c <HAL_UART_MspInit+0x14c>)
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	4a48      	ldr	r2, [pc, #288]	; (800676c <HAL_UART_MspInit+0x14c>)
 800664a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800664e:	6413      	str	r3, [r2, #64]	; 0x40
 8006650:	4b46      	ldr	r3, [pc, #280]	; (800676c <HAL_UART_MspInit+0x14c>)
 8006652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800665c:	4b43      	ldr	r3, [pc, #268]	; (800676c <HAL_UART_MspInit+0x14c>)
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	4a42      	ldr	r2, [pc, #264]	; (800676c <HAL_UART_MspInit+0x14c>)
 8006662:	f043 0308 	orr.w	r3, r3, #8
 8006666:	6313      	str	r3, [r2, #48]	; 0x30
 8006668:	4b40      	ldr	r3, [pc, #256]	; (800676c <HAL_UART_MspInit+0x14c>)
 800666a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666c:	f003 0308 	and.w	r3, r3, #8
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006674:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800667a:	2302      	movs	r3, #2
 800667c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800667e:	2300      	movs	r3, #0
 8006680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006682:	2303      	movs	r3, #3
 8006684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006686:	2307      	movs	r3, #7
 8006688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800668a:	f107 0314 	add.w	r3, r7, #20
 800668e:	4619      	mov	r1, r3
 8006690:	4837      	ldr	r0, [pc, #220]	; (8006770 <HAL_UART_MspInit+0x150>)
 8006692:	f7fc fa99 	bl	8002bc8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006696:	4b37      	ldr	r3, [pc, #220]	; (8006774 <HAL_UART_MspInit+0x154>)
 8006698:	4a37      	ldr	r2, [pc, #220]	; (8006778 <HAL_UART_MspInit+0x158>)
 800669a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800669c:	4b35      	ldr	r3, [pc, #212]	; (8006774 <HAL_UART_MspInit+0x154>)
 800669e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80066a2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066a4:	4b33      	ldr	r3, [pc, #204]	; (8006774 <HAL_UART_MspInit+0x154>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066aa:	4b32      	ldr	r3, [pc, #200]	; (8006774 <HAL_UART_MspInit+0x154>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80066b0:	4b30      	ldr	r3, [pc, #192]	; (8006774 <HAL_UART_MspInit+0x154>)
 80066b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066b6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80066b8:	4b2e      	ldr	r3, [pc, #184]	; (8006774 <HAL_UART_MspInit+0x154>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80066be:	4b2d      	ldr	r3, [pc, #180]	; (8006774 <HAL_UART_MspInit+0x154>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80066c4:	4b2b      	ldr	r3, [pc, #172]	; (8006774 <HAL_UART_MspInit+0x154>)
 80066c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066ca:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80066cc:	4b29      	ldr	r3, [pc, #164]	; (8006774 <HAL_UART_MspInit+0x154>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80066d2:	4b28      	ldr	r3, [pc, #160]	; (8006774 <HAL_UART_MspInit+0x154>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80066d8:	4826      	ldr	r0, [pc, #152]	; (8006774 <HAL_UART_MspInit+0x154>)
 80066da:	f7fb fedd 	bl	8002498 <HAL_DMA_Init>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80066e4:	f7ff fdfc 	bl	80062e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a22      	ldr	r2, [pc, #136]	; (8006774 <HAL_UART_MspInit+0x154>)
 80066ec:	66da      	str	r2, [r3, #108]	; 0x6c
 80066ee:	4a21      	ldr	r2, [pc, #132]	; (8006774 <HAL_UART_MspInit+0x154>)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80066f4:	4b21      	ldr	r3, [pc, #132]	; (800677c <HAL_UART_MspInit+0x15c>)
 80066f6:	4a22      	ldr	r2, [pc, #136]	; (8006780 <HAL_UART_MspInit+0x160>)
 80066f8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80066fa:	4b20      	ldr	r3, [pc, #128]	; (800677c <HAL_UART_MspInit+0x15c>)
 80066fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006700:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006702:	4b1e      	ldr	r3, [pc, #120]	; (800677c <HAL_UART_MspInit+0x15c>)
 8006704:	2240      	movs	r2, #64	; 0x40
 8006706:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006708:	4b1c      	ldr	r3, [pc, #112]	; (800677c <HAL_UART_MspInit+0x15c>)
 800670a:	2200      	movs	r2, #0
 800670c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800670e:	4b1b      	ldr	r3, [pc, #108]	; (800677c <HAL_UART_MspInit+0x15c>)
 8006710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006714:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006716:	4b19      	ldr	r3, [pc, #100]	; (800677c <HAL_UART_MspInit+0x15c>)
 8006718:	2200      	movs	r2, #0
 800671a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800671c:	4b17      	ldr	r3, [pc, #92]	; (800677c <HAL_UART_MspInit+0x15c>)
 800671e:	2200      	movs	r2, #0
 8006720:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006722:	4b16      	ldr	r3, [pc, #88]	; (800677c <HAL_UART_MspInit+0x15c>)
 8006724:	2200      	movs	r2, #0
 8006726:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006728:	4b14      	ldr	r3, [pc, #80]	; (800677c <HAL_UART_MspInit+0x15c>)
 800672a:	2200      	movs	r2, #0
 800672c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800672e:	4b13      	ldr	r3, [pc, #76]	; (800677c <HAL_UART_MspInit+0x15c>)
 8006730:	2200      	movs	r2, #0
 8006732:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006734:	4811      	ldr	r0, [pc, #68]	; (800677c <HAL_UART_MspInit+0x15c>)
 8006736:	f7fb feaf 	bl	8002498 <HAL_DMA_Init>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8006740:	f7ff fdce 	bl	80062e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a0d      	ldr	r2, [pc, #52]	; (800677c <HAL_UART_MspInit+0x15c>)
 8006748:	669a      	str	r2, [r3, #104]	; 0x68
 800674a:	4a0c      	ldr	r2, [pc, #48]	; (800677c <HAL_UART_MspInit+0x15c>)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006750:	2200      	movs	r2, #0
 8006752:	2100      	movs	r1, #0
 8006754:	2027      	movs	r0, #39	; 0x27
 8006756:	f7fb fe68 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800675a:	2027      	movs	r0, #39	; 0x27
 800675c:	f7fb fe81 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006760:	bf00      	nop
 8006762:	3728      	adds	r7, #40	; 0x28
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	40004800 	.word	0x40004800
 800676c:	40023800 	.word	0x40023800
 8006770:	40020c00 	.word	0x40020c00
 8006774:	200000fc 	.word	0x200000fc
 8006778:	40026028 	.word	0x40026028
 800677c:	200001dc 	.word	0x200001dc
 8006780:	40026058 	.word	0x40026058

08006784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006788:	bf00      	nop
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006792:	b480      	push	{r7}
 8006794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006796:	e7fe      	b.n	8006796 <HardFault_Handler+0x4>

08006798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006798:	b480      	push	{r7}
 800679a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800679c:	e7fe      	b.n	800679c <MemManage_Handler+0x4>

0800679e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800679e:	b480      	push	{r7}
 80067a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80067a2:	e7fe      	b.n	80067a2 <BusFault_Handler+0x4>

080067a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80067a8:	e7fe      	b.n	80067a8 <UsageFault_Handler+0x4>

080067aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80067aa:	b480      	push	{r7}
 80067ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80067ae:	bf00      	nop
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80067bc:	bf00      	nop
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80067c6:	b480      	push	{r7}
 80067c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80067ca:	bf00      	nop
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80067d8:	f7fa f92a 	bl	8000a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80067dc:	bf00      	nop
 80067de:	bd80      	pop	{r7, pc}

080067e0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80067e4:	4802      	ldr	r0, [pc, #8]	; (80067f0 <DMA1_Stream1_IRQHandler+0x10>)
 80067e6:	f7fb ff87 	bl	80026f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80067ea:	bf00      	nop
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	200000fc 	.word	0x200000fc

080067f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80067f8:	4802      	ldr	r0, [pc, #8]	; (8006804 <DMA1_Stream3_IRQHandler+0x10>)
 80067fa:	f7fb ff7d 	bl	80026f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80067fe:	bf00      	nop
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	200001dc 	.word	0x200001dc

08006808 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800680c:	4802      	ldr	r0, [pc, #8]	; (8006818 <ADC_IRQHandler+0x10>)
 800680e:	f7fa f973 	bl	8000af8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006812:	bf00      	nop
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	20000244 	.word	0x20000244

0800681c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006820:	4806      	ldr	r0, [pc, #24]	; (800683c <CAN1_RX0_IRQHandler+0x20>)
 8006822:	f7fb faf4 	bl	8001e0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  //inicial
  HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0 , &pRxHeader, buffer_Rx_msg);
 8006826:	4b06      	ldr	r3, [pc, #24]	; (8006840 <CAN1_RX0_IRQHandler+0x24>)
 8006828:	4a06      	ldr	r2, [pc, #24]	; (8006844 <CAN1_RX0_IRQHandler+0x28>)
 800682a:	2100      	movs	r1, #0
 800682c:	4803      	ldr	r0, [pc, #12]	; (800683c <CAN1_RX0_IRQHandler+0x20>)
 800682e:	f7fb f9b6 	bl	8001b9e <HAL_CAN_GetRxMessage>
  FLAG_CAN=1;
 8006832:	4b05      	ldr	r3, [pc, #20]	; (8006848 <CAN1_RX0_IRQHandler+0x2c>)
 8006834:	2201      	movs	r2, #1
 8006836:	701a      	strb	r2, [r3, #0]
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006838:	bf00      	nop
 800683a:	bd80      	pop	{r7, pc}
 800683c:	2000032c 	.word	0x2000032c
 8006840:	20000040 	.word	0x20000040
 8006844:	2000007c 	.word	0x2000007c
 8006848:	2000003d 	.word	0x2000003d

0800684c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	static char now,last;
	now=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8006850:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006854:	4811      	ldr	r0, [pc, #68]	; (800689c <TIM2_IRQHandler+0x50>)
 8006856:	f7fc fb61 	bl	8002f1c <HAL_GPIO_ReadPin>
 800685a:	4603      	mov	r3, r0
 800685c:	461a      	mov	r2, r3
 800685e:	4b10      	ldr	r3, [pc, #64]	; (80068a0 <TIM2_IRQHandler+0x54>)
 8006860:	701a      	strb	r2, [r3, #0]
	if (now==1 && (now^last))   /// Doy un pulso
 8006862:	4b0f      	ldr	r3, [pc, #60]	; (80068a0 <TIM2_IRQHandler+0x54>)
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d10f      	bne.n	800688a <TIM2_IRQHandler+0x3e>
 800686a:	4b0d      	ldr	r3, [pc, #52]	; (80068a0 <TIM2_IRQHandler+0x54>)
 800686c:	781a      	ldrb	r2, [r3, #0]
 800686e:	4b0d      	ldr	r3, [pc, #52]	; (80068a4 <TIM2_IRQHandler+0x58>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d009      	beq.n	800688a <TIM2_IRQHandler+0x3e>
	{
		FLAG_OP = !FLAG_OP;
 8006876:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <TIM2_IRQHandler+0x5c>)
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	bf0c      	ite	eq
 800687e:	2301      	moveq	r3, #1
 8006880:	2300      	movne	r3, #0
 8006882:	b2db      	uxtb	r3, r3
 8006884:	461a      	mov	r2, r3
 8006886:	4b08      	ldr	r3, [pc, #32]	; (80068a8 <TIM2_IRQHandler+0x5c>)
 8006888:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800688a:	4808      	ldr	r0, [pc, #32]	; (80068ac <TIM2_IRQHandler+0x60>)
 800688c:	f7fd fcb4 	bl	80041f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  last=now;
 8006890:	4b03      	ldr	r3, [pc, #12]	; (80068a0 <TIM2_IRQHandler+0x54>)
 8006892:	781a      	ldrb	r2, [r3, #0]
 8006894:	4b03      	ldr	r3, [pc, #12]	; (80068a4 <TIM2_IRQHandler+0x58>)
 8006896:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8006898:	bf00      	nop
 800689a:	bd80      	pop	{r7, pc}
 800689c:	40020800 	.word	0x40020800
 80068a0:	20000038 	.word	0x20000038
 80068a4:	20000039 	.word	0x20000039
 80068a8:	2000003c 	.word	0x2000003c
 80068ac:	200002ec 	.word	0x200002ec

080068b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80068b4:	4802      	ldr	r0, [pc, #8]	; (80068c0 <USART3_IRQHandler+0x10>)
 80068b6:	f7fe f9df 	bl	8004c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80068ba:	bf00      	nop
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	2000015c 	.word	0x2000015c

080068c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80068c8:	4802      	ldr	r0, [pc, #8]	; (80068d4 <DMA2_Stream0_IRQHandler+0x10>)
 80068ca:	f7fb ff15 	bl	80026f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
 // throttle=(int)promedio(ADC_val[0]);
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80068ce:	bf00      	nop
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	2000028c 	.word	0x2000028c

080068d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80068dc:	4b15      	ldr	r3, [pc, #84]	; (8006934 <SystemInit+0x5c>)
 80068de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e2:	4a14      	ldr	r2, [pc, #80]	; (8006934 <SystemInit+0x5c>)
 80068e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80068ec:	4b12      	ldr	r3, [pc, #72]	; (8006938 <SystemInit+0x60>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a11      	ldr	r2, [pc, #68]	; (8006938 <SystemInit+0x60>)
 80068f2:	f043 0301 	orr.w	r3, r3, #1
 80068f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80068f8:	4b0f      	ldr	r3, [pc, #60]	; (8006938 <SystemInit+0x60>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80068fe:	4b0e      	ldr	r3, [pc, #56]	; (8006938 <SystemInit+0x60>)
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	490d      	ldr	r1, [pc, #52]	; (8006938 <SystemInit+0x60>)
 8006904:	4b0d      	ldr	r3, [pc, #52]	; (800693c <SystemInit+0x64>)
 8006906:	4013      	ands	r3, r2
 8006908:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800690a:	4b0b      	ldr	r3, [pc, #44]	; (8006938 <SystemInit+0x60>)
 800690c:	4a0c      	ldr	r2, [pc, #48]	; (8006940 <SystemInit+0x68>)
 800690e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006910:	4b09      	ldr	r3, [pc, #36]	; (8006938 <SystemInit+0x60>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a08      	ldr	r2, [pc, #32]	; (8006938 <SystemInit+0x60>)
 8006916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800691a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800691c:	4b06      	ldr	r3, [pc, #24]	; (8006938 <SystemInit+0x60>)
 800691e:	2200      	movs	r2, #0
 8006920:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006922:	4b04      	ldr	r3, [pc, #16]	; (8006934 <SystemInit+0x5c>)
 8006924:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006928:	609a      	str	r2, [r3, #8]
#endif
}
 800692a:	bf00      	nop
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	e000ed00 	.word	0xe000ed00
 8006938:	40023800 	.word	0x40023800
 800693c:	fef6ffff 	.word	0xfef6ffff
 8006940:	24003010 	.word	0x24003010

08006944 <Reset_Handler>:
 8006944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800697c <LoopFillZerobss+0x14>
 8006948:	2100      	movs	r1, #0
 800694a:	e003      	b.n	8006954 <LoopCopyDataInit>

0800694c <CopyDataInit>:
 800694c:	4b0c      	ldr	r3, [pc, #48]	; (8006980 <LoopFillZerobss+0x18>)
 800694e:	585b      	ldr	r3, [r3, r1]
 8006950:	5043      	str	r3, [r0, r1]
 8006952:	3104      	adds	r1, #4

08006954 <LoopCopyDataInit>:
 8006954:	480b      	ldr	r0, [pc, #44]	; (8006984 <LoopFillZerobss+0x1c>)
 8006956:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <LoopFillZerobss+0x20>)
 8006958:	1842      	adds	r2, r0, r1
 800695a:	429a      	cmp	r2, r3
 800695c:	d3f6      	bcc.n	800694c <CopyDataInit>
 800695e:	4a0b      	ldr	r2, [pc, #44]	; (800698c <LoopFillZerobss+0x24>)
 8006960:	e002      	b.n	8006968 <LoopFillZerobss>

08006962 <FillZerobss>:
 8006962:	2300      	movs	r3, #0
 8006964:	f842 3b04 	str.w	r3, [r2], #4

08006968 <LoopFillZerobss>:
 8006968:	4b09      	ldr	r3, [pc, #36]	; (8006990 <LoopFillZerobss+0x28>)
 800696a:	429a      	cmp	r2, r3
 800696c:	d3f9      	bcc.n	8006962 <FillZerobss>
 800696e:	f7ff ffb3 	bl	80068d8 <SystemInit>
 8006972:	f000 f811 	bl	8006998 <__libc_init_array>
 8006976:	f7ff fa1f 	bl	8005db8 <main>
 800697a:	4770      	bx	lr
 800697c:	20080000 	.word	0x20080000
 8006980:	08006a38 	.word	0x08006a38
 8006984:	20000000 	.word	0x20000000
 8006988:	2000000c 	.word	0x2000000c
 800698c:	2000000c 	.word	0x2000000c
 8006990:	20000358 	.word	0x20000358

08006994 <CAN1_RX1_IRQHandler>:
 8006994:	e7fe      	b.n	8006994 <CAN1_RX1_IRQHandler>
	...

08006998 <__libc_init_array>:
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	4e0d      	ldr	r6, [pc, #52]	; (80069d0 <__libc_init_array+0x38>)
 800699c:	4c0d      	ldr	r4, [pc, #52]	; (80069d4 <__libc_init_array+0x3c>)
 800699e:	1ba4      	subs	r4, r4, r6
 80069a0:	10a4      	asrs	r4, r4, #2
 80069a2:	2500      	movs	r5, #0
 80069a4:	42a5      	cmp	r5, r4
 80069a6:	d109      	bne.n	80069bc <__libc_init_array+0x24>
 80069a8:	4e0b      	ldr	r6, [pc, #44]	; (80069d8 <__libc_init_array+0x40>)
 80069aa:	4c0c      	ldr	r4, [pc, #48]	; (80069dc <__libc_init_array+0x44>)
 80069ac:	f000 f820 	bl	80069f0 <_init>
 80069b0:	1ba4      	subs	r4, r4, r6
 80069b2:	10a4      	asrs	r4, r4, #2
 80069b4:	2500      	movs	r5, #0
 80069b6:	42a5      	cmp	r5, r4
 80069b8:	d105      	bne.n	80069c6 <__libc_init_array+0x2e>
 80069ba:	bd70      	pop	{r4, r5, r6, pc}
 80069bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069c0:	4798      	blx	r3
 80069c2:	3501      	adds	r5, #1
 80069c4:	e7ee      	b.n	80069a4 <__libc_init_array+0xc>
 80069c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069ca:	4798      	blx	r3
 80069cc:	3501      	adds	r5, #1
 80069ce:	e7f2      	b.n	80069b6 <__libc_init_array+0x1e>
 80069d0:	08006a30 	.word	0x08006a30
 80069d4:	08006a30 	.word	0x08006a30
 80069d8:	08006a30 	.word	0x08006a30
 80069dc:	08006a34 	.word	0x08006a34

080069e0 <memset>:
 80069e0:	4402      	add	r2, r0
 80069e2:	4603      	mov	r3, r0
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d100      	bne.n	80069ea <memset+0xa>
 80069e8:	4770      	bx	lr
 80069ea:	f803 1b01 	strb.w	r1, [r3], #1
 80069ee:	e7f9      	b.n	80069e4 <memset+0x4>

080069f0 <_init>:
 80069f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f2:	bf00      	nop
 80069f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069f6:	bc08      	pop	{r3}
 80069f8:	469e      	mov	lr, r3
 80069fa:	4770      	bx	lr

080069fc <_fini>:
 80069fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fe:	bf00      	nop
 8006a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a02:	bc08      	pop	{r3}
 8006a04:	469e      	mov	lr, r3
 8006a06:	4770      	bx	lr
